Index: src/main/java/controller/DuelController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport controller.exeption.*;\r\nimport javafx.scene.image.Image;\r\nimport model.*;\r\nimport view.DuelView;\r\nimport view.GameViewGraphic;\r\n\r\nimport java.lang.reflect.Method;\r\nimport java.util.*;\r\n\r\npublic class DuelController {\r\n\r\n    public static final int[] playerGroundNumbers = {3, 4, 2, 5, 1};\r\n    private GameViewGraphic gameViewGraphic = null;\r\n    private User player;\r\n    private User rival;\r\n    private Round[] rounds;\r\n    private final int roundNumber;\r\n    private SelectedCard selectedCard;\r\n    private int roundCounter;\r\n    private Phase phase;\r\n    private boolean hasSummonedOrSetInThisTurn;\r\n    private ArrayList<ArrayList<ActionsDoneInTurn>> actionsOnThisCardPlayer = new ArrayList<>(5);\r\n    private ArrayList<ArrayList<ActionsDoneInTurn>> actionsOnThisCardRival = new ArrayList<>(5);\r\n    private Integer[] playerAttackPoints = new Integer[5];\r\n    private Integer[] rivalAttackPoints = new Integer[5];\r\n    private Integer[] playerDefencePoints = new Integer[5];\r\n    private Integer[] rivalDefencePoints = new Integer[5];\r\n    boolean isStartTurn;\r\n    private boolean shouldEndGameForView;\r\n\r\n    public DuelController(User player, User rival, int roundNumber) {\r\n        this.player = player;\r\n        this.rival = rival;\r\n        setGameDeck(this.player);\r\n        setGameDeck(this.rival);\r\n        this.rounds = new Round[roundNumber];\r\n        this.roundNumber = roundNumber;\r\n        this.roundCounter = 0;\r\n        startNewGame(null);\r\n    }\r\n\r\n    public ArrayList<ActionsDoneInTurn> getActionsOnThisCardPlayer(int i) {\r\n        return actionsOnThisCardPlayer.get(i);\r\n    }\r\n\r\n    public ArrayList<ActionsDoneInTurn> getActionsOnThisCardRival(int i) {\r\n        return actionsOnThisCardRival.get(i);\r\n    }\r\n\r\n    public void setDuelView(GameViewGraphic gameViewGraphic) {\r\n        this.gameViewGraphic = gameViewGraphic;\r\n    }\r\n\r\n    private void setGameDeck(User user) {\r\n        Deck deck;\r\n        if (user.getDeckByName(\"@\" + user.getActiveDeck().getDeckName()) == null) {\r\n            deck = new Deck(\"@\" + user.getActiveDeck().getDeckName());\r\n        } else {\r\n            deck = user.getDeckByName(\"@\" + user.getActiveDeck().getDeckName());\r\n            user.removeDeck(deck);\r\n        }\r\n        ArrayList<Card> mainCards = new ArrayList<>(user.getActiveDeck().getMainDeck());\r\n        ArrayList<Card> sideCards = new ArrayList<>(user.getActiveDeck().getSideDeck());\r\n        deck.setDeck(mainCards, sideCards);\r\n        user.addDeck(deck);\r\n        user.setGameDeck(deck);\r\n    }\r\n\r\n    public User getPlayer() {\r\n        return this.player;\r\n    }\r\n\r\n    public User getRival() {\r\n        return this.rival;\r\n    }\r\n\r\n    public void setPlayer(User player) {\r\n        this.player = player;\r\n    }\r\n\r\n    public void setRival(User rival) {\r\n        this.rival = rival;\r\n    }\r\n\r\n    public boolean getHasEnabledSuijin(int i) {\r\n        return actionsOnThisCardRival.get(i).contains(ActionsDoneInTurn.ENABLE_SUIJIN);\r\n    }\r\n\r\n    public void setHasEnabledSuijinTrue(int i) {\r\n        actionsOnThisCardRival.get(i).add(ActionsDoneInTurn.ENABLE_SUIJIN);\r\n    }\r\n\r\n    public void setMonsterAttackPlayer(int i, Integer number) {\r\n        this.playerAttackPoints[i] = number;\r\n    }\r\n\r\n    public void setMonsterAttackRival(int i, Integer number) {\r\n        this.rivalAttackPoints[i] = number;\r\n    }\r\n\r\n    public void setMonsterDefencePlayer(int i, Integer number) {\r\n        this.playerDefencePoints[i] = number;\r\n    }\r\n\r\n    public void setMonsterDefenceRival(int i, Integer number) {\r\n        this.rivalDefencePoints[i] = number;\r\n    }\r\n\r\n    public SelectedCard getSelectedCard() {\r\n        return this.selectedCard;\r\n    }\r\n\r\n    public boolean getShouldEndGameForView() {\r\n        return this.shouldEndGameForView;\r\n    }\r\n\r\n    public static int[] getPlayerGroundNumbers() {\r\n        return playerGroundNumbers;\r\n    }\r\n\r\n    public void setSelectedCard(SelectedCard selectedCard) {\r\n        this.selectedCard = selectedCard;\r\n    }\r\n\r\n    private void newActionsOnThisCardPlayer() {\r\n        ArrayList<ActionsDoneInTurn> arrayList = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            this.actionsOnThisCardPlayer.add(arrayList);\r\n        }\r\n    }\r\n\r\n    private void newActionsOnThisCardRival() {\r\n        ArrayList<ActionsDoneInTurn> arrayList = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            this.actionsOnThisCardRival.add(arrayList);\r\n        }\r\n    }\r\n\r\n    public void changeAllAttackPoints(int increaseOrDecrease, int amount) {\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.playerAttackPoints[i] != null)\r\n                this.playerAttackPoints[i] = this.playerAttackPoints[i] + increaseOrDecrease * amount;\r\n            if (this.rivalAttackPoints[i] != null)\r\n                this.rivalAttackPoints[i] = this.rivalAttackPoints[i] + increaseOrDecrease * amount;\r\n        }\r\n    }\r\n\r\n    public void changePlayerAttackPoint(int address, int amount) {\r\n        this.playerAttackPoints[address] += amount;\r\n    }\r\n\r\n    public void changeRivalAttackPoint(int address, int amount) {\r\n        this.rivalAttackPoints[address] += amount;\r\n    }\r\n\r\n    public void changePlayerDefencePoint(int address, int amount) {\r\n        this.playerDefencePoints[address] += amount;\r\n    }\r\n\r\n    public void changeRivalDefencePoint(int address, int amount) {\r\n        this.rivalDefencePoints[address] += amount;\r\n    }\r\n\r\n    public void startNewGame(User winner) {\r\n        if (winner != null) {\r\n            User loser;\r\n            if (winner.equals(this.player)) {\r\n                loser = this.rival;\r\n            } else {\r\n                loser = this.player;\r\n            }\r\n            this.player = loser;\r\n            this.rival = winner;\r\n        } else this.isStartTurn = true;\r\n        this.player.setLifePoint(8000);\r\n        this.rival.setLifePoint(8000);\r\n        this.player.setNewBoard();\r\n        this.rival.setNewBoard();\r\n        clearLastTurn();\r\n        startDrawPhase(true);\r\n    }\r\n\r\n    public void selectCardPlayerMonsterZone(int address) throws Exception {\r\n        MonsterCard[] monsters = this.player.getBoard().getMonsters();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (monsters[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(address), BoardZone.MONSTERZONE, address, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentMonsterZone(int address) throws Exception {\r\n        MonsterCard[] monsters = this.rival.getBoard().getMonsters();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (monsters[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getMonsterByNumber(address), BoardZone.MONSTERZONE, address, this.rival);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerTrapAndSpellZone(int address) throws Exception {\r\n        Card[] spellAndTrap = this.player.getBoard().getSpellsAndTraps();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (spellAndTrap[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getSpellAndTrapByNumber(address), BoardZone.SPELLANDTRAPZONE, address, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentTrapAndSpellZone(int address) throws Exception {\r\n        Card[] spellAndTrap = this.rival.getBoard().getSpellsAndTraps();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (spellAndTrap[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getSpellAndTrapByNumber(address), BoardZone.SPELLANDTRAPZONE, address, this.rival);\r\n\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerFieldZone() throws Exception {\r\n        Card fieldZone = this.player.getBoard().getFieldZone();\r\n        if (fieldZone == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getFieldZone(), BoardZone.FIELDZONE, 1, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentFieldZone() throws Exception {\r\n        Card fieldZone = this.rival.getBoard().getFieldZone();\r\n        if (fieldZone == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getFieldZone(), BoardZone.FIELDZONE, 1, this.rival);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerHand(int address) throws Exception {\r\n        List<Card> cardsInHand = this.player.getBoard().getCardsInHand();\r\n        if ((address > cardsInHand.size()) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        } else if (cardsInHand.get(address - 1) == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        }\r\n        this.selectedCard = new SelectedCard(this.player.getBoard().getCardInHandByNumber(address - 1), BoardZone.HAND, address - 1, this.player);\r\n        DuelView.printText(\"card selected\");\r\n    }\r\n\r\n    public void unselectCard() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else {\r\n            this.selectedCard = null;\r\n        }\r\n    }\r\n\r\n    public void unselectCardFromCommand() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else {\r\n            this.selectedCard = null;\r\n            DuelView.printText(\"card deselected\");\r\n        }\r\n    }\r\n\r\n    public int getCountOfMonsterCardsInGround(User user) {\r\n        MonsterCard[] monsterCards = user.getBoard().getMonsters();\r\n        int countOfMonsterCardsInGround = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            if (monsterCards[i] != null) {\r\n                countOfMonsterCardsInGround++;\r\n            }\r\n        }\r\n        return countOfMonsterCardsInGround;\r\n    }\r\n\r\n    private void addToAttackDefenceOfPutCard(int place, User owner) {\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.player.getBoard().getMonsterByNumber(i) != null)\r\n                this.player.getBoard().getMonsterByNumber(i).takeAction(this, TakeActionCase.ANY_MONSTER_PUT_IN_MONSTERZONE, owner, place);\r\n            if (this.rival.getBoard().getMonsterByNumber(i) != null)\r\n                this.rival.getBoard().getMonsterByNumber(i).takeAction(this, TakeActionCase.ANY_MONSTER_PUT_IN_MONSTERZONE, owner, place);\r\n        }\r\n        if (this.player.getBoard().getFieldZone() != null)\r\n            ((SpellCard) this.player.getBoard().getFieldZone()).takeAction(this, TakeActionCase.ANY_MONSTER_PUT_IN_MONSTERZONE, owner, place);\r\n        if (this.rival.getBoard().getFieldZone() != null)\r\n            ((SpellCard) this.rival.getBoard().getFieldZone()).takeAction(this, TakeActionCase.ANY_MONSTER_PUT_IN_MONSTERZONE, owner, place);\r\n    }\r\n\r\n    public void summonMonster() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        }\r\n        if (!(this.selectedCard.getCard() instanceof MonsterCard && this.selectedCard.getBoardZone().equals(BoardZone.HAND) && !((MonsterCard) this.selectedCard.getCard()).getCardType().equals(CardType.RITUAL))) {\r\n            throw new CanNotSummon();\r\n        }\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2)))) {\r\n            throw new ActionNotAllowedInThisPhase();\r\n        }\r\n        if (this.player.getBoard().isFullMonsterZone()) {\r\n            throw new FullMonsterZone();\r\n        }\r\n        if (((MonsterCard) this.selectedCard.getCard()).getCanBeNormalSummoned()) {\r\n            if (hasSummonedOrSetInThisTurn) {\r\n                throw new AlreadySummoned();\r\n            }\r\n            MonsterCard monsterCard = (MonsterCard) selectedCard.getCard();\r\n            if (monsterCard.getLevel() <= 4) {\r\n                int place = this.player.getBoard().putMonster(monsterCard, \"OO\");\r\n                setMonsterAttackPlayer(place, monsterCard.getAttack());\r\n                this.playerDefencePoints[place] = monsterCard.getAttack();\r\n                monsterCard.takeAction(this, TakeActionCase.SUMMONED, this.player, place);\r\n                addToAttackDefenceOfPutCard(place, this.player);\r\n                this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n                unselectCard();\r\n                DuelView.printText(\"summoned successfully\");\r\n                getBoard();\r\n                hasSummonedOrSetInThisTurn = true;\r\n                return;\r\n            }\r\n            if (monsterCard.getLevel() < 7) {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 1) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeOneMonsterForSummon();\r\n                }\r\n            } else {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 2) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeTwoMonstersForSummon();\r\n                }\r\n            }\r\n        } else if (!((MonsterCard) this.selectedCard.getCard()).getCardType().equals(CardType.RITUAL)) {\r\n            specialSummonNormal();\r\n        }\r\n    }\r\n\r\n    private void tributeOneMonsterForSummon() throws Exception {\r\n        DuelView.printText(\"select a monster by number to tribute\");\r\n        String input = DuelView.scan();\r\n        if (input.equals(\"cancel\")) return;\r\n        while (!input.matches(\"[\\\\d]+\") && Integer.parseInt(input) < 6) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input = DuelView.scan();\r\n            if (input.equals(\"cancel\")) return;\r\n        }\r\n        int address = Integer.parseInt(input);\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address) == null) throw new NoMonsterHere();\r\n        this.player.getBoard().removeMonster(address, this, player);\r\n        removeMonsterPlayer(address);\r\n        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"OO\");\r\n        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());\r\n        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.SUMMONED, this.player, place);\r\n        addToAttackDefenceOfPutCard(place, this.player);\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"summoned successfully\");\r\n        getBoard();\r\n        hasSummonedOrSetInThisTurn = true;\r\n    }\r\n\r\n    private void tributeTwoMonstersForSummon() throws Exception {\r\n        DuelView.printText(\"select two monsters by number to tribute\");\r\n        String input1 = DuelView.scan();\r\n        if (input1.equals(\"cancel\")) return;\r\n        while (!input1.matches(\"[\\\\d]+\") && Integer.parseInt(input1) < 6) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input1 = DuelView.scan();\r\n            if (input1.equals(\"cancel\")) return;\r\n        }\r\n        int address1 = Integer.parseInt(input1) - 1;\r\n        address1 = playerGroundNumbers[address1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address1) == null) throw new NoMonsterHere();\r\n        String input2 = DuelView.scan();\r\n        if (input2.equals(\"cancel\")) return;\r\n        while (!input2.matches(\"[\\\\d]+\") && Integer.parseInt(input2) < 6) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input2 = DuelView.scan();\r\n            if (input2.equals(\"cancel\")) return;\r\n        }\r\n        int address2 = Integer.parseInt(input2) - 1;\r\n        address2 = playerGroundNumbers[address2] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address2) == null) throw new NoMonsterHere();\r\n        if (address1 == address2) throw new sameAddresses();\r\n        this.player.getBoard().removeMonster(address1, this, player);\r\n        this.player.getBoard().removeMonster(address2, this, player);\r\n        removeMonsterPlayer(address1);\r\n        removeMonsterPlayer(address2);\r\n        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"OO\");\r\n        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());\r\n        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.SUMMONED, this.player, place);\r\n        addToAttackDefenceOfPutCard(place, this.player);\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"summoned successfully\");\r\n        getBoard();\r\n        hasSummonedOrSetInThisTurn = true;\r\n    }\r\n\r\n    public void specialSummonNormal() {\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.SPECIAL_SUMMONED, this.player, this.selectedCard.getNumber());\r\n\r\n    }\r\n\r\n    public void preSet() throws Exception {\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!(this.selectedCard.getBoardZone().equals(BoardZone.HAND))) throw new CanNotSet();\r\n        if (this.selectedCard.getCard() instanceof MonsterCard) setMonster();\r\n        else if (this.selectedCard.getCard() instanceof SpellCard) setSpell();\r\n        else if (this.selectedCard.getCard() instanceof TrapCard) setTrap();\r\n    }\r\n\r\n    public void setMonster() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2)))) {\r\n            throw new ImproperPhase();\r\n        }\r\n        if (this.player.getBoard().isFullMonsterZone()) {\r\n            throw new FullMonsterZone();\r\n        }\r\n        if (hasSummonedOrSetInThisTurn) {\r\n            throw new AlreadySummoned();\r\n        }\r\n        MonsterCard monsterCard = (MonsterCard) this.selectedCard.getCard();\r\n        if (monsterCard.getCanBeNormalSummoned()) {\r\n            if (monsterCard.getLevel() <= 4) {\r\n                int place = this.player.getBoard().putMonster(monsterCard, \"DH\");\r\n                setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());\r\n                this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();\r\n                addToAttackDefenceOfPutCard(place, this.player);\r\n                this.actionsOnThisCardPlayer.get(place).add(ActionsDoneInTurn.SET);\r\n                this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n                unselectCard();\r\n                DuelView.printText(\"set successfully\");\r\n                hasSummonedOrSetInThisTurn = true;\r\n                getBoard();\r\n                return;\r\n            }\r\n            if (monsterCard.getLevel() < 7) {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 1) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeOneMonsterForSet();\r\n                }\r\n            } else {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 2) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeTwoMonstersForSet();\r\n                }\r\n            }\r\n        } else if (!((MonsterCard) this.selectedCard.getCard()).getCardType().equals(CardType.RITUAL)) {\r\n            specialSummonNormal();\r\n        }\r\n    }\r\n\r\n    private void tributeOneMonsterForSet() throws Exception {\r\n        DuelView.printText(\"select a monster by number to tribute\");\r\n        String input = DuelView.scan();\r\n        if (input.equals(\"cancel\")) return;\r\n        while (!(input.matches(\"[\\\\d]+\") && Integer.parseInt(input) < 6)) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input = DuelView.scan();\r\n            if (input.equals(\"cancel\")) return;\r\n        }\r\n        int address = Integer.parseInt(input);\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address) == null) throw new NoMonsterHere();\r\n        this.player.getBoard().removeMonster(address, this, player);\r\n        removeMonsterPlayer(address);\r\n        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\");\r\n        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());\r\n        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();\r\n        addToAttackDefenceOfPutCard(place, this.player);\r\n        this.actionsOnThisCardPlayer.get(place).add(ActionsDoneInTurn.SET);\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        hasSummonedOrSetInThisTurn = true;\r\n        getBoard();\r\n    }\r\n\r\n    private void tributeTwoMonstersForSet() throws Exception {\r\n        DuelView.printText(\"select two monsters by number to tribute\");\r\n        String input1 = DuelView.scan();\r\n        if (input1.equals(\"cancel\")) return;\r\n        while (!input1.matches(\"[\\\\d]+\")) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input1 = DuelView.scan();\r\n            if (input1.equals(\"cancel\")) return;\r\n        }\r\n        int address1 = Integer.parseInt(input1);\r\n        address1 = playerGroundNumbers[address1 - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address1) == null) throw new NoMonsterHere();\r\n        String input2 = DuelView.scan();\r\n        if (input2.equals(\"cancel\")) return;\r\n        while (!input2.matches(\"[\\\\d]+\")) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input2 = DuelView.scan();\r\n            if (input2.equals(\"cancel\")) return;\r\n        }\r\n        int address2 = Integer.parseInt(input2);\r\n        address2 = playerGroundNumbers[address2 - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address2) == null) throw new NoMonsterHere();\r\n        if (address1 == address2) throw new sameAddresses();\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        this.player.getBoard().removeMonster(address1, this, player);\r\n        this.player.getBoard().removeMonster(address2, this, player);\r\n        removeMonsterPlayer(address1);\r\n        removeMonsterPlayer(address2);\r\n        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\");\r\n        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());\r\n        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();\r\n        addToAttackDefenceOfPutCard(place, this.player);\r\n        this.actionsOnThisCardPlayer.get(place).add(ActionsDoneInTurn.SET);\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        hasSummonedOrSetInThisTurn = true;\r\n        getBoard();\r\n    }\r\n\r\n    private void setSpell() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new ImproperPhase();\r\n        SpellCard spellCard = (SpellCard) this.selectedCard.getCard();\r\n        if (!spellCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().isFullSpellAndTrapZone())\r\n                throw new FullSpellZone();\r\n            this.player.getBoard().putSpellOrTrap(spellCard, \"H\");\r\n        } else {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            this.player.getBoard().putInFieldZone(spellCard);\r\n        }\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        getBoard();\r\n    }\r\n\r\n    private void setTrap() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new ImproperPhase();\r\n        TrapCard trapCard = (TrapCard) this.selectedCard.getCard();\r\n        if (!trapCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().isFullSpellAndTrapZone()) {\r\n                throw new FullSpellZone();\r\n            }\r\n            this.player.getBoard().putSpellOrTrap(trapCard, \"H\");\r\n        } else {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            this.player.getBoard().putInFieldZone(trapCard);\r\n        }\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        getBoard();\r\n    }\r\n\r\n    public void changePosition(String targetPosition) throws Exception {\r\n        String targetPositionInShort = \"\";\r\n        switch (targetPosition) {\r\n            case \"attack\":\r\n                targetPositionInShort = \"OO\";\r\n                break;\r\n            case \"defence\":\r\n                targetPositionInShort = \"DO\";\r\n                break;\r\n        }\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!this.selectedCard.getOwner().getUsername().equals(player.getUsername()) || !this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) || this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\"))\r\n            throw new CanNotChangePosition();\r\n        if (!(this.phase.equals(Phase.MAIN_PHASE1) || (this.phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new CantDoActionInThisPhase();\r\n        if (this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(targetPositionInShort) || this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\"))\r\n            throw new AlreadyInWantedPosition();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.CHANGE_POSITION))\r\n            throw new AlreadyChangedPosition();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.ATTACK) && this.phase.equals(Phase.MAIN_PHASE2))\r\n            throw new HasAttackedInBattle();\r\n        this.player.getBoard().changeMonsterPosition(this.selectedCard.getNumber(), targetPositionInShort);\r\n        actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.CHANGE_POSITION);\r\n        DuelView.printText(\"monster card position changed successfully\");\r\n        getBoard();\r\n    }\r\n\r\n    public void flipSummon() throws Exception {\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) || !this.selectedCard.getOwner().getUsername().equals(player.getUsername()))\r\n            throw new CanNotChangePosition();\r\n        if (!(this.phase.equals(Phase.MAIN_PHASE1) || this.phase.equals(Phase.MAIN_PHASE2)))\r\n            throw new CantDoActionInThisPhase();\r\n        if (!this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\") || actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.SET))\r\n            throw new CanNotFlipSummon();\r\n        this.player.getBoard().changeMonsterPosition(this.selectedCard.getNumber(), \"OO\");\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.FLIP_SUMMONED, this.player, this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"flip summoned successfully\");\r\n        getBoard();\r\n    }\r\n\r\n    public void attackMonster(int monsterNumber) throws Exception {\r\n        monsterNumber = playerGroundNumbers[monsterNumber - 1] - 1;\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!(this.selectedCard.getOwner().getUsername().equals(player.getUsername()) && this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) && (this.selectedCard.getCard() instanceof MonsterCard) && (this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"OO\"))))\r\n            throw new CanNotAttack();\r\n        if (!(this.phase.equals(Phase.BATTLE_PHASE)))\r\n            throw new CantDoActionInThisPhase();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.ATTACK))\r\n            throw new AlreadyAttacked();\r\n        if (getCountOfMonsterCardsInGround(this.rival) == 0)\r\n            throw new NoCardToAttack();\r\n        if (rival.getBoard().getMonsterByNumber(monsterNumber) == null)\r\n            throw new NoCardFoundInThisPosition();\r\n        findWayAttack(monsterNumber);\r\n    }\r\n\r\n    private void findWayAttack(int monsterNumber) throws Exception {\r\n        String targetPosition = this.rival.getBoard().getMonsterConditionByNumber(monsterNumber);\r\n        if (this.rival.getBoard().getMonsterByNumber(monsterNumber).canBeAttacked(this, monsterNumber)) {\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.ATTACKED, this.rival, monsterNumber);\r\n            switch (targetPosition) {\r\n                case \"OO\":\r\n                    attackMonsterOO(monsterNumber);\r\n                    break;\r\n                case \"DO\":\r\n                    attackMonsterDO(monsterNumber);\r\n                    break;\r\n                case \"DH\":\r\n                    attackMonsterDH(monsterNumber);\r\n                    break;\r\n            }\r\n        } else throw new CanNotAttackThisCard();\r\n    }\r\n\r\n    private void attackMonsterOO(int monsterNumber) throws Exception {\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        int targetAttack = this.rivalAttackPoints[monsterNumber];\r\n        if (attackerAttack > targetAttack) {\r\n            int damage = attackerAttack - targetAttack;\r\n            if (!this.rival.getBoard().getMonsterByNumber(monsterNumber).equals(MonsterCard.EXPLODER_DRAGON))\r\n                this.rival.decreaseLifePoint(damage);\r\n            this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber, this, rival);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"your opponent’s monster is destroyed and your opponent receives \" + damage + \" battle damage\");\r\n        } else if (attackerAttack == targetAttack) {\r\n            this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber, this, rival);\r\n            if (this.player.getBoard().getMonsterByNumber(this.selectedCard.getNumber()) != null) {\r\n                this.player.getBoard().putInGraveYard(this.selectedCard.getCard());\r\n                this.player.getBoard().removeMonster(this.selectedCard.getNumber(), this, player);\r\n                removeMonsterPlayer(this.selectedCard.getNumber());\r\n            }\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"both you and your opponent monster cards are destroyed and no one receives damage\");\r\n        } else {\r\n            int damage = targetAttack - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.REMOVE_FROM_MONSTERZONE, this.player, this.selectedCard.getNumber());\r\n            this.player.getBoard().putInGraveYard(this.selectedCard.getCard());\r\n            this.player.getBoard().removeMonster(this.selectedCard.getNumber(), this, player);\r\n            removeMonsterPlayer(this.selectedCard.getNumber());\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"Your monster card is destroyed and you received \" + damage + \" battle damage\");\r\n        }\r\n        unselectCard();\r\n        getBoard();\r\n    }\r\n\r\n    private void attackMonsterDO(int monsterNumber) throws Exception {\r\n        MonsterCard target = this.rival.getBoard().getMonsterByNumber(monsterNumber);\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        if (attackerAttack > target.getDefence()) {\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber, this, rival);\r\n            this.rival.getBoard().putInGraveYard(target);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"the defense position monster is destroyed\");\r\n        } else if (attackerAttack == target.getDefence()) {\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"no card is destroyed\");\r\n        } else {\r\n            int damage = this.rivalDefencePoints[monsterNumber] - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"no card is destroyed and you received \" + damage + \" battle damage\");\r\n        }\r\n        unselectCard();\r\n        getBoard();\r\n    }\r\n\r\n    private void attackMonsterDH(int monsterNumber) throws Exception {\r\n        MonsterCard target = this.rival.getBoard().getMonsterByNumber(monsterNumber);\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        String targetName = this.rival.getBoard().getMonsterByNumber(monsterNumber).getNamePascalCase();\r\n        this.rival.getBoard().changeMonsterPosition(monsterNumber, \"DO\");\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.FLIP_SUMMONED, this.rival, this.selectedCard.getNumber());\r\n        if (attackerAttack > target.getDefence()) {\r\n            this.rival.getBoard().putInGraveYard(target);\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber, this, rival);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and the defense position monster is destroyed\");\r\n        } else if (attackerAttack == target.getDefence()) {\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and no card is destroyed\");\r\n        } else {\r\n            int damage = this.rivalDefencePoints[monsterNumber] - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and no card is destroyed and you received \" + damage + \" battle damage\");\r\n        }\r\n        unselectCard();\r\n        getBoard();\r\n    }\r\n\r\n    public void directAttack() throws Exception {\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE)) throw new CanNotAttack();\r\n        if (!this.phase.equals(Phase.BATTLE_PHASE)) throw new ImproperPhase();\r\n        int countOfMonsterCardsInGround = getCountOfMonsterCardsInGround(this.rival);\r\n        if (countOfMonsterCardsInGround == 0) {\r\n            rival.decreaseLifePoint(((MonsterCard) this.selectedCard.getCard()).getAttack());\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            unselectCard();\r\n            getBoard();\r\n        } else throw new CanNotAttackDirectly();\r\n        getBoard();\r\n    }\r\n\r\n    public void activateSpell() throws Exception {\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!(this.selectedCard.getCard() instanceof SpellCard))\r\n            throw new IsNotSpell();\r\n        if (!((this.phase.equals(Phase.MAIN_PHASE1)) || (this.phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new CanNotActivateEffectInThisPhase();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.HAND) && this.player.getBoard().getSpellAndTrapConditionByNumber(this.selectedCard.getNumber()).equals(\"O\"))\r\n            throw new AlreadyActivated();\r\n        SpellCard spellCard = (SpellCard) this.selectedCard.getCard();\r\n        if (this.player.getBoard().isFullSpellAndTrapZone() && !spellCard.getIcon().equals(Icon.FIELD) && selectedCard.getBoardZone().equals(BoardZone.HAND))\r\n            throw new FullSpellZone();\r\n        if ((((SpellCard) this.selectedCard.getCard()).getIcon().equals(Icon.QUICK_PLAY)\r\n                && actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.SET)))\r\n            throw new UndonePreparationOfSpell();\r\n        if (spellCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                if (((SpellCard) this.player.getBoard().getFieldZone()).takeAction(this, TakeActionCase.REMOVE_FROM_FIELDZONE_FACE_UP, this.player, 1))\r\n                    this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            if (((SpellCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.PUT_IN_FIELDZONE_FACE_UP, this.player, 1))\r\n                this.player.getBoard().putInFieldZone(spellCard);\r\n            this.player.getBoard().getCardsInHand().remove((int) selectedCard.getNumber());\r\n        } else {\r\n            if (selectedCard.getBoardZone().equals(BoardZone.SPELLANDTRAPZONE)) {\r\n                this.player.getBoard().changeSpellAndTrapPosition(selectedCard.getNumber(), \"O\");\r\n                boolean wasSuccessful = ((SpellCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.PUT_IN_SPELLTRAPZONE, this.player, selectedCard.getNumber());\r\n                if (!wasSuccessful) {\r\n                    this.player.getBoard().removeSpellOrTrap(selectedCard.getNumber());\r\n                }\r\n            } else if (selectedCard.getBoardZone().equals(BoardZone.HAND)) {\r\n                int number = this.player.getBoard().putSpellOrTrap(selectedCard.getCard(), \"O\");\r\n                boolean wasSuccessful = ((SpellCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.PUT_IN_SPELLTRAPZONE, this.player, number);\r\n                if (!wasSuccessful) {\r\n                    this.player.getBoard().removeSpellOrTrap(selectedCard.getNumber());\r\n                }\r\n                this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n            }\r\n        }\r\n        unselectCard();\r\n        DuelView.printText(\"spell activated\");\r\n        getBoard();\r\n    }\r\n\r\n    public void cheatLifePoint(String target, int lifePoint) {\r\n        if (lifePoint < 2000) {\r\n            if (target.equals(\"player\"))\r\n                this.player.increaseLifePoint(lifePoint);\r\n            if (target.equals(\"opponent\"))\r\n                this.rival.decreaseLifePoint(lifePoint);\r\n            DuelView.printText(\"shame on you for cheating!!!!\");\r\n        }\r\n    }\r\n\r\n    public void cheatMoney(int amount) {\r\n        if (amount <= 5000)\r\n            this.player.increaseMoney(amount);\r\n        DuelView.printText(\"shame on you for cheating!!!!\");\r\n    }\r\n\r\n    public void cheatToWinGame() {\r\n        DuelView.printText(\"this is not a good way to win the game, but ok. Shame on you!\");\r\n        endGame(this.rival);\r\n    }\r\n\r\n    public void surrender() {\r\n        endGame(this.player);\r\n    }\r\n\r\n    public void manageEndGame() {\r\n        List<Card> playersCardInHand = player.getBoard().getCardsInHand();\r\n        List<Card> rivalsCardInHand = rival.getBoard().getCardsInHand();\r\n        if (player.getLifePoint() <= 0) {\r\n            endGame(player);\r\n        } else if (rival.getLifePoint() <= 0) {\r\n            endGame(rival);\r\n        } else if (playersCardInHand.isEmpty()) {\r\n            endGame(player);\r\n        } else if (rivalsCardInHand.isEmpty()) {\r\n            endGame(rival);\r\n        }\r\n    }\r\n\r\n    private void endGame(User loser) {\r\n        User winner;\r\n        if (loser.equals(rival)) {\r\n            winner = player;\r\n        } else {\r\n            winner = rival;\r\n        }\r\n        if (player.getLifePoint() < 0) player.setLifePoint(0);\r\n        if (rival.getLifePoint() < 0) rival.setLifePoint(0);\r\n        roundCounter++;\r\n        if (roundNumber == 1) {\r\n            winner.increaseScore(1000);\r\n            winner.increaseMoney(1000 + winner.getLifePoint());\r\n            loser.increaseMoney(100);\r\n            shouldEndGameForView = true;\r\n            DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n        }\r\n        if (roundNumber == 3) {\r\n            this.rounds[this.roundCounter - 1] = new Round(winner, loser, winner.getLifePoint(), loser.getLifePoint());\r\n            if (this.roundCounter == 2 && this.rounds[0].getWinner().equals(this.rounds[1].getWinner())) {\r\n                int winnerLP1 = this.rounds[0].getLifePointByUser(winner);\r\n                int winnerLP2 = this.rounds[1].getLifePointByUser(winner);\r\n                int maxLP = Math.max(winnerLP1, winnerLP2);\r\n                winner.increaseScore(3000);\r\n                winner.increaseMoney(3000 + (3 * maxLP));\r\n                loser.increaseMoney(300);\r\n                shouldEndGameForView = true;\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                DuelView.printText(winner.getUsername() + \" won the whole match with score: \" + winner.getScore() + \"-\" + loser.getScore());\r\n            } else if (roundCounter == 3) {\r\n                int winnerLP1 = this.rounds[0].getLifePointByUser(winner);\r\n                int winnerLP2 = this.rounds[1].getLifePointByUser(winner);\r\n                int winnerLP3 = this.rounds[2].getLifePointByUser(winner);\r\n                int maxLP = Math.max(winnerLP1, winnerLP2);\r\n                maxLP = Math.max(maxLP, winnerLP3);\r\n                winner.increaseScore(3000);\r\n                winner.increaseMoney(3000 + (3 * maxLP));\r\n                loser.increaseMoney(300);\r\n                shouldEndGameForView = true;\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                DuelView.printText(winner.getUsername() + \" won the whole match with score: \" + winner.getScore() + \"-\" + loser.getScore());\r\n            } else {\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                exchangeCardBetweenMainAndSide(this.player);\r\n                exchangeCardBetweenMainAndSide(this.rival);\r\n                startNewGame(winner);\r\n                //TODO connect this\r\n//                gameViewGraphic.getCommandForDuel();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void exchangeCardBetweenMainAndSide(User user) {\r\n        DuelView.printText(\"Do you want to exchange a card between main and side deck \" + user.getNickname() + \"?\");\r\n        String answer = DuelView.scan().toLowerCase();\r\n        if (answer.equals(\"yes\")) {\r\n            DuelView.printText(\"enter card name from main and side\");\r\n            String main = DuelView.scan();\r\n            Card mainCard = user.getCardByName(main);\r\n            while (mainCard == null || !user.getGameDeck().getMainDeck().contains(mainCard)) {\r\n                DuelView.printText(\"Please enter a card you have in your main deck!\");\r\n                main = DuelView.scan();\r\n                mainCard = user.getCardByName(main);\r\n            }\r\n            String side = DuelView.scan();\r\n            Card sideCard = user.getCardByName(side);\r\n            while (sideCard == null || !user.getGameDeck().getSideDeck().contains(sideCard)) {\r\n                DuelView.printText(\"Please enter a card you have in your side deck!\");\r\n                side = DuelView.scan();\r\n                sideCard = user.getCardByName(side);\r\n            }\r\n            user.getGameDeck().getSideDeck().remove(sideCard);\r\n            user.getGameDeck().getMainDeck().remove(mainCard);\r\n            user.getGameDeck().getSideDeck().add(mainCard);\r\n            user.getGameDeck().getMainDeck().add(sideCard);\r\n        }\r\n    }\r\n\r\n    public void goNextPhase() {\r\n        if (this.phase.equals(Phase.DRAW_PHASE)) {\r\n            this.phase = Phase.STANDBY_PHASE;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (phase.equals(Phase.STANDBY_PHASE)) {\r\n            this.phase = Phase.MAIN_PHASE1;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n            getBoard();\r\n        } else if (phase.equals(Phase.MAIN_PHASE1)) {\r\n            if (!isStartTurn)\r\n                this.phase = Phase.BATTLE_PHASE;\r\n            else\r\n                this.phase = Phase.MAIN_PHASE2;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (this.phase.equals(Phase.BATTLE_PHASE)) {\r\n            this.phase = Phase.MAIN_PHASE2;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (this.phase.equals(Phase.MAIN_PHASE2)) {\r\n            this.phase = Phase.END_PHASE;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (this.phase.equals(Phase.END_PHASE)) {\r\n            DuelView.printText(\"its \" + rival.getNickname() + \"’s turn\");\r\n            changeTurn();\r\n            startDrawPhase(false);\r\n            if (this.player.getUsername().equals(\"@AI@\"))\r\n                handleAITurn();\r\n        }\r\n    }\r\n\r\n    private void startDrawPhase(boolean isFirst) {\r\n        this.phase = Phase.DRAW_PHASE;\r\n        DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        ArrayList<Card> playerMainCards = (ArrayList<Card>) this.player.getGameDeck().getMainDeck();\r\n        ArrayList<Card> rivalMainCards = (ArrayList<Card>) this.rival.getGameDeck().getMainDeck();\r\n        if (playerMainCards.size() == 0) endGame(this.player);\r\n        else {\r\n            Collections.shuffle(this.player.getGameDeck().getMainDeck());\r\n            Collections.shuffle(this.rival.getGameDeck().getMainDeck());\r\n            if (isFirst) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    this.player.getBoard().addCardToHand(playerMainCards.get(playerMainCards.size() - 1));\r\n                    this.player.getGameDeck().removeCardFromMainDeck(playerMainCards.get(playerMainCards.size() - 1));\r\n                    Collections.shuffle(this.player.getGameDeck().getMainDeck());\r\n                    this.rival.getBoard().addCardToHand(rivalMainCards.get(rivalMainCards.size() - 1));\r\n                    this.rival.getGameDeck().removeCardFromMainDeck(rivalMainCards.get(rivalMainCards.size() - 1));\r\n                    Collections.shuffle(this.rival.getGameDeck().getMainDeck());\r\n                }\r\n            }\r\n            if (this.player.getBoard().getCardsInHand().size() < 6) {\r\n                this.player.getBoard().addCardToHand(playerMainCards.get(playerMainCards.size() - 1));\r\n                this.player.getGameDeck().removeCardFromMainDeck(playerMainCards.get(playerMainCards.size() - 1));\r\n                DuelView.printText(\"new card added to the hand : \" + playerMainCards.get(playerMainCards.size() - 1).getNamePascalCase());\r\n            }\r\n            Collections.shuffle(this.player.getGameDeck().getMainDeck());\r\n        }\r\n        goNextPhase();\r\n    }\r\n\r\n    private void changeTurn() {\r\n        if (this.isStartTurn) this.isStartTurn = false;\r\n        clearLastTurn();\r\n        User temp = this.player;\r\n        this.player = rival;\r\n        this.rival = temp;\r\n        changePlayerAndRival();\r\n    }\r\n\r\n    public void changePlayerAndRival() {\r\n        Integer[] temp = this.playerAttackPoints;\r\n        this.playerAttackPoints = this.rivalAttackPoints;\r\n        this.rivalAttackPoints = temp;\r\n    }\r\n\r\n    private void clearLastTurn() {\r\n        this.selectedCard = null;\r\n        this.hasSummonedOrSetInThisTurn = false;\r\n        newThoseThatResetWithTurn();\r\n    }\r\n\r\n    private void newThoseThatResetWithTurn() {\r\n        newActionsOnThisCardPlayer();\r\n        newActionsOnThisCardRival();\r\n        for (int i = 0; i < 5; i++) {\r\n            actionsOnThisCardPlayer.get(i).clear();\r\n            actionsOnThisCardRival.get(i).clear();\r\n            if (this.player.getBoard().getMonsterByNumber(i) != null && this.playerAttackPoints[i] != null && this.playerAttackPoints[i] == 0 && this.player.getBoard().getMonsterByNumber(i).getAttack() != 0) {\r\n                this.playerAttackPoints[i] = this.player.getBoard().getMonsterByNumber(i).getAttack();\r\n            }\r\n        }\r\n    }\r\n\r\n    public ArrayList<Image> getBoard() {\r\n        Image unknown = new Image(\"images/Cards/Unknown.jpg\");\r\n        ArrayList<Image> images = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.player.getBoard().getMonsterConditionByNumber(i) == null) images.add(null);\r\n            else images.add(this.player.getBoard().getMonsterByNumber(i).getImage());\r\n        }\r\n        for (int i = 4; i >= 0; i--) {\r\n            if (this.rival.getBoard().getMonsterConditionByNumber(i) == null) images.add(null);\r\n            else if (!this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DH\"))\r\n                images.add(this.rival.getBoard().getMonsterByNumber(i).getImage());\r\n            else\r\n                images.add(unknown);\r\n        }\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.player.getBoard().getSpellAndTrapByNumber(i) == null) images.add(null);\r\n            else images.add(this.player.getBoard().getSpellAndTrapByNumber(i).getImage());\r\n        }\r\n        for (int i = 4; i >= 0; i--) {\r\n            if (this.rival.getBoard().getSpellAndTrapByNumber(i) == null) images.add(null);\r\n            else if (this.rival.getBoard().getSpellAndTrapConditionByNumber(i).equals(\"O\"))\r\n                images.add(this.rival.getBoard().getSpellAndTrapByNumber(i).getImage());\r\n            else\r\n                images.add(unknown);\r\n        }\r\n        for (int i = 0; i < 6; i++) {\r\n            if (this.player.getBoard().getCardsInHand().size()<=i) images.add(null);\r\n            else images.add(this.player.getBoard().getCardsInHand().get(i).getImage());\r\n        }\r\n        for (int i = 5; i >= 0; i--) {\r\n            if (this.rival.getBoard().getCardsInHand().size()<=i) images.add(null);\r\n            else images.add(unknown);\r\n        }\r\n        if(this.player.getBoard().getFieldZone() == null)\r\n            images.add(null);\r\n        else\r\n            images.add(this.player.getBoard().getFieldZone().getImage());\r\n        if(this.rival.getBoard().getFieldZone() == null)\r\n            images.add(null);\r\n        else\r\n            images.add(this.rival.getBoard().getFieldZone().getImage());\r\n        if(this.player.getBoard().getCardsInGraveyard().isEmpty())\r\n            images.add(null);\r\n        else\r\n            images.add(this.player.getBoard().getCardsInGraveyard().get(this.player.getBoard().getCardsInGraveyard().size()-1).getImage());\r\n        if(this.rival.getBoard().getCardsInGraveyard().isEmpty())\r\n            images.add(null);\r\n        else\r\n            images.add(this.rival.getBoard().getCardsInGraveyard().get(this.rival.getBoard().getCardsInGraveyard().size()-1).getImage());\r\n        return images;\r\n\r\n        /*StringBuilder toPrint = new StringBuilder(this.rival.getNickname() + \":\" + this.rival.getLifePoint() + \"\\n\");\r\n        for (Card ignored : this.rival.getBoard().getCardsInHand()) {\r\n            toPrint.append(\"\\tc\");\r\n        }\r\n        toPrint.append(\"\\n\");\r\n        toPrint.append(this.rival.getGameDeck().getMainSize()).append(\"\\n\");\r\n        for (int i = 4; i > -1; i--) {\r\n            toPrint.append(\"\\t\");\r\n            if (this.rival.getBoard().getSpellAndTrapConditionByNumber(i) == null) toPrint.append(\"E\");\r\n            else toPrint.append(this.rival.getBoard().getSpellAndTrapConditionByNumber(i));\r\n        }\r\n        toPrint.append(\"\\n\");\r\n        for (int i = 4; i > -1; i--) {\r\n            toPrint.append(\"\\t\");\r\n            if (this.rival.getBoard().getMonsterConditionByNumber(i) == null) toPrint.append(\"E\");\r\n            else toPrint.append(this.rival.getBoard().getMonsterConditionByNumber(i));\r\n        }\r\n        toPrint.append(\"\\n\").append(this.rival.getBoard().getCardsInGraveyard().size()).append(\"\\t\\t\\t\\t\\t\\t\");\r\n        if (this.rival.getBoard().getFieldZone() == null) toPrint.append(\"E\\n\");\r\n        else toPrint.append(\"O\\n\");\r\n        toPrint.append(\"\\n--------------------------\\n\\n\");\r\n        if (this.player.getBoard().getFieldZone() == null) toPrint.append(\"E\\t\\t\\t\\t\\t\\t\");\r\n        else toPrint.append(\"O\\t\\t\\t\\t\\t\\t\");\r\n        toPrint.append(this.player.getBoard().getCardsInGraveyard().size()).append(\"\\n\");\r\n        for (int i = 0; i < 5; i++) {\r\n            toPrint.append(\"\\t\");\r\n            if (this.player.getBoard().getMonsterConditionByNumber(i) == null) toPrint.append(\"E\");\r\n            else toPrint.append(this.player.getBoard().getMonsterConditionByNumber(i));\r\n        }\r\n        toPrint.append(\"\\n\");\r\n        for (int i = 0; i < 5; i++) {\r\n            toPrint.append(\"\\t\");\r\n            if (this.player.getBoard().getSpellAndTrapConditionByNumber(i) == null) toPrint.append(\"E\");\r\n            else toPrint.append(this.player.getBoard().getSpellAndTrapConditionByNumber(i));\r\n        }\r\n        toPrint.append(\"\\n\\t\\t\\t\\t\\t\\t\").append(this.player.getGameDeck().getMainSize()).append(\"\\n\");\r\n        for (Card ignored : this.player.getBoard().getCardsInHand()) {\r\n//            toPrint += ignored.getNamePascalCase() + \"\\t\";\r\n            toPrint.append(\"c\\t\");\r\n        }\r\n        toPrint.append(\"\\n\").append(this.player.getNickname()).append(\":\").append(this.player.getLifePoint());\r\n        DuelView.printText(toPrint.toString());*/\r\n    }\r\n\r\n    public void showCard() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else if (!this.selectedCard.getOwner().equals(this.player)) {\r\n            if (this.selectedCard.getBoardZone().equals(BoardZone.HAND))\r\n                throw new InvisibleCard();\r\n            if (this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) && this.rival.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\"))\r\n                throw new InvisibleCard();\r\n            if (this.selectedCard.getBoardZone().equals(BoardZone.SPELLANDTRAPZONE) && this.rival.getBoard().getSpellAndTrapConditionByNumber(this.selectedCard.getNumber()).equals(\"H\"))\r\n                throw new InvisibleCard();\r\n        }\r\n        DuelView.printText(this.selectedCard.getCard().toString());\r\n    }\r\n\r\n    public void showGraveyard() throws Exception {\r\n        List<Card> graveyard = this.player.getBoard().getCardsInGraveyard();\r\n        StringBuilder toPrint = new StringBuilder();\r\n        if (graveyard.isEmpty())\r\n            throw new GraveYardEmpty();\r\n        else {\r\n            for (Card cardInGraveyard : graveyard) {\r\n                if (graveyard.indexOf(cardInGraveyard) == graveyard.size() - 1) {\r\n                    toPrint.append(cardInGraveyard.getNamePascalCase()).append(\":\").append(cardInGraveyard.getDescription());\r\n                } else {\r\n                    toPrint.append(cardInGraveyard.getNamePascalCase()).append(\":\").append(cardInGraveyard.getDescription()).append(\"\\n\");\r\n                }\r\n            }\r\n        }\r\n        DuelView.printText(toPrint.toString());\r\n        String input = DuelView.scan();\r\n        while (!input.equals(\"back\")) {\r\n            DuelView.printText(\"invalid command\");\r\n            input = DuelView.scan();\r\n        }\r\n    }\r\n\r\n    public void removeMonsterPlayer(int address) {\r\n        actionsOnThisCardPlayer.get(address).clear();\r\n        setMonsterAttackPlayer(address, null);\r\n        player.getBoard().removeMonster(address, this, player);\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.REMOVE_FROM_MONSTERZONE, this.player, this.selectedCard.getNumber());\r\n    }\r\n\r\n    public void handleAITurn() {\r\n        goNextPhase();\r\n        setMonsterCardInAI();\r\n        setSpellOrTrapInAI();\r\n        goNextPhase();\r\n        attackInAI();\r\n        goNextPhase();\r\n        goNextPhase();\r\n        goNextPhase();\r\n    }\r\n\r\n    private void setMonsterCardInAI() {\r\n        int numberOfMonstersOnPlayerBoard = numberOfMonstersOnPlayerBoard();\r\n        if (numberOfMonstersOnPlayerBoard > 1 && monsterCardWithTwoTributesWithMaxAttackPointInHand() != null)\r\n            setATwoTributeMonster();\r\n        else if (numberOfMonstersOnPlayerBoard > 0 && monsterCardWithOneTributeWithMaxAttackPointInHand() != null)\r\n            setAOneTributeMonster();\r\n        else if (numberOfMonstersOnPlayerBoard != 5)\r\n            setANoTributeMonster();\r\n        getBoard();\r\n\r\n    }\r\n\r\n    private void setATwoTributeMonster() {\r\n        if (numberOfLevelSevenEightMonstersInHand() > 0) {\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard(), this, player);\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard(), this, player);\r\n            int place = this.player.getBoard().putMonster(monsterCardWithTwoTributesWithMaxAttackPointInHand(), \"OO\");\r\n            setMonsterAttackPlayer(place, (Objects.requireNonNull(monsterCardWithTwoTributesWithMaxAttackPointInHand()).getAttack()));\r\n            this.playerDefencePoints[place] = (Objects.requireNonNull(monsterCardWithTwoTributesWithMaxAttackPointInHand()).getAttack());\r\n            addToAttackDefenceOfPutCard(place, this.player);\r\n            this.player.getBoard().removeCardFromHand(monsterCardWithTwoTributesWithMaxAttackPointInHand());\r\n        }\r\n    }\r\n\r\n    private void setAOneTributeMonster() {\r\n        if (numberOfLevelFiveSixMonstersInPlayerHand() > 0) {\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard(), this, player);\r\n            int place = this.player.getBoard().putMonster(monsterCardWithOneTributeWithMaxAttackPointInHand(), \"OO\");\r\n            setMonsterAttackPlayer(place, (Objects.requireNonNull(monsterCardWithOneTributeWithMaxAttackPointInHand()).getAttack()));\r\n            this.playerDefencePoints[place] = (Objects.requireNonNull(monsterCardWithOneTributeWithMaxAttackPointInHand()).getAttack());\r\n            addToAttackDefenceOfPutCard(place, this.player);\r\n            this.player.getBoard().removeCardFromHand(monsterCardWithOneTributeWithMaxAttackPointInHand());\r\n        }\r\n    }\r\n\r\n    private void setANoTributeMonster() {\r\n        if (numberOfLevelOneTwoFourMonstersInPlayerHand() > 0) {\r\n            if (monsterCardWithLeastDefencePointOnRivalBoard() != 10) {\r\n                if (numberOfMonstersOnPlayerBoard() == 0 && Objects.requireNonNull(monsterCardWithoutTributeWithMaxAttackPointInHand()).getAttack() < monsterCardWithLeaseAttackPointOnPlayerBoard()) {\r\n                    int place = this.player.getBoard().putMonster(monsterCardWithMaxDefenseInHand(), \"DH\");\r\n                    setMonsterAttackPlayer(place, (Objects.requireNonNull(monsterCardWithMaxDefenseInHand()).getAttack()));\r\n                    this.playerDefencePoints[place] = (Objects.requireNonNull(monsterCardWithMaxDefenseInHand()).getAttack());\r\n                    addToAttackDefenceOfPutCard(place, this.player);\r\n                    this.player.getBoard().removeCardFromHand(monsterCardWithMaxDefenseInHand());\r\n                }\r\n            } else if (numberOfMonstersOnPlayerBoard() < 5) {\r\n                MonsterCard wantedMonster = monsterCardWithoutTributeWithMaxAttackPointInHand();\r\n                int place = this.player.getBoard().putMonster(wantedMonster, \"OO\");\r\n                setMonsterAttackPlayer(place, (Objects.requireNonNull(wantedMonster).getAttack()));\r\n                this.playerDefencePoints[place] = (wantedMonster.getAttack());\r\n                addToAttackDefenceOfPutCard(place, this.player);\r\n                this.player.getBoard().removeCardFromHand(wantedMonster);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setSpellOrTrapInAI() {\r\n        ArrayList<Integer> toBeRemoved = new ArrayList<>();\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if ((card instanceof SpellCard || card instanceof TrapCard) && (numberOfSpellsAndTrapsOnPlayerBoard() < 5)) {\r\n                this.player.getBoard().putSpellOrTrap(card, \"H\");\r\n                toBeRemoved.add(i);\r\n            }\r\n        }\r\n        if (toBeRemoved.size() > 0) {\r\n            for (int i = toBeRemoved.size() - 1; i >= 0; i--) {\r\n                this.player.getBoard().removeCardFromHand(this.player.getBoard().getCardInHandByNumber(toBeRemoved.get(i)));\r\n            }\r\n        }\r\n    }\r\n\r\n    private void attackInAI() {\r\n        if (numberOfMonstersOnPlayerBoard() > 0) {\r\n            if (numberOfMonstersOnRivalBoard() == 0)\r\n                directAttackInAI();\r\n            else if (allCardsOnRivalAreDH())\r\n                attackAllDHInAI(numberOfMonstersOnRivalBoard(), numberOfMonstersOnPlayerBoard());\r\n            else if (monsterCardWithMostAttackPointOnPlayerBoard() != 10 && monsterCardWithMostAttackPointOnRivalBoard() != 10) {\r\n                attackOOInAI();\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean allCardsOnRivalAreDH() {\r\n        int counterOfDH = 0;\r\n        int counterOfCards = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.rival.getBoard().getMonsterByNumber(i) != null) {\r\n                counterOfCards++;\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DH\"))\r\n                    counterOfDH++;\r\n            }\r\n        }\r\n        return counterOfDH == counterOfCards;\r\n    }\r\n\r\n    private void directAttackInAI() {\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null) {\r\n                try {\r\n                    this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(i), BoardZone.MONSTERZONE, i, this.player);\r\n                    directAttack();\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void attackAllDHInAI(int numberOfMonstersOnRivalBoard, int numberOfMonstersOnPlayerBoard) {\r\n        int indexOfAttacker = 10;\r\n        ArrayList<Integer> monstersOnBoardIndex = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.rival.getBoard().getMonsterByNumber(i) != null) {\r\n                monstersOnBoardIndex.add(i);\r\n            }\r\n        }\r\n        if (numberOfMonstersOnPlayerBoard > numberOfMonstersOnRivalBoard) {\r\n            for (int i = 0; i < numberOfMonstersOnRivalBoard; i++) {\r\n                if (i == 0)\r\n                    indexOfAttacker = monsterCardWithMostAttackPointOnPlayerBoard();\r\n                else if (i == 1)\r\n                    indexOfAttacker = monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard());\r\n                try {\r\n                    this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(indexOfAttacker), BoardZone.MONSTERZONE, indexOfAttacker, this.player);\r\n                    findWayAttack(monstersOnBoardIndex.get(i));\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        } else {\r\n            for (int i = 0; i < numberOfMonstersOnPlayerBoard; i++) {\r\n                if (i == 0)\r\n                    indexOfAttacker = monsterCardWithMostAttackPointOnPlayerBoard();\r\n                if (i == 1)\r\n                    indexOfAttacker = monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard());\r\n                try {\r\n                    this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(indexOfAttacker), BoardZone.MONSTERZONE, indexOfAttacker, this.player);\r\n                    findWayAttack(monstersOnBoardIndex.get(i));\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void attackOOInAI() {\r\n        if (monsterCardWithMostAttackPointOnPlayerBoard() != 10 && this.rival.getBoard().getMonsterConditionByNumber(monsterCardWithMostAttackPointOnRivalBoard()).equals(\"OO\")) {\r\n            MonsterCard strongestRivalAttacker = this.rival.getBoard().getMonsterByNumber(monsterCardWithLeaseAttackPointOnRivalBoard());\r\n            MonsterCard strongestPlayerAttacker = this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard());\r\n            if (strongestRivalAttacker != null && strongestPlayerAttacker != null) {\r\n                if (strongestPlayerAttacker.getAttack() > strongestRivalAttacker.getAttack()) {\r\n                    try {\r\n                        this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard()), BoardZone.MONSTERZONE, monsterCardWithMostAttackPointOnPlayerBoard(), this.player);\r\n                        findWayAttack(monsterCardWithMostAttackPointOnRivalBoard());\r\n                    } catch (Exception exception) {\r\n                        exception.printStackTrace();\r\n                    }\r\n                }\r\n            } else if (monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard()) != 10) {\r\n                MonsterCard secondStrongestRivalAttacker = this.rival.getBoard().getMonsterByNumber(monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard()));\r\n                assert strongestPlayerAttacker != null;\r\n                if (strongestPlayerAttacker.getAttack() > secondStrongestRivalAttacker.getAttack()) {\r\n                    try {\r\n                        this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard()), BoardZone.MONSTERZONE, monsterCardWithMostAttackPointOnPlayerBoard(), this.player);\r\n                        findWayAttack(monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithLeaseAttackPointOnRivalBoard()));\r\n                    } catch (Exception exception) {\r\n                        exception.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private MonsterCard monsterCardWithoutTributeWithMaxAttackPointInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() < 5 && ((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                    maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                    indexOfMaxAttacker = i;\r\n                }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithOneTributeWithMaxAttackPointInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getLevel() == 5 || ((MonsterCard) card).getLevel() == 6)\r\n                        if (((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                            maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                            indexOfMaxAttacker = i;\r\n                        }\r\n            }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithTwoTributesWithMaxAttackPointInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getLevel() > 6)\r\n                        if (((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                            maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                            indexOfMaxAttacker = i;\r\n                        }\r\n            }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithMaxDefenseInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxDefencePoint = 0;\r\n        int indexOfMaxDefender = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getDefence() > maxDefencePoint) {\r\n                        maxDefencePoint = ((MonsterCard) card).getDefence();\r\n                        indexOfMaxDefender = i;\r\n                    }\r\n            }\r\n        }\r\n        if (indexOfMaxDefender != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxDefender);\r\n        else return null;\r\n    }\r\n\r\n    private int monsterCardWithLeaseAttackPointOnRivalBoard() {\r\n        int leastAttackPoint = 100000;\r\n        int indexOfMinAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"))\r\n                    if (leastAttackPoint > card.getAttack()) {\r\n                        indexOfMinAttacker = i;\r\n                        leastAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMinAttacker;\r\n    }\r\n\r\n    private int monsterCardWithLeaseAttackPointOnPlayerBoard() {\r\n        int leastAttackPoint = 100000;\r\n        int indexOfMinAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.player.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.player.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"))\r\n                    if (leastAttackPoint > card.getAttack()) {\r\n                        indexOfMinAttacker = i;\r\n                        leastAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMinAttacker;\r\n    }\r\n\r\n    private int monsterCardWithSecondMostAttackPointOnRivalBoard(int indexOfStrongestAttacker) {\r\n        int indexOfSecondStrongestAttacker = 10;\r\n        int secondMostAttackPoint = 0;\r\n        if (numberOfMonstersOnPlayerBoard() > 1) {\r\n            for (int i = 0; i < 5; i++) {\r\n                MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n                if (card != null)\r\n                    if (i != indexOfStrongestAttacker && this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"OO\")) {\r\n                        if (secondMostAttackPoint < card.getAttack()) {\r\n                            indexOfSecondStrongestAttacker = i;\r\n                            secondMostAttackPoint = card.getAttack();\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n        return indexOfSecondStrongestAttacker;\r\n    }\r\n\r\n    private int monsterCardWithMostAttackPointOnPlayerBoard() {\r\n        int mostAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.player.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.player.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"))\r\n                    if (mostAttackPoint < card.getAttack()) {\r\n                        indexOfMaxAttacker = i;\r\n                        mostAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMaxAttacker;\r\n    }\r\n\r\n    private int monsterCardWithLeastDefencePointOnRivalBoard() {\r\n        int leastDefencePoint = 100000;\r\n        int indexOfMinDefender = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DO\"))\r\n                    if (leastDefencePoint > card.getDefence()) {\r\n                        leastDefencePoint = card.getDefence();\r\n                        indexOfMinDefender = i;\r\n                    }\r\n        }\r\n        return indexOfMinDefender;\r\n    }\r\n\r\n    private int monsterCardWithMostAttackPointOnRivalBoard() {\r\n        int mostAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"))\r\n                    if (mostAttackPoint < card.getAttack()) {\r\n                        mostAttackPoint = card.getAttack();\r\n                        indexOfMaxAttacker = i;\r\n                    }\r\n        }\r\n        return indexOfMaxAttacker;\r\n    }\r\n\r\n    private int numberOfMonstersOnPlayerBoard() {\r\n        int numberOfMonsters = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null)\r\n                numberOfMonsters++;\r\n        }\r\n        return numberOfMonsters;\r\n    }\r\n\r\n    private int numberOfMonstersOnRivalBoard() {\r\n        int numberOfMonsters = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard monsterCard = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null)\r\n                numberOfMonsters++;\r\n        }\r\n        return numberOfMonsters;\r\n    }\r\n\r\n    private int numberOfSpellsAndTrapsOnPlayerBoard() {\r\n        int numberOfSpellsAndTraps = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            Card card = this.player.getBoard().getSpellAndTrapByNumber(i);\r\n            if (card != null)\r\n                numberOfSpellsAndTraps++;\r\n        }\r\n        return numberOfSpellsAndTraps;\r\n    }\r\n\r\n    private int numberOfLevelOneTwoFourMonstersInPlayerHand() {\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() < 5)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n\r\n    private int numberOfLevelFiveSixMonstersInPlayerHand() {\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() == 5 || ((MonsterCard) card).getLevel() == 6)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n\r\n    private int numberOfLevelSevenEightMonstersInHand() {\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() > 6)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n\r\n    public int minFinder(int firstNumber, int secondNumber) {\r\n        return Math.min(firstNumber, secondNumber);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/DuelController.java b/src/main/java/controller/DuelController.java
--- a/src/main/java/controller/DuelController.java	(revision d916541f9801a022d9eccdbc7473b3a530dc6ce9)
+++ b/src/main/java/controller/DuelController.java	(date 1625651772000)
@@ -589,13 +589,13 @@
         getBoard();
     }
 
-    public void changePosition(String targetPosition) throws Exception {
+    public void changePosition() throws Exception {
         String targetPositionInShort = "";
-        switch (targetPosition) {
-            case "attack":
+        switch (this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber())) {
+            case "DO":
                 targetPositionInShort = "OO";
                 break;
-            case "defence":
+            case "OO":
                 targetPositionInShort = "DO";
                 break;
         }
@@ -1023,7 +1023,10 @@
         ArrayList<Image> images = new ArrayList<>();
         for (int i = 0; i < 5; i++) {
             if (this.player.getBoard().getMonsterConditionByNumber(i) == null) images.add(null);
-            else images.add(this.player.getBoard().getMonsterByNumber(i).getImage());
+            else if (!this.player.getBoard().getMonsterConditionByNumber(i).equals("DH"))
+                images.add(this.player.getBoard().getMonsterByNumber(i).getImage());
+            else
+                images.add(unknown);
         }
         for (int i = 4; i >= 0; i--) {
             if (this.rival.getBoard().getMonsterConditionByNumber(i) == null) images.add(null);
@@ -1034,7 +1037,10 @@
         }
         for (int i = 0; i < 5; i++) {
             if (this.player.getBoard().getSpellAndTrapByNumber(i) == null) images.add(null);
-            else images.add(this.player.getBoard().getSpellAndTrapByNumber(i).getImage());
+            else if (this.player.getBoard().getSpellAndTrapConditionByNumber(i).equals("O"))
+                images.add(this.player.getBoard().getSpellAndTrapByNumber(i).getImage());
+            else
+                images.add(unknown);
         }
         for (int i = 4; i >= 0; i--) {
             if (this.rival.getBoard().getSpellAndTrapByNumber(i) == null) images.add(null);
@@ -1113,6 +1119,70 @@
         DuelView.printText(toPrint.toString());*/
     }
 
+    public ArrayList<Card> getCards(){
+        ArrayList<Card> cards = new ArrayList<>();
+        for (int i = 0; i < 5; i++) {
+            cards.add(player.getBoard().getMonsterByNumber(i));
+        }
+        for (int i = 4; i >= 0; i--) {
+            cards.add(rival.getBoard().getMonsterByNumber(i));
+        }
+        for (int i = 0; i < 5; i++) {
+            cards.add(player.getBoard().getSpellAndTrapByNumber(i));
+        }
+        for (int i = 4; i >= 0; i--) {
+            cards.add(rival.getBoard().getSpellAndTrapByNumber(i));
+        }
+        for (int i = 0; i < 6; i++) {
+            if (this.player.getBoard().getCardsInHand().size()<=i) cards.add(null);
+            else cards.add(this.player.getBoard().getCardInHandByNumber(i));
+        }
+        for (int i = 5; i >= 0; i--) {
+            if (this.rival.getBoard().getCardsInHand().size()<=i) cards.add(null);
+            else cards.add(this.rival.getBoard().getCardInHandByNumber(i));
+        }
+        cards.add(this.player.getBoard().getFieldZone());
+        cards.add(this.rival.getBoard().getFieldZone());
+        if(this.player.getBoard().getCardsInGraveyard().isEmpty())
+            cards.add(null);
+        else
+            cards.add(this.player.getBoard().getCardsInGraveyard().get(this.player.getBoard().getCardsInGraveyard().size()-1));
+        if(this.rival.getBoard().getCardsInGraveyard().isEmpty())
+            cards.add(null);
+        else
+            cards.add(this.rival.getBoard().getCardsInGraveyard().get(this.rival.getBoard().getCardsInGraveyard().size()-1));
+        return cards;
+    }
+
+    public ArrayList<Boolean> getConditions(){
+        ArrayList<Boolean> conditions = new ArrayList<>();
+        for (int i = 0; i < 5; i++) {
+            if(player.getBoard().getMonsterConditionByNumber(i)==null) conditions.add(null);
+            else conditions.add(!player.getBoard().getMonsterConditionByNumber(i).equals("OO"));
+        }
+        for (int i = 4; i >= 0; i--) {
+            if(rival.getBoard().getMonsterConditionByNumber(i)==null) conditions.add(null);
+            else conditions.add(!rival.getBoard().getMonsterConditionByNumber(i).equals("OO"));
+        }
+        for (int i = 0; i < 5; i++) {
+            conditions.add(false);
+        }
+        for (int i = 4; i >= 0; i--) {
+            conditions.add(false);
+        }
+        for (int i = 0; i < 6; i++) {
+            conditions.add(false);
+        }
+        for (int i = 5; i >= 0; i--) {
+            conditions.add(false);
+        }
+        conditions.add(false);
+        conditions.add(false);
+        conditions.add(false);
+        conditions.add(false);
+        return conditions;
+    }
+
     public void showCard() throws Exception {
         if (this.selectedCard == null) {
             throw new NoCardSelected();
@@ -1582,5 +1652,9 @@
     public int minFinder(int firstNumber, int secondNumber) {
         return Math.min(firstNumber, secondNumber);
     }
+
+    public void doNothing(){
+
+    }
 }
 
Index: Cards/parmida.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Monster Reborn\r\nSpell Absorption\r\nCommand Knight\r\nCurtain Of Dark Ones\r\nSilver Fang\r\nHaniwa\r\nGate Guardian\r\nMagic Cylinder\r\nMind Crush\r\nSuijin\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nLeotron\r\nMystical Space Typhoon\r\nMystical Space Typhoon\r\nMystical Space Typhoon\r\nYomi Ship\r\nYomi Ship\r\nYomi Ship\r\nMonster Reborn\r\nMonster Reborn\r\nMonster Reborn\r\nMonster Reborn\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nDark Hole\r\nDark Hole\r\nDark Hole\r\nExploder Dragon\r\nExploder Dragon\r\nExploder Dragon\r\nCommand Knight\r\nCommand Knight\r\nCommand Knight\r\nCommand Knight\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nHaniwa\r\nHaniwa\r\nHaniwa\r\nHaniwa\r\nGate Guardian\r\nGate Guardian\r\nGate Guardian\r\nGate Guardian\r\nMagic Cylinder\r\nMagic Cylinder\r\nMagic Cylinder\r\nMagic Cylinder\r\nMind Crush\r\nMind Crush\r\nMind Crush\r\nMind Crush\r\nSuijin\r\nSuijin\r\nSuijin\r\nSuijin\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSword Of Revealing Light\r\nSword Of Revealing Light\r\nSword Of Revealing Light\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nTrap Hole\r\nTrap Hole\r\nTrap Hole\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nLeotron\r\nLeotron\r\nLeotron\r\nLeotron\r\nUnited We Stand\r\nUnited We Stand\r\nUnited We Stand\r\nYami\r\nYami\r\nMystical Space Typhoon\r\nMystical Space Typhoon\r\nMystical Space Typhoon\r\nYomi Ship\r\nYomi Ship\r\nYomi Ship\r\nMonster Reborn\r\nMonster Reborn\r\nMonster Reborn\r\nMonster Reborn\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nDark Hole\r\nDark Hole\r\nDark Hole\r\nExploder Dragon\r\nExploder Dragon\r\nExploder Dragon\r\nCommand Knight\r\nCommand Knight\r\nCommand Knight\r\nCommand Knight\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nHaniwa\r\nHaniwa\r\nHaniwa\r\nHaniwa\r\nGate Guardian\r\nGate Guardian\r\nGate Guardian\r\nGate Guardian\r\nMagic Cylinder\r\nMagic Cylinder\r\nMagic Cylinder\r\nMagic Cylinder\r\nMind Crush\r\nMind Crush\r\nMind Crush\r\nMind Crush\r\nSuijin\r\nSuijin\r\nSuijin\r\nSuijin\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSword Of Revealing Light\r\nSword Of Revealing Light\r\nSword Of Revealing Light\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nTrap Hole\r\nTrap Hole\r\nTrap Hole\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nLeotron\r\nLeotron\r\nLeotron\r\nLeotron\r\nUnited We Stand\r\nUnited We Stand\r\nUnited We Stand\r\nYami\r\nYami\r\nMystical Space Typhoon\r\nMystical Space Typhoon\r\nMystical Space Typhoon\r\nYomi Ship\r\nYomi Ship\r\nYomi Ship\r\nMonster Reborn\r\nMonster Reborn\r\nMonster Reborn\r\nMonster Reborn\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nDark Hole\r\nDark Hole\r\nDark Hole\r\nExploder Dragon\r\nExploder Dragon\r\nExploder Dragon\r\nCommand Knight\r\nCommand Knight\r\nCommand Knight\r\nCommand Knight\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nHaniwa\r\nHaniwa\r\nHaniwa\r\nHaniwa\r\nGate Guardian\r\nGate Guardian\r\nGate Guardian\r\nGate Guardian\r\nMagic Cylinder\r\nMagic Cylinder\r\nMagic Cylinder\r\nMagic Cylinder\r\nMind Crush\r\nMind Crush\r\nMind Crush\r\nMind Crush\r\nSuijin\r\nSuijin\r\nSuijin\r\nSuijin\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSword Of Revealing Light\r\nSword Of Revealing Light\r\nSword Of Revealing Light\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nTrap Hole\r\nTrap Hole\r\nTrap Hole\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nLeotron\r\nLeotron\r\nLeotron\r\nLeotron\r\nUnited We Stand\r\nUnited We Stand\r\nUnited We Stand\r\nYami\r\nYami\r\nMystical Space Typhoon\r\nMystical Space Typhoon\r\nMystical Space Typhoon\r\nYomi Ship\r\nYomi Ship\r\nYomi Ship\r\nMonster Reborn\r\nMonster Reborn\r\nMonster Reborn\r\nMonster Reborn\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nDark Hole\r\nDark Hole\r\nDark Hole\r\nExploder Dragon\r\nExploder Dragon\r\nExploder Dragon\r\nCommand Knight\r\nCommand Knight\r\nCommand Knight\r\nCommand Knight\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nHaniwa\r\nHaniwa\r\nHaniwa\r\nHaniwa\r\nGate Guardian\r\nGate Guardian\r\nGate Guardian\r\nGate Guardian\r\nMagic Cylinder\r\nMagic Cylinder\r\nMagic Cylinder\r\nMagic Cylinder\r\nMind Crush\r\nMind Crush\r\nMind Crush\r\nMind Crush\r\nSuijin\r\nSuijin\r\nSuijin\r\nSuijin\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSword Of Revealing Light\r\nSword Of Revealing Light\r\nSword Of Revealing Light\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nTrap Hole\r\nTrap Hole\r\nTrap Hole\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nLeotron\r\nLeotron\r\nLeotron\r\nLeotron\r\nUnited We Stand\r\nUnited We Stand\r\nUnited We Stand\r\nYami\r\nYami\r\nMystical Space Typhoon\r\nMystical Space Typhoon\r\nMystical Space Typhoon\r\nYomi Ship\r\nYomi Ship\r\nYomi Ship\r\nMonster Reborn\r\nMonster Reborn\r\nMonster Reborn\r\nMonster Reborn\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nDark Hole\r\nDark Hole\r\nDark Hole\r\nExploder Dragon\r\nExploder Dragon\r\nExploder Dragon\r\nCommand Knight\r\nCommand Knight\r\nCommand Knight\r\nCommand Knight\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nCurtain Of Dark Ones\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nHaniwa\r\nHaniwa\r\nHaniwa\r\nHaniwa\r\nGate Guardian\r\nGate Guardian\r\nGate Guardian\r\nGate Guardian\r\nMagic Cylinder\r\nMagic Cylinder\r\nMagic Cylinder\r\nMagic Cylinder\r\nMind Crush\r\nMind Crush\r\nMind Crush\r\nMind Crush\r\nSuijin\r\nSuijin\r\nSuijin\r\nSuijin\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nSword Of Revealing Light\r\nSword Of Revealing Light\r\nSword Of Revealing Light\r\nSupply Squad\r\nSupply Squad\r\nSupply Squad\r\nTrap Hole\r\nTrap Hole\r\nTrap Hole\r\nSpell Absorption\r\nSpell Absorption\r\nSpell Absorption\r\nLeotron\r\nLeotron\r\nLeotron\r\nLeotron\r\nUnited We Stand\r\nUnited We Stand\r\nUnited We Stand\r\nYami\r\nYami\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cards/parmida.txt b/Cards/parmida.txt
--- a/Cards/parmida.txt	(revision d916541f9801a022d9eccdbc7473b3a530dc6ce9)
+++ b/Cards/parmida.txt	(date 1625561290000)
@@ -1,427 +1,1 @@
-Monster Reborn
-Spell Absorption
-Command Knight
-Curtain Of Dark Ones
-Silver Fang
-Haniwa
-Gate Guardian
-Magic Cylinder
-Mind Crush
-Suijin
-Silver Fang
-Silver Fang
-Silver Fang
-Silver Fang
-Supply Squad
-Supply Squad
-Supply Squad
-Supply Squad
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Leotron
-Mystical Space Typhoon
-Mystical Space Typhoon
-Mystical Space Typhoon
-Yomi Ship
-Yomi Ship
-Yomi Ship
-Monster Reborn
-Monster Reborn
-Monster Reborn
-Monster Reborn
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Dark Hole
-Dark Hole
-Dark Hole
-Exploder Dragon
-Exploder Dragon
-Exploder Dragon
-Command Knight
-Command Knight
-Command Knight
-Command Knight
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Silver Fang
-Silver Fang
-Silver Fang
-Silver Fang
-Haniwa
-Haniwa
-Haniwa
-Haniwa
-Gate Guardian
-Gate Guardian
-Gate Guardian
-Gate Guardian
-Magic Cylinder
-Magic Cylinder
-Magic Cylinder
-Magic Cylinder
-Mind Crush
-Mind Crush
-Mind Crush
-Mind Crush
-Suijin
-Suijin
-Suijin
-Suijin
-Silver Fang
-Silver Fang
-Silver Fang
-Silver Fang
-Supply Squad
-Supply Squad
-Supply Squad
-Supply Squad
-Sword Of Revealing Light
-Sword Of Revealing Light
-Sword Of Revealing Light
-Supply Squad
-Supply Squad
-Supply Squad
-Trap Hole
-Trap Hole
-Trap Hole
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Leotron
-Leotron
-Leotron
-Leotron
-United We Stand
-United We Stand
-United We Stand
-Yami
-Yami
-Mystical Space Typhoon
-Mystical Space Typhoon
-Mystical Space Typhoon
-Yomi Ship
-Yomi Ship
-Yomi Ship
-Monster Reborn
-Monster Reborn
-Monster Reborn
-Monster Reborn
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Dark Hole
-Dark Hole
-Dark Hole
-Exploder Dragon
-Exploder Dragon
-Exploder Dragon
-Command Knight
-Command Knight
-Command Knight
-Command Knight
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Silver Fang
-Silver Fang
-Silver Fang
-Silver Fang
-Haniwa
-Haniwa
-Haniwa
-Haniwa
-Gate Guardian
-Gate Guardian
-Gate Guardian
-Gate Guardian
-Magic Cylinder
-Magic Cylinder
-Magic Cylinder
-Magic Cylinder
-Mind Crush
-Mind Crush
-Mind Crush
-Mind Crush
-Suijin
-Suijin
-Suijin
-Suijin
-Silver Fang
-Silver Fang
-Silver Fang
-Silver Fang
-Supply Squad
-Supply Squad
-Supply Squad
-Supply Squad
-Sword Of Revealing Light
-Sword Of Revealing Light
-Sword Of Revealing Light
-Supply Squad
-Supply Squad
-Supply Squad
-Trap Hole
-Trap Hole
-Trap Hole
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Leotron
-Leotron
-Leotron
-Leotron
-United We Stand
-United We Stand
-United We Stand
-Yami
-Yami
-Mystical Space Typhoon
-Mystical Space Typhoon
-Mystical Space Typhoon
-Yomi Ship
-Yomi Ship
-Yomi Ship
-Monster Reborn
-Monster Reborn
-Monster Reborn
-Monster Reborn
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Dark Hole
-Dark Hole
-Dark Hole
-Exploder Dragon
-Exploder Dragon
-Exploder Dragon
-Command Knight
-Command Knight
-Command Knight
-Command Knight
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Silver Fang
-Silver Fang
-Silver Fang
-Silver Fang
-Haniwa
-Haniwa
-Haniwa
-Haniwa
-Gate Guardian
-Gate Guardian
-Gate Guardian
-Gate Guardian
-Magic Cylinder
-Magic Cylinder
-Magic Cylinder
-Magic Cylinder
-Mind Crush
-Mind Crush
-Mind Crush
-Mind Crush
-Suijin
-Suijin
-Suijin
-Suijin
-Silver Fang
-Silver Fang
-Silver Fang
-Silver Fang
-Supply Squad
-Supply Squad
-Supply Squad
-Supply Squad
-Sword Of Revealing Light
-Sword Of Revealing Light
-Sword Of Revealing Light
-Supply Squad
-Supply Squad
-Supply Squad
-Trap Hole
-Trap Hole
-Trap Hole
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Leotron
-Leotron
-Leotron
-Leotron
-United We Stand
-United We Stand
-United We Stand
-Yami
-Yami
-Mystical Space Typhoon
-Mystical Space Typhoon
-Mystical Space Typhoon
-Yomi Ship
 Yomi Ship
-Yomi Ship
-Monster Reborn
-Monster Reborn
-Monster Reborn
-Monster Reborn
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Dark Hole
-Dark Hole
-Dark Hole
-Exploder Dragon
-Exploder Dragon
-Exploder Dragon
-Command Knight
-Command Knight
-Command Knight
-Command Knight
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Silver Fang
-Silver Fang
-Silver Fang
-Silver Fang
-Haniwa
-Haniwa
-Haniwa
-Haniwa
-Gate Guardian
-Gate Guardian
-Gate Guardian
-Gate Guardian
-Magic Cylinder
-Magic Cylinder
-Magic Cylinder
-Magic Cylinder
-Mind Crush
-Mind Crush
-Mind Crush
-Mind Crush
-Suijin
-Suijin
-Suijin
-Suijin
-Silver Fang
-Silver Fang
-Silver Fang
-Silver Fang
-Supply Squad
-Supply Squad
-Supply Squad
-Supply Squad
-Sword Of Revealing Light
-Sword Of Revealing Light
-Sword Of Revealing Light
-Supply Squad
-Supply Squad
-Supply Squad
-Trap Hole
-Trap Hole
-Trap Hole
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Leotron
-Leotron
-Leotron
-Leotron
-United We Stand
-United We Stand
-United We Stand
-Yami
-Yami
-Mystical Space Typhoon
-Mystical Space Typhoon
-Mystical Space Typhoon
-Yomi Ship
-Yomi Ship
-Yomi Ship
-Monster Reborn
-Monster Reborn
-Monster Reborn
-Monster Reborn
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Dark Hole
-Dark Hole
-Dark Hole
-Exploder Dragon
-Exploder Dragon
-Exploder Dragon
-Command Knight
-Command Knight
-Command Knight
-Command Knight
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Curtain Of Dark Ones
-Silver Fang
-Silver Fang
-Silver Fang
-Silver Fang
-Haniwa
-Haniwa
-Haniwa
-Haniwa
-Gate Guardian
-Gate Guardian
-Gate Guardian
-Gate Guardian
-Magic Cylinder
-Magic Cylinder
-Magic Cylinder
-Magic Cylinder
-Mind Crush
-Mind Crush
-Mind Crush
-Mind Crush
-Suijin
-Suijin
-Suijin
-Suijin
-Silver Fang
-Silver Fang
-Silver Fang
-Silver Fang
-Supply Squad
-Supply Squad
-Supply Squad
-Supply Squad
-Sword Of Revealing Light
-Sword Of Revealing Light
-Sword Of Revealing Light
-Supply Squad
-Supply Squad
-Supply Squad
-Trap Hole
-Trap Hole
-Trap Hole
-Spell Absorption
-Spell Absorption
-Spell Absorption
-Leotron
-Leotron
-Leotron
-Leotron
-United We Stand
-United We Stand
-United We Stand
-Yami
-Yami
Index: src/main/java/view/GameViewGraphic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.DuelController;\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.ProgressBar;\r\nimport javafx.scene.effect.DropShadow;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseButton;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Stage;\r\nimport model.Card;\r\nimport model.MonsterCard;\r\nimport model.User;\r\n\r\nimport java.lang.reflect.Method;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class GameViewGraphic extends Application implements Initializable {\r\n    private static DuelController duelController;\r\n    private static Stage stage;\r\n    public static User player = User.getUserByUsername(\"parmida\");\r\n    public static User rival = User.getUserByUsername(\"hamraz\");\r\n    private static GameViewGraphic instance = null;\r\n    public Label chatBox;\r\n    public int numberOfRounds;\r\n    private static ArrayList<Image> images = new ArrayList<>();\r\n    private static AnchorPane root;\r\n    public static ImageView imageView1Monster1, imageView1Monster2, imageView1Monster3, imageView1Monster4, imageView1Monster5;\r\n    public static ImageView imageView2Monster1, imageView2Monster2, imageView2Monster3, imageView2Monster4, imageView2Monster5;\r\n    public static ImageView imageView1SpellAndTrap1, imageView1SpellAndTrap2, imageView1SpellAndTrap3, imageView1SpellAndTrap4, imageView1SpellAndTrap5;\r\n    public static ImageView imageView2SpellAndTrap1, imageView2SpellAndTrap2, imageView2SpellAndTrap3, imageView2SpellAndTrap4, imageView2SpellAndTrap5;\r\n    public static ImageView imageView1hand1, imageView1hand2, imageView1hand3, imageView1hand4, imageView1hand5, imageView1hand6;\r\n    public static ImageView imageView2hand1, imageView2hand2, imageView2hand3, imageView2hand4, imageView2hand5, imageView2hand6;\r\n    public static ImageView imageView1FieldZone, imageView2FieldZone, imageView1Graveyard, imageView2Graveyard;\r\n    public static ImageView rivalProfile = new ImageView();\r\n    public static ImageView playerProfile = new ImageView();\r\n    public ImageView selectedCard;\r\n    @FXML\r\n    public Label playerUsername, playerNickname, playerLifePoint, rivalUsername, rivalNickname, rivalLifePoint;\r\n    @FXML\r\n    private ProgressBar rivalProgressBar, playerProgressBar;\r\n    private static Label description, attack, defence;\r\n    private static ImageView selectedCardImageView;\r\n\r\n    /*public GameViewGraphic(User player,User rival,int numberOfRounds){\r\n        GameViewGraphic.player = player;\r\n        GameViewGraphic.rival = rival;\r\n        this.numberOfRounds = numberOfRounds;\r\n        duelController = new DuelController(player,rival,numberOfRounds);\r\n    }*/\r\n    public void setPlayer(User player) {\r\n        GameViewGraphic.player = player;\r\n    }\r\n\r\n    public void setRival(User rival) {\r\n        GameViewGraphic.rival = rival;\r\n    }\r\n\r\n    public void setNumberOfRounds(int numberOfRounds) {\r\n        this.numberOfRounds = numberOfRounds;\r\n    }\r\n\r\n    public void setDuelController() {\r\n        duelController = new DuelController(player, rival, numberOfRounds);\r\n    }\r\n\r\n    /*public static GameViewGraphic getInstance() {\r\n        if (instance == null) instance = new GameViewGraphic();\r\n        return instance;\r\n    }*/\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        GameViewGraphic.stage = stage;\r\n        URL url = getClass().getResource(\"/GameMenu.fxml\");\r\n        root = FXMLLoader.load(url);\r\n        setImagesAndCards();\r\n        setBar();\r\n        setImageViewForProfile();\r\n        addAllImages();\r\n        Scene scene = new Scene(root);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n//        setSelectedCard();\r\n        duelController.goNextPhase();\r\n        startMainNoCardSelected();\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        setBar();\r\n        setImageViewForProfile();\r\n        if (player != null && rival != null) {\r\n            if (playerLifePoint != null) playerLifePoint.setText(String.valueOf(player.getLifePoint()));\r\n            if (rivalLifePoint != null) rivalLifePoint.setText(String.valueOf(rival.getLifePoint()));\r\n            if (playerNickname != null) playerNickname.setText(player.getNickname());\r\n            if (rivalNickname != null) rivalNickname.setText(rival.getNickname());\r\n            if (playerUsername != null) playerUsername.setText(player.getUsername());\r\n            if (rivalUsername != null) rivalUsername.setText(rival.getUsername());\r\n        }\r\n        if (duelController != null) {\r\n            setImagesAndCards();\r\n            addAllImages();\r\n        }\r\n    }\r\n\r\n    public void setImagesAndCards() {\r\n        images = duelController.getBoard();\r\n        if (images.get(0) != null) imageView1Monster1 = setImageView(images.get(0), 324, 329);\r\n        if (images.get(1) != null) imageView1Monster2 = setImageView(images.get(1), 403, 329);\r\n        if (images.get(2) != null) imageView1Monster3 = setImageView(images.get(2), 486, 329);\r\n        if (images.get(3) != null) imageView1Monster4 = setImageView(images.get(3), 569, 329);\r\n        if (images.get(4) != null) imageView1Monster5 = setImageView(images.get(4), 652, 329);\r\n        if (images.get(5) != null) imageView2Monster1 = setImageView(images.get(5), 324, 206);\r\n        if (images.get(6) != null) imageView2Monster2 = setImageView(images.get(6), 403, 206);\r\n        if (images.get(7) != null) imageView2Monster3 = setImageView(images.get(7), 486, 206);\r\n        if (images.get(8) != null) imageView2Monster4 = setImageView(images.get(8), 569, 206);\r\n        if (images.get(9) != null) imageView2Monster5 = setImageView(images.get(9), 652, 206);\r\n        if (images.get(10) != null) imageView1SpellAndTrap1 = setImageView(images.get(10), 324, 432);\r\n        if (images.get(11) != null) imageView1SpellAndTrap2 = setImageView(images.get(11), 403, 432);\r\n        if (images.get(12) != null) imageView1SpellAndTrap3 = setImageView(images.get(12), 486, 432);\r\n        if (images.get(13) != null) imageView1SpellAndTrap4 = setImageView(images.get(13), 569, 432);\r\n        if (images.get(14) != null) imageView1SpellAndTrap5 = setImageView(images.get(14), 652, 432);\r\n        if (images.get(15) != null) imageView2SpellAndTrap1 = setImageView(images.get(15), 324, 104);\r\n        if (images.get(16) != null) imageView2SpellAndTrap2 = setImageView(images.get(16), 403, 104);\r\n        if (images.get(17) != null) imageView2SpellAndTrap3 = setImageView(images.get(17), 486, 104);\r\n        if (images.get(18) != null) imageView2SpellAndTrap4 = setImageView(images.get(18), 569, 104);\r\n        if (images.get(19) != null) imageView2SpellAndTrap5 = setImageView(images.get(19), 652, 104);\r\n        if (images.get(20) != null) imageView1hand1 = setImageView(images.get(20), 331, 538);\r\n        if (images.get(21) != null) imageView1hand2 = setImageView(images.get(21), 387, 538);\r\n        if (images.get(22) != null) imageView1hand3 = setImageView(images.get(22), 443, 538);\r\n        if (images.get(23) != null) imageView1hand4 = setImageView(images.get(23), 499, 538);\r\n        if (images.get(24) != null) imageView1hand5 = setImageView(images.get(24), 555, 538);\r\n        if (images.get(25) != null) imageView1hand6 = setImageView(images.get(25), 611, 538);\r\n        if (images.get(26) != null) imageView2hand1 = setImageView(images.get(26), 331, -16);\r\n        if (images.get(27) != null) imageView2hand2 = setImageView(images.get(27), 387, -16);\r\n        if (images.get(28) != null) imageView2hand3 = setImageView(images.get(28), 443, -16);\r\n        if (images.get(29) != null) imageView2hand4 = setImageView(images.get(29), 499, -16);\r\n        if (images.get(30) != null) imageView2hand5 = setImageView(images.get(30), 555, -16);\r\n        if (images.get(31) != null) imageView2hand6 = setImageView(images.get(31), 611, -16);\r\n        if (images.get(32) != null) imageView1FieldZone = setImageView(images.get(32), 245, 329);\r\n        if (images.get(33) != null) imageView2FieldZone = setImageView(images.get(33), 750, 213);\r\n        if (images.get(34) != null) imageView1Graveyard = setImageView(images.get(34), 750, 336);\r\n        if (images.get(35) != null) imageView2Graveyard = setImageView(images.get(35), 245, 213);\r\n        setCardDetailsPart();\r\n    }\r\n\r\n    private ImageView setImageView(Image image, int x, int y) {\r\n        ImageView imageView = new ImageView(image);\r\n        imageView.setFitWidth(49);\r\n        imageView.setFitHeight(71);\r\n        imageView.setX(x);\r\n        imageView.setY(y);\r\n        return imageView;\r\n    }\r\n\r\n    private void setImageViewForProfile() {\r\n        URL url = getClass().getResource(\"/images/profiles/profile (\" + player.getProfileNumber() + \").png\");\r\n        Image image = new Image(String.valueOf(url));\r\n        playerProfile = new ImageView(image);\r\n        playerProfile.setFitWidth(50);\r\n        playerProfile.setFitHeight(50);\r\n        playerProfile.setX(228);\r\n        playerProfile.setY(442);\r\n        playerProfile.setImage(image);\r\n        if (root != null && !root.getChildren().contains(playerProfile))\r\n            root.getChildren().add(playerProfile);\r\n        url = getClass().getResource(\"/images/profiles/profile (\" + rival.getProfileNumber() + \").png\");\r\n        image = new Image(String.valueOf(url));\r\n        rivalProfile = new ImageView(image);\r\n        rivalProfile.setFitWidth(50);\r\n        rivalProfile.setFitHeight(50);\r\n        rivalProfile.setX(737);\r\n        rivalProfile.setY(112);\r\n        rivalProfile.setImage(image);\r\n        if (root != null && !root.getChildren().contains(rivalProfile))\r\n            root.getChildren().add(rivalProfile);\r\n    }\r\n\r\n    private void addAllImages() {\r\n        addImagesView(imageView1hand1);\r\n        addImagesView(imageView1hand2);\r\n        addImagesView(imageView1hand3);\r\n        addImagesView(imageView1hand4);\r\n        addImagesView(imageView1hand5);\r\n        addImagesView(imageView1hand6);\r\n        addImagesView(imageView2hand1);\r\n        addImagesView(imageView2hand2);\r\n        addImagesView(imageView2hand3);\r\n        addImagesView(imageView2hand4);\r\n        addImagesView(imageView2hand5);\r\n        addImagesView(imageView2hand6);\r\n        addImagesView(imageView1Monster1);\r\n        addImagesView(imageView1Monster2);\r\n        addImagesView(imageView1Monster3);\r\n        addImagesView(imageView1Monster4);\r\n        addImagesView(imageView1Monster5);\r\n        addImagesView(imageView2Monster1);\r\n        addImagesView(imageView2Monster2);\r\n        addImagesView(imageView2Monster3);\r\n        addImagesView(imageView2Monster4);\r\n        addImagesView(imageView2Monster5);\r\n        addImagesView(imageView1SpellAndTrap1);\r\n        addImagesView(imageView1SpellAndTrap2);\r\n        addImagesView(imageView1SpellAndTrap3);\r\n        addImagesView(imageView1SpellAndTrap4);\r\n        addImagesView(imageView1SpellAndTrap5);\r\n        addImagesView(imageView2SpellAndTrap1);\r\n        addImagesView(imageView2SpellAndTrap2);\r\n        addImagesView(imageView2SpellAndTrap3);\r\n        addImagesView(imageView2SpellAndTrap4);\r\n        addImagesView(imageView2SpellAndTrap5);\r\n        addImagesView(imageView1FieldZone);\r\n        addImagesView(imageView2FieldZone);\r\n        addImagesView(imageView1Graveyard);\r\n        addImagesView(imageView2Graveyard);\r\n        addLabel(description);\r\n        addLabel(attack);\r\n        addLabel(defence);\r\n        addImagesView(selectedCardImageView);\r\n    }\r\n\r\n    private void addImagesView(ImageView imageView) {\r\n        if (root != null) {\r\n            if (imageView != null && !root.getChildren().contains(imageView))\r\n                root.getChildren().add(imageView);\r\n        }\r\n    }\r\n\r\n    private void addLabel(Label label) {\r\n        if (root != null) {\r\n            if (label != null && !root.getChildren().contains(label))\r\n                root.getChildren().add(label);\r\n        }\r\n    }\r\n\r\n\r\n    public void pauseMenu() {\r\n\r\n    }\r\n\r\n    public void updateBoard() {\r\n        setImagesAndCards();\r\n        addAllImages();\r\n    }\r\n\r\n    public void startMainNoCardSelected() throws Exception {\r\n        /*setOnClickSelected(imageView1Monster1, 5, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"startMainAPlayerMonsterSelected\", ImageView.class), DuelController.class.getMethod(\"summonMonster\"));\r\n        setOnClickSelected(imageView1Monster2, 3, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"startMainAPlayerMonsterSelected\", ImageView.class));\r\n        setOnClickSelected(imageView1Monster3, 1, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"startMainAPlayerMonsterSelected\", ImageView.class));\r\n        setOnClickSelected(imageView1Monster4, 2, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"startMainAPlayerMonsterSelected\", ImageView.class));\r\n        setOnClickSelected(imageView1Monster5, 4, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"startMainAPlayerMonsterSelected\", ImageView.class));\r\n\r\n        setOnClickSelected(imageView2Monster1, 4, DuelController.class.getMethod(\"selectCardOpponentMonsterZone\", int.class), this.getClass().getMethod(\"doNothing\", ImageView.class));\r\n        setOnClickSelected(imageView2Monster2, 2, DuelController.class.getMethod(\"selectCardOpponentMonsterZone\", int.class), this.getClass().getMethod(\"doNothing\", ImageView.class));\r\n        setOnClickSelected(imageView2Monster3, 1, DuelController.class.getMethod(\"selectCardOpponentMonsterZone\", int.class), this.getClass().getMethod(\"doNothing\", ImageView.class));\r\n        setOnClickSelected(imageView2Monster4, 3, DuelController.class.getMethod(\"selectCardOpponentMonsterZone\", int.class), this.getClass().getMethod(\"doNothing\", ImageView.class));\r\n        setOnClickSelected(imageView2Monster5, 5, DuelController.class.getMethod(\"selectCardOpponentMonsterZone\", int.class), this.getClass().getMethod(\"doNothing\", ImageView.class));\r\n\r\n        setOnClickSelected(imageView1SpellAndTrap1, 5, DuelController.class.getMethod(\"selectCardPlayerTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainAPlayerSpellOrTrapSelected\", ImageView.class));\r\n        setOnClickSelected(imageView1SpellAndTrap2, 3, DuelController.class.getMethod(\"selectCardPlayerTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainAPlayerSpellOrTrapSelected\", ImageView.class));\r\n        setOnClickSelected(imageView1SpellAndTrap3, 1, DuelController.class.getMethod(\"selectCardPlayerTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainAPlayerSpellOrTrapSelected\", ImageView.class));\r\n        setOnClickSelected(imageView1SpellAndTrap4, 2, DuelController.class.getMethod(\"selectCardPlayerTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainAPlayerSpellOrTrapSelected\", ImageView.class));\r\n        setOnClickSelected(imageView1SpellAndTrap5, 4, DuelController.class.getMethod(\"selectCardPlayerTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainAPlayerSpellOrTrapSelected\", ImageView.class));\r\n\r\n        setOnClickSelected(imageView2SpellAndTrap1, 4, DuelController.class.getMethod(\"selectCardOpponentTrapAndSpellZone\", int.class), this.getClass().getMethod(\"doNothing\", ImageView.class));\r\n        setOnClickSelected(imageView2SpellAndTrap2, 2, DuelController.class.getMethod(\"selectCardOpponentTrapAndSpellZone\", int.class), this.getClass().getMethod(\"doNothing\", ImageView.class));\r\n        setOnClickSelected(imageView2SpellAndTrap3, 1, DuelController.class.getMethod(\"selectCardOpponentTrapAndSpellZone\", int.class), this.getClass().getMethod(\"doNothing\", ImageView.class));\r\n        setOnClickSelected(imageView2SpellAndTrap4, 3, DuelController.class.getMethod(\"selectCardOpponentTrapAndSpellZone\", int.class), this.getClass().getMethod(\"doNothing\", ImageView.class));\r\n        setOnClickSelected(imageView2SpellAndTrap5, 5, DuelController.class.getMethod(\"selectCardOpponentTrapAndSpellZone\", int.class), this.getClass().getMethod(\"doNothing\", ImageView.class));\r\n*/\r\n        setOnClickSelected(imageView1hand1, 1, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainAHandSelected\", ImageView.class), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n        setOnClickSelected(imageView1hand2, 2, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainAHandSelected\", ImageView.class), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n        setOnClickSelected(imageView1hand3, 3, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainAHandSelected\", ImageView.class), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n        setOnClickSelected(imageView1hand4, 4, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainAHandSelected\", ImageView.class), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n        setOnClickSelected(imageView1hand5, 5, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainAHandSelected\", ImageView.class), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n        setOnClickSelected(imageView1hand6, 6, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainAHandSelected\", ImageView.class), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n\r\n//        setOnClickSelected(imageView1FieldZone, 1, DuelController.class.getMethod(\"selectCardPlayerFieldZone\"), this.getClass().getMethod(\"startMainPlayerFieldZoneSelected\", ImageView.class));\r\n//        setOnClickSelected(imageView2FieldZone, 1, DuelController.class.getMethod(\"selectCardOpponentFieldZone\"), this.getClass().getMethod(\"startMainOpponentFieldZoneSelected\", ImageView.class));\r\n\r\n//        //todo number ro gozashtam 1. chi kar konam? va show graveyard darim na select graveyard. bezanam?\r\n//        setOnClickSelected(imageView1Graveyard, 1, DuelController.class.getMethod(\"selectPlayerGraveyard\"), this.getClass().getMethod(\"startMainAHandSelected\", ImageView.class));\r\n//        setOnClickSelected(imageView1Graveyard, 1, DuelController.class.getMethod(\"selectRivalGraveyard\"), this.getClass().getMethod(\"startMainAHandSelected\", ImageView.class));\r\n\r\n\r\n    }\r\n\r\n\r\n    private void setOnClickSelected(ImageView imageView, int number, Method onMouseEnteredMethod, Method nextMethod, Method onMouseClickedMethodMonster, Method onMouseClickedMethodSpell, Method onMouseRightClickedMethod) {\r\n        if (imageView == null) return;\r\n        Image unknown = new Image(\"images/Cards/Unknown.jpg\");\r\n        imageView.setOnMouseEntered(event -> {\r\n            if (!imageView.getImage().equals(unknown))\r\n                showCardDetails(Card.getCardByImage(imageView.getImage()));\r\n            if (selectedCard != null && selectedCard.getEffect() != null)\r\n                selectedCard.setEffect(null);\r\n            imageView.setEffect(new DropShadow());\r\n            try {\r\n                onMouseEnteredMethod.invoke(duelController, number);\r\n                nextMethod.invoke(this, imageView);\r\n                selectedCard = imageView;\r\n            } catch (Exception e) {\r\n                System.out.println(e.getMessage());\r\n            }\r\n        });\r\n        imageView.setOnMouseExited(event -> {\r\n            if (!imageView.getImage().equals(unknown))\r\n                clearCardDetails();\r\n            imageView.setEffect(null);\r\n            try {\r\n                DuelController.class.getMethod(\"unselectCard\").invoke(duelController);\r\n                startMainNoCardSelected();\r\n                selectedCard = null;\r\n            } catch (Exception e) {\r\n                System.out.println(e.getMessage());\r\n            }\r\n        });\r\n        imageView.setOnMouseClicked(event -> {\r\n            if (event.getButton().equals(MouseButton.PRIMARY)) {\r\n                try {\r\n                    if (Card.getCardByImage(imageView.getImage()) instanceof MonsterCard)\r\n                        onMouseClickedMethodMonster.invoke(duelController);\r\n                    else\r\n                        onMouseClickedMethodSpell.invoke(duelController);\r\n                    if (!imageView.getImage().equals(unknown)) {\r\n                        clearCardDetails();\r\n                    }\r\n                    imageView.setEffect(null);\r\n                    selectedCard = null;\r\n                    updateBoard();\r\n                    startMainNoCardSelected();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                    System.out.println(e.getMessage());\r\n                }\r\n            } else if (event.getButton().equals(MouseButton.SECONDARY)) {\r\n                try {\r\n                    onMouseRightClickedMethod.invoke(duelController);\r\n                    if (!imageView.getImage().equals(unknown)) {\r\n                        clearCardDetails();\r\n                    }\r\n                    imageView.setEffect(null);\r\n                    selectedCard = null;\r\n                    updateBoard();\r\n                    startMainNoCardSelected();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                    System.out.println(e.getMessage());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void showCardDetails(Card card) {\r\n        selectedCardImageView.setImage(card.getImage());\r\n        description.setText(\"Description:\\n\" + card.getDescription());\r\n        if (card instanceof MonsterCard) {\r\n            MonsterCard monsterCard = (MonsterCard) card;\r\n            attack.setText(\"Attack: \" + monsterCard.getAttack());\r\n            defence.setText(\"Defence: \" + monsterCard.getDefence());\r\n        }\r\n    }\r\n\r\n    public void startMainAHandSelected(ImageView imageView) throws Exception {\r\n//        setOnClickSelected(imageView1hand2, 1, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainAHandSelected\", ImageView.class));\r\n\r\n    }\r\n\r\n    public void startMainAPlayerMonsterSelected(ImageView imageView) {\r\n\r\n    }\r\n\r\n    public void doNothing(ImageView imageView) {\r\n\r\n    }\r\n\r\n    public void startMainAPlayerSpellOrTrapSelected(ImageView imageView) {\r\n\r\n    }\r\n\r\n    public void startMainPlayerFieldZoneSelected(ImageView imageView) {\r\n\r\n    }\r\n\r\n    public void startMainOpponentFieldZoneSelected(ImageView imageView) {\r\n\r\n    }\r\n\r\n    public void setBar() { //todo harja lifepoint taghyir kard bayad update beshe\r\n        if (rivalProgressBar != null && rival != null)\r\n            rivalProgressBar.setProgress((double) player.getLifePoint() / 8000);\r\n        if (playerProgressBar != null && rival != null)\r\n            playerProgressBar.setProgress((double) rival.getLifePoint() / 8000);\r\n    }\r\n\r\n    private void setCardDetailsPart() {\r\n        description = new Label();\r\n        description.setLayoutX(12);\r\n        description.setLayoutY(338);\r\n        description.setPrefWidth(167);\r\n        description.setPrefHeight(120);\r\n        description.setTextFill(Color.WHITE);\r\n        description.setAlignment(Pos.TOP_LEFT);\r\n        description.setFont(Font.font(\"Agency FB\", 14));\r\n        description.setWrapText(true);\r\n        attack = new Label();\r\n        attack.setLayoutX(12);\r\n        attack.setLayoutY(457);\r\n        attack.setPrefWidth(149);\r\n        attack.setPrefHeight(15);\r\n        attack.setTextFill(Color.WHITE);\r\n        attack.setFont(Font.font(\"Agency FB\", 14));\r\n        defence = new Label();\r\n        defence.setLayoutX(12);\r\n        defence.setLayoutY(471);\r\n        defence.setPrefWidth(149);\r\n        defence.setPrefHeight(15);\r\n        defence.setTextFill(Color.WHITE);\r\n        defence.setFont(Font.font(\"Agency FB\", 14));\r\n        selectedCardImageView = new ImageView();\r\n        selectedCardImageView.setY(128);\r\n        selectedCardImageView.setX(29);\r\n        selectedCardImageView.setFitHeight(202);\r\n        selectedCardImageView.setFitWidth(184);\r\n        selectedCardImageView.setPickOnBounds(true);\r\n        selectedCardImageView.setPreserveRatio(true);\r\n    }\r\n\r\n    private void clearCardDetails() {\r\n        selectedCardImageView.setImage(null);\r\n        description.setText(\"\");\r\n        attack.setText(\"\");\r\n        defence.setText(\"\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/view/GameViewGraphic.java b/src/main/java/view/GameViewGraphic.java
--- a/src/main/java/view/GameViewGraphic.java	(revision d916541f9801a022d9eccdbc7473b3a530dc6ce9)
+++ b/src/main/java/view/GameViewGraphic.java	(date 1625664107435)
@@ -6,21 +6,26 @@
 import javafx.fxml.FXMLLoader;
 import javafx.fxml.Initializable;
 import javafx.geometry.Pos;
+import javafx.scene.Parent;
 import javafx.scene.Scene;
 import javafx.scene.control.Label;
 import javafx.scene.control.ProgressBar;
+import javafx.scene.control.ScrollPane;
 import javafx.scene.effect.DropShadow;
 import javafx.scene.image.Image;
 import javafx.scene.image.ImageView;
 import javafx.scene.input.MouseButton;
 import javafx.scene.layout.AnchorPane;
+import javafx.scene.layout.Pane;
 import javafx.scene.paint.Color;
 import javafx.scene.text.Font;
+import javafx.stage.Popup;
 import javafx.stage.Stage;
 import model.Card;
 import model.MonsterCard;
 import model.User;
 
+import java.awt.image.ImageFilter;
 import java.lang.reflect.Method;
 import java.net.URL;
 import java.util.ArrayList;
@@ -29,12 +34,13 @@
 public class GameViewGraphic extends Application implements Initializable {
     private static DuelController duelController;
     private static Stage stage;
-    public static User player = User.getUserByUsername("parmida");
-    public static User rival = User.getUserByUsername("hamraz");
-    private static GameViewGraphic instance = null;
+    public static User player;
+    public static User rival;
     public Label chatBox;
     public int numberOfRounds;
     private static ArrayList<Image> images = new ArrayList<>();
+    private static ArrayList<Card> cards = new ArrayList<>();
+    private static ArrayList<Boolean> conditions = new ArrayList<>();
     private static AnchorPane root;
     public static ImageView imageView1Monster1, imageView1Monster2, imageView1Monster3, imageView1Monster4, imageView1Monster5;
     public static ImageView imageView2Monster1, imageView2Monster2, imageView2Monster3, imageView2Monster4, imageView2Monster5;
@@ -43,6 +49,13 @@
     public static ImageView imageView1hand1, imageView1hand2, imageView1hand3, imageView1hand4, imageView1hand5, imageView1hand6;
     public static ImageView imageView2hand1, imageView2hand2, imageView2hand3, imageView2hand4, imageView2hand5, imageView2hand6;
     public static ImageView imageView1FieldZone, imageView2FieldZone, imageView1Graveyard, imageView2Graveyard;
+    private static Card card1Monster1, card1Monster2, card1Monster3, card1Monster4, card1Monster5;
+    private static Card card2Monster1, card2Monster2, card2Monster3, card2Monster4, card2Monster5;
+    private static Card card1SpellAndTrap1, card1SpellAndTrap2, card1SpellAndTrap3, card1SpellAndTrap4, card1SpellAndTrap5;
+    private static Card card2SpellAndTrap1, card2SpellAndTrap2, card2SpellAndTrap3, card2SpellAndTrap4, card2SpellAndTrap5;
+    public static Card card1Hand1, card1Hand2, card1Hand3, card1Hand4, card1Hand5, card1Hand6;
+    public static Card card2Hand1, card2Hand2, card2Hand3, card2Hand4, card2Hand5, card2Hand6;
+    public static Card card1FieldZone, card2FieldZone, card1Graveyard, card2Graveyard;
     public static ImageView rivalProfile = new ImageView();
     public static ImageView playerProfile = new ImageView();
     public ImageView selectedCard;
@@ -52,6 +65,8 @@
     private ProgressBar rivalProgressBar, playerProgressBar;
     private static Label description, attack, defence;
     private static ImageView selectedCardImageView;
+    public Popup popUpPlayerGraveyard, popUpRivalGraveyard;
+
 
     /*public GameViewGraphic(User player,User rival,int numberOfRounds){
         GameViewGraphic.player = player;
@@ -91,10 +106,12 @@
         addAllImages();
         Scene scene = new Scene(root);
         stage.setScene(scene);
-        stage.show();
+
 //        setSelectedCard();
         duelController.goNextPhase();
         startMainNoCardSelected();
+        //showPlayerPopUp();
+        stage.show();
     }
 
     @Override
@@ -117,51 +134,103 @@
 
     public void setImagesAndCards() {
         images = duelController.getBoard();
-        if (images.get(0) != null) imageView1Monster1 = setImageView(images.get(0), 324, 329);
-        if (images.get(1) != null) imageView1Monster2 = setImageView(images.get(1), 403, 329);
-        if (images.get(2) != null) imageView1Monster3 = setImageView(images.get(2), 486, 329);
-        if (images.get(3) != null) imageView1Monster4 = setImageView(images.get(3), 569, 329);
-        if (images.get(4) != null) imageView1Monster5 = setImageView(images.get(4), 652, 329);
-        if (images.get(5) != null) imageView2Monster1 = setImageView(images.get(5), 324, 206);
-        if (images.get(6) != null) imageView2Monster2 = setImageView(images.get(6), 403, 206);
-        if (images.get(7) != null) imageView2Monster3 = setImageView(images.get(7), 486, 206);
-        if (images.get(8) != null) imageView2Monster4 = setImageView(images.get(8), 569, 206);
-        if (images.get(9) != null) imageView2Monster5 = setImageView(images.get(9), 652, 206);
-        if (images.get(10) != null) imageView1SpellAndTrap1 = setImageView(images.get(10), 324, 432);
-        if (images.get(11) != null) imageView1SpellAndTrap2 = setImageView(images.get(11), 403, 432);
-        if (images.get(12) != null) imageView1SpellAndTrap3 = setImageView(images.get(12), 486, 432);
-        if (images.get(13) != null) imageView1SpellAndTrap4 = setImageView(images.get(13), 569, 432);
-        if (images.get(14) != null) imageView1SpellAndTrap5 = setImageView(images.get(14), 652, 432);
-        if (images.get(15) != null) imageView2SpellAndTrap1 = setImageView(images.get(15), 324, 104);
-        if (images.get(16) != null) imageView2SpellAndTrap2 = setImageView(images.get(16), 403, 104);
-        if (images.get(17) != null) imageView2SpellAndTrap3 = setImageView(images.get(17), 486, 104);
-        if (images.get(18) != null) imageView2SpellAndTrap4 = setImageView(images.get(18), 569, 104);
-        if (images.get(19) != null) imageView2SpellAndTrap5 = setImageView(images.get(19), 652, 104);
-        if (images.get(20) != null) imageView1hand1 = setImageView(images.get(20), 331, 538);
-        if (images.get(21) != null) imageView1hand2 = setImageView(images.get(21), 387, 538);
-        if (images.get(22) != null) imageView1hand3 = setImageView(images.get(22), 443, 538);
-        if (images.get(23) != null) imageView1hand4 = setImageView(images.get(23), 499, 538);
-        if (images.get(24) != null) imageView1hand5 = setImageView(images.get(24), 555, 538);
-        if (images.get(25) != null) imageView1hand6 = setImageView(images.get(25), 611, 538);
-        if (images.get(26) != null) imageView2hand1 = setImageView(images.get(26), 331, -16);
-        if (images.get(27) != null) imageView2hand2 = setImageView(images.get(27), 387, -16);
-        if (images.get(28) != null) imageView2hand3 = setImageView(images.get(28), 443, -16);
-        if (images.get(29) != null) imageView2hand4 = setImageView(images.get(29), 499, -16);
-        if (images.get(30) != null) imageView2hand5 = setImageView(images.get(30), 555, -16);
-        if (images.get(31) != null) imageView2hand6 = setImageView(images.get(31), 611, -16);
-        if (images.get(32) != null) imageView1FieldZone = setImageView(images.get(32), 245, 329);
-        if (images.get(33) != null) imageView2FieldZone = setImageView(images.get(33), 750, 213);
-        if (images.get(34) != null) imageView1Graveyard = setImageView(images.get(34), 750, 336);
-        if (images.get(35) != null) imageView2Graveyard = setImageView(images.get(35), 245, 213);
+        cards = duelController.getCards();
+        conditions = duelController.getConditions();
+        if (images.get(0) != null) imageView1Monster1 = setImageView(images.get(0), 324, 329, conditions.get(0));
+        if (images.get(1) != null) imageView1Monster2 = setImageView(images.get(1), 403, 329, conditions.get(1));
+        if (images.get(2) != null) imageView1Monster3 = setImageView(images.get(2), 486, 329, conditions.get(2));
+        if (images.get(3) != null) imageView1Monster4 = setImageView(images.get(3), 569, 329, conditions.get(3));
+        if (images.get(4) != null) imageView1Monster5 = setImageView(images.get(4), 652, 329, conditions.get(4));
+        if (images.get(5) != null) imageView2Monster1 = setImageView(images.get(5), 324, 206, conditions.get(5));
+        if (images.get(6) != null) imageView2Monster2 = setImageView(images.get(6), 403, 206, conditions.get(6));
+        if (images.get(7) != null) imageView2Monster3 = setImageView(images.get(7), 486, 206, conditions.get(7));
+        if (images.get(8) != null) imageView2Monster4 = setImageView(images.get(8), 569, 206, conditions.get(8));
+        if (images.get(9) != null) imageView2Monster5 = setImageView(images.get(9), 652, 206, conditions.get(9));
+        if (images.get(10) != null)
+            imageView1SpellAndTrap1 = setImageView(images.get(10), 324, 432, conditions.get(10));
+        if (images.get(11) != null)
+            imageView1SpellAndTrap2 = setImageView(images.get(11), 403, 432, conditions.get(11));
+        if (images.get(12) != null)
+            imageView1SpellAndTrap3 = setImageView(images.get(12), 486, 432, conditions.get(12));
+        if (images.get(13) != null)
+            imageView1SpellAndTrap4 = setImageView(images.get(13), 569, 432, conditions.get(13));
+        if (images.get(14) != null)
+            imageView1SpellAndTrap5 = setImageView(images.get(14), 652, 432, conditions.get(14));
+        if (images.get(15) != null)
+            imageView2SpellAndTrap1 = setImageView(images.get(15), 324, 104, conditions.get(15));
+        if (images.get(16) != null)
+            imageView2SpellAndTrap2 = setImageView(images.get(16), 403, 104, conditions.get(16));
+        if (images.get(17) != null)
+            imageView2SpellAndTrap3 = setImageView(images.get(17), 486, 104, conditions.get(17));
+        if (images.get(18) != null)
+            imageView2SpellAndTrap4 = setImageView(images.get(18), 569, 104, conditions.get(18));
+        if (images.get(19) != null)
+            imageView2SpellAndTrap5 = setImageView(images.get(19), 652, 104, conditions.get(19));
+        if (images.get(20) != null) imageView1hand1 = setImageView(images.get(20), 331, 538, conditions.get(20));
+        if (images.get(21) != null) imageView1hand2 = setImageView(images.get(21), 387, 538, conditions.get(21));
+        if (images.get(22) != null) imageView1hand3 = setImageView(images.get(22), 443, 538, conditions.get(22));
+        if (images.get(23) != null) imageView1hand4 = setImageView(images.get(23), 499, 538, conditions.get(23));
+        if (images.get(24) != null) imageView1hand5 = setImageView(images.get(24), 555, 538, conditions.get(24));
+        if (images.get(25) != null) imageView1hand6 = setImageView(images.get(25), 611, 538, conditions.get(25));
+        if (images.get(26) != null) imageView2hand1 = setImageView(images.get(26), 331, -16, conditions.get(26));
+        if (images.get(27) != null) imageView2hand2 = setImageView(images.get(27), 387, -16, conditions.get(27));
+        if (images.get(28) != null) imageView2hand3 = setImageView(images.get(28), 443, -16, conditions.get(28));
+        if (images.get(29) != null) imageView2hand4 = setImageView(images.get(29), 499, -16, conditions.get(29));
+        if (images.get(30) != null) imageView2hand5 = setImageView(images.get(30), 555, -16, conditions.get(30));
+        if (images.get(31) != null) imageView2hand6 = setImageView(images.get(31), 611, -16, conditions.get(31));
+        if (images.get(32) != null) imageView1FieldZone = setImageView(images.get(32), 232, 324, conditions.get(32));
+        if (images.get(33) != null) imageView2FieldZone = setImageView(images.get(33), 740, 205, conditions.get(33));
+        if (images.get(34) != null) imageView1Graveyard = setImageView(images.get(34), 750, 328, conditions.get(34));
+        if (images.get(35) != null) imageView2Graveyard = setImageView(images.get(35), 245, 213, conditions.get(35));
+        if (cards.get(0) != null) card1Monster1 = cards.get(0);
+        if (cards.get(1) != null) card1Monster2 = cards.get(1);
+        if (cards.get(2) != null) card1Monster3 = cards.get(2);
+        if (cards.get(3) != null) card1Monster4 = cards.get(3);
+        if (cards.get(4) != null) card1Monster5 = cards.get(4);
+        if (cards.get(5) != null) card2Monster1 = cards.get(5);
+        if (cards.get(6) != null) card2Monster2 = cards.get(6);
+        if (cards.get(7) != null) card2Monster3 = cards.get(7);
+        if (cards.get(8) != null) card2Monster4 = cards.get(8);
+        if (cards.get(9) != null) card2Monster5 = cards.get(9);
+        if (cards.get(10) != null) card1SpellAndTrap1 = cards.get(10);
+        if (cards.get(11) != null) card1SpellAndTrap2 = cards.get(11);
+        if (cards.get(12) != null) card1SpellAndTrap3 = cards.get(12);
+        if (cards.get(13) != null) card1SpellAndTrap4 = cards.get(13);
+        if (cards.get(14) != null) card1SpellAndTrap5 = cards.get(14);
+        if (cards.get(15) != null) card2SpellAndTrap1 = cards.get(15);
+        if (cards.get(16) != null) card2SpellAndTrap2 = cards.get(16);
+        if (cards.get(17) != null) card2SpellAndTrap3 = cards.get(17);
+        if (cards.get(18) != null) card2SpellAndTrap4 = cards.get(18);
+        if (cards.get(19) != null) card2SpellAndTrap5 = cards.get(19);
+        if (cards.get(20) != null) card1Hand1 = cards.get(20);
+        if (cards.get(21) != null) card1Hand2 = cards.get(21);
+        if (cards.get(22) != null) card1Hand3 = cards.get(22);
+        if (cards.get(23) != null) card1Hand4 = cards.get(23);
+        if (cards.get(24) != null) card1Hand5 = cards.get(24);
+        if (cards.get(25) != null) card1Hand6 = cards.get(25);
+        if (cards.get(26) != null) card2Hand1 = cards.get(26);
+        if (cards.get(27) != null) card2Hand2 = cards.get(27);
+        if (cards.get(28) != null) card2Hand3 = cards.get(28);
+        if (cards.get(29) != null) card2Hand4 = cards.get(29);
+        if (cards.get(30) != null) card2Hand5 = cards.get(30);
+        if (cards.get(31) != null) card2Hand6 = cards.get(31);
+        if (cards.get(32) != null) card1FieldZone = cards.get(32);
+        if (cards.get(33) != null) card2FieldZone = cards.get(33);
+        if (cards.get(34) != null) card1Graveyard = cards.get(34);
+        if (cards.get(35) != null) card2Graveyard = cards.get(35);
         setCardDetailsPart();
     }
 
-    private ImageView setImageView(Image image, int x, int y) {
+    private ImageView setImageView(Image image, int x, int y, Boolean condition) {
         ImageView imageView = new ImageView(image);
         imageView.setFitWidth(49);
         imageView.setFitHeight(71);
         imageView.setX(x);
         imageView.setY(y);
+        if (condition.equals(true))
+            imageView.setRotate(90);
+        else
+            imageView.setRotate(0);
         return imageView;
     }
 
@@ -248,6 +317,46 @@
 
     public void pauseMenu() {
 
+        System.out.println(popUpPlayerGraveyard);
+
+        //ArrayList<Card> playerGraveyard =
+        ArrayList<Image> images = duelController.getBoard();
+        ArrayList<Card> playerGraveyard = duelController.getCards();
+//        ArrayList<Card> playerGraveyard = (ArrayList<Card>) player.getBoard().getCardsInGraveyard();
+        //todo image haye card haro az parmida begir
+//        ScrollPane scrollPane = new ScrollPane();
+
+        //scrollPane.set(100);
+        //scrollPane.setLayoutX(500);
+        //scrollPane.setLayoutX(200);
+        popUpPlayerGraveyard = new Popup();
+        System.out.println(popUpPlayerGraveyard);
+        AnchorPane anchorPane = new AnchorPane();
+        popUpPlayerGraveyard.setX(10);
+        popUpPlayerGraveyard.setY(10);
+        popUpPlayerGraveyard.setWidth(300);
+        popUpPlayerGraveyard.setHeight(300);
+        anchorPane.setPrefWidth(200);
+        anchorPane.setPrefHeight(200);
+        anchorPane.setLayoutX(50);
+        anchorPane.setLayoutY(50);
+        for (int i = 0; i < 6; i++) {
+            ImageView imageView = new ImageView(images.get(i));
+            imageView.setFitWidth(70);
+            imageView.setFitHeight(102);
+            imageView.setX(220);
+            imageView.setY(20 * (i+1) + 102 * (i));
+            anchorPane.getChildren().add(imageView);
+        }
+        popUpPlayerGraveyard.getContent().add(anchorPane);
+        popUpPlayerGraveyard.requestFocus();
+        System.out.println(anchorPane.getChildren());
+        System.out.println(popUpPlayerGraveyard.getContent());;
+        popUpPlayerGraveyard.show(stage);
+        popUpPlayerGraveyard.requestFocus();
+        System.out.println(popUpPlayerGraveyard.isShowing());
+
+
     }
 
     public void updateBoard() {
@@ -280,13 +389,43 @@
         setOnClickSelected(imageView2SpellAndTrap4, 3, DuelController.class.getMethod("selectCardOpponentTrapAndSpellZone", int.class), this.getClass().getMethod("doNothing", ImageView.class));
         setOnClickSelected(imageView2SpellAndTrap5, 5, DuelController.class.getMethod("selectCardOpponentTrapAndSpellZone", int.class), this.getClass().getMethod("doNothing", ImageView.class));
 */
-        setOnClickSelected(imageView1hand1, 1, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
-        setOnClickSelected(imageView1hand2, 2, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
-        setOnClickSelected(imageView1hand3, 3, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
-        setOnClickSelected(imageView1hand4, 4, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
-        setOnClickSelected(imageView1hand5, 5, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
-        setOnClickSelected(imageView1hand6, 6, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
+        setOnClickSelected(imageView1hand1, player, 1, 20, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
+        setOnClickSelected(imageView1hand2, player, 2, 21, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
+        setOnClickSelected(imageView1hand3, player, 3, 22, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
+        setOnClickSelected(imageView1hand4, player, 4, 23, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
+        setOnClickSelected(imageView1hand5, player, 5, 24, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
+        setOnClickSelected(imageView1hand6, player, 6, 25, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("summonMonster"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("preSet"));
+        setOnClickSelected(imageView1Monster1, player, 5, 0, DuelController.class.getMethod("selectCardPlayerMonsterZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("flipSummon"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("changePosition"));
+        setOnClickSelected(imageView1Monster2, player, 3, 1, DuelController.class.getMethod("selectCardPlayerMonsterZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("flipSummon"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("changePosition"));
+        setOnClickSelected(imageView1Monster3, player, 1, 2, DuelController.class.getMethod("selectCardPlayerMonsterZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("flipSummon"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("changePosition"));
+        setOnClickSelected(imageView1Monster4, player, 2, 3, DuelController.class.getMethod("selectCardPlayerMonsterZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("flipSummon"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("changePosition"));
+        setOnClickSelected(imageView1Monster5, player, 4, 4, DuelController.class.getMethod("selectCardPlayerMonsterZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("flipSummon"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("changePosition"));
+        setOnClickSelected(imageView2Monster1, rival, 4, 5, DuelController.class.getMethod("selectCardOpponentMonsterZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView2Monster1, rival, 2, 6, DuelController.class.getMethod("selectCardOpponentMonsterZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView2Monster1, rival, 1, 7, DuelController.class.getMethod("selectCardOpponentMonsterZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView2Monster1, rival, 3, 8, DuelController.class.getMethod("selectCardOpponentMonsterZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView2Monster1, rival, 5, 9, DuelController.class.getMethod("selectCardOpponentMonsterZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView1SpellAndTrap1, player, 5, 10, DuelController.class.getMethod("selectCardPlayerTrapAndSpellZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView1SpellAndTrap2, player, 3, 11, DuelController.class.getMethod("selectCardPlayerTrapAndSpellZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView1SpellAndTrap3, player, 1, 12, DuelController.class.getMethod("selectCardPlayerTrapAndSpellZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView1SpellAndTrap4, player, 2, 13, DuelController.class.getMethod("selectCardPlayerTrapAndSpellZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView1SpellAndTrap5, player, 4, 14, DuelController.class.getMethod("selectCardPlayerTrapAndSpellZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("activateSpell"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView2SpellAndTrap1, rival, 4, 15, DuelController.class.getMethod("selectCardOpponentTrapAndSpellZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView2SpellAndTrap2, rival, 2, 16, DuelController.class.getMethod("selectCardOpponentTrapAndSpellZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView2SpellAndTrap3, rival, 1, 17, DuelController.class.getMethod("selectCardOpponentTrapAndSpellZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView2SpellAndTrap4, rival, 3, 18, DuelController.class.getMethod("selectCardOpponentTrapAndSpellZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView2SpellAndTrap5, rival, 5, 19, DuelController.class.getMethod("selectCardOpponentTrapAndSpellZone", int.class), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView1FieldZone, player, 1, 32, DuelController.class.getMethod("selectCardPlayerFieldZone"), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView2FieldZone, rival, 1, 33, DuelController.class.getMethod("selectCardOpponentFieldZone"), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView1Graveyard, player, 1, 34, DuelController.class.getMethod("showGraveyard"), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
+        setOnClickSelected(imageView2Graveyard, rival, 1, 35, DuelController.class.getMethod("showGraveyard"), this.getClass().getMethod("startMainNoCardSelected"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"), DuelController.class.getMethod("doNothing"));
 
+/*setOnClickSelected(imageView1hand2, 2, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class));
+        setOnClickSelected(imageView1hand3, 3, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class));
+        setOnClickSelected(imageView1hand4, 4, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class));
+        setOnClickSelected(imageView1hand5, 5, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class));
+        setOnClickSelected(imageView1hand6, 6, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class));
+*/
 //        setOnClickSelected(imageView1FieldZone, 1, DuelController.class.getMethod("selectCardPlayerFieldZone"), this.getClass().getMethod("startMainPlayerFieldZoneSelected", ImageView.class));
 //        setOnClickSelected(imageView2FieldZone, 1, DuelController.class.getMethod("selectCardOpponentFieldZone"), this.getClass().getMethod("startMainOpponentFieldZoneSelected", ImageView.class));
 
@@ -298,25 +437,29 @@
     }
 
 
-    private void setOnClickSelected(ImageView imageView, int number, Method onMouseEnteredMethod, Method nextMethod, Method onMouseClickedMethodMonster, Method onMouseClickedMethodSpell, Method onMouseRightClickedMethod) {
+    private void setOnClickSelected(ImageView imageView, User owner, int number1, int numberForGet, Method onMouseEnteredMethod, Method nextMethod, Method onMouseClickedMethodMonster, Method onMouseClickedMethodSpell, Method onMouseRightClickedMethod) {
         if (imageView == null) return;
         Image unknown = new Image("images/Cards/Unknown.jpg");
         imageView.setOnMouseEntered(event -> {
-            if (!imageView.getImage().equals(unknown))
-                showCardDetails(Card.getCardByImage(imageView.getImage()));
+            if (!imageView.getImage().equals(unknown) || owner.equals(player))
+                showCardDetails(cards.get(numberForGet));
+            else if (imageView.getImage().equals(unknown))
+                showUnknownCard();
             if (selectedCard != null && selectedCard.getEffect() != null)
                 selectedCard.setEffect(null);
             imageView.setEffect(new DropShadow());
             try {
-                onMouseEnteredMethod.invoke(duelController, number);
-                nextMethod.invoke(this, imageView);
+                onMouseEnteredMethod.invoke(duelController, number1);
+                startMainNoCardSelected();
                 selectedCard = imageView;
             } catch (Exception e) {
                 System.out.println(e.getMessage());
             }
         });
         imageView.setOnMouseExited(event -> {
-            if (!imageView.getImage().equals(unknown))
+            if (!imageView.getImage().equals(unknown) || owner.equals(player))
+                clearCardDetails();
+            else if (imageView.getImage().equals(unknown))
                 clearCardDetails();
             imageView.setEffect(null);
             try {
@@ -330,7 +473,7 @@
         imageView.setOnMouseClicked(event -> {
             if (event.getButton().equals(MouseButton.PRIMARY)) {
                 try {
-                    if (Card.getCardByImage(imageView.getImage()) instanceof MonsterCard)
+                    if (cards.get(numberForGet) instanceof MonsterCard)
                         onMouseClickedMethodMonster.invoke(duelController);
                     else
                         onMouseClickedMethodSpell.invoke(duelController);
@@ -364,6 +507,7 @@
     }
 
     public void showCardDetails(Card card) {
+        System.out.println(card);
         selectedCardImageView.setImage(card.getImage());
         description.setText("Description:\n" + card.getDescription());
         if (card instanceof MonsterCard) {
@@ -373,6 +517,11 @@
         }
     }
 
+    public void showUnknownCard() {
+        Image unknown = new Image("images/Cards/Unknown.jpg");
+        selectedCardImageView.setImage(unknown);
+    }
+
     public void startMainAHandSelected(ImageView imageView) throws Exception {
 //        setOnClickSelected(imageView1hand2, 1, DuelController.class.getMethod("selectCardPlayerHand", int.class), this.getClass().getMethod("startMainAHandSelected", ImageView.class));
 
@@ -445,4 +594,71 @@
         defence.setText("");
     }
 
+    private void showPlayerPopUp() {
+//        System.out.println(popUpPlayerGraveyard);
+//
+//        //ArrayList<Card> playerGraveyard =
+//        ArrayList<Image> images = duelController.getBoard();
+//        ArrayList<Card> playerGraveyard = duelController.getCards();
+////        ArrayList<Card> playerGraveyard = (ArrayList<Card>) player.getBoard().getCardsInGraveyard();
+//        //todo image haye card haro az parmida begir
+////        ScrollPane scrollPane = new ScrollPane();
+//
+//        //scrollPane.set(100);
+//        //scrollPane.setLayoutX(500);
+//        //scrollPane.setLayoutX(200);
+//        popUpPlayerGraveyard = new Popup();
+//        System.out.println(popUpPlayerGraveyard);
+//        AnchorPane anchorPane = new AnchorPane();
+//        popUpPlayerGraveyard.setX(500);
+//        popUpPlayerGraveyard.setY(200);
+//        popUpPlayerGraveyard.setWidth(300);
+//        popUpPlayerGraveyard.setHeight(300);
+//        for (int i = 0; i < 6; i++) {
+//            ImageView imageView = new ImageView(images.get(i));
+//            imageView.setFitWidth(70);
+//            imageView.setFitHeight(102);
+//            imageView.setX(220);
+//            imageView.setY(20 * i + 102 * (i - 1));
+//            anchorPane.getChildren().add(imageView);
+//        }
+//        popUpPlayerGraveyard.getContent().add(anchorPane);
+//        System.out.println(anchorPane.getChildren());
+//        System.out.println(popUpPlayerGraveyard.getContent());;
+//
+//
+//        popUpPlayerGraveyard.show(stage);
+//        System.out.println(popUpPlayerGraveyard.isShowing());
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+//        for (Card card : playerGraveyard) {
+//            ImageView imageView = new ImageView();
+//            imageView.setFitWidth(49);
+//            imageView.setFitHeight(71);
+//            imageView.setX(x);
+//            imageView.setY(y);
+//            scrollPane.getChildrenUnmodifiable().add(imageView);
+//        }
+
+
+    }
+
+    private void showRivalPopUp() {
+        popUpRivalGraveyard = new Popup();
+        ArrayList<Card> rivalGraveyard = (ArrayList<Card>) rival.getBoard().getCardsInGraveyard();
+
+    }
+
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0b1707ad-3e75-4310-9619-956ec670ae1a\" name=\"Default Changelist\" comment=\"Duel View 3\">\r\n      <change afterPath=\"$PROJECT_DIR$/Users/hamraz.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_1.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_1.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_10.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_10.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_11.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_11.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_12.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_12.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_13.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_13.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_14.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_14.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_2.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_2.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_3.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_3.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_4.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_4.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_5.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_5.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_6.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_6.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_7.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_7.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_8.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_8.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_9.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_9.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Cards/hamraz.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Cards/hamraz.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Cards/parmida.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Cards/parmida.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Deck/@AI@DeckForAIMainDeck.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Deck/@AI@DeckForAIMainDeck.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Deck/hamrazoneMainDeck.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Deck/hamrazoneMainDeck.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Deck/hamrazoneSideDeck.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Deck/hamrazoneSideDeck.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Deck/kiana_mszdeck to check full mainmainDeck.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Deck/kiana_mszdeck to check full mainmainDeck.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Deck/parmidaoneParmidaMainDeck.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Deck/parmidaoneParmidaMainDeck.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Deck/parmidaoneParmidaSideDeck.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Deck/parmidaoneParmidaSideDeck.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/UsersDecks/@AI@AllDecks.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/UsersDecks/@AI@AllDecks.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/UsersDecks/kiana_mszAllDecks.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/UsersDecks/kiana_mszAllDecks.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/view/GameViewGraphic.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/view/GameViewGraphic.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeStyleSettingsInfer\">\r\n    <option name=\"done\" value=\"true\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1tf7blqKJ2Y0dLvEX2lrUssvKzj\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n    <property name=\"extract.method.default.visibility\" value=\"private\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/src/main/resources\" />\r\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Modules\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"reference.settings.project.statistic.project.settings\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\hamri\\Desktop\\AP\\project_team_17_9\\src\\main\\resources\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\hamri\\Desktop\\AP\\project_team_17_9\\src\\main\\resources\\images\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"controller.exeption\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.LogInViewGraphic\">\r\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\r\n      <option name=\"arquillianRunConfiguration\">\r\n        <value>\r\n          <option name=\"containerStateName\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"LogInViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.LogInViewGraphic\" />\r\n      <module name=\"project_team_17\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"1.8\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"project_team_17\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"SignUpViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"1.8\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.SignUpViewGraphic\" />\r\n      <module name=\"project_team_17\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"test\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"project_team_17\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"test\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"test.testForMinFinder\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"project_team_17_2\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"test\" />\r\n      <option name=\"METHOD_NAME\" value=\"testForMinFinder\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.LogInViewGraphic\" />\r\n        <item itemvalue=\"Application.SignUpViewGraphic\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"JUnit.test\" />\r\n        <item itemvalue=\"JUnit.test.testForMinFinder\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"StructuralSearchPlugin\">\r\n    <searchConfiguration name=\"Unnamed\" created=\"1624744011824\" text=\"/* $CommentContent$ */\" recursive=\"false\" caseInsensitive=\"false\" type=\"JAVA\" pattern_context=\"default\" scope_type=\"PROJECT\" scope_descriptor=\"\" history=\"1\">\r\n      <constraint name=\"__context__\" within=\"\" contains=\"\" />\r\n      <constraint name=\"CommentContent\" within=\"\" contains=\"\" />\r\n    </searchConfiguration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0b1707ad-3e75-4310-9619-956ec670ae1a\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1623148364579</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1623148364579</updated>\r\n      <workItem from=\"1624545878199\" duration=\"3232000\" />\r\n      <workItem from=\"1625476998745\" duration=\"2760000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"ScoreBoardViewGraphic.java\">\r\n      <created>1623149665559</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623149665559</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"ScoreBoardViewGraphic.java\">\r\n      <created>1623149688409</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623149688409</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Error sign up\">\r\n      <created>1623151044078</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623151044078</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"model.SpellCard.java&#10;Monster Reborn + Terraforming\">\r\n      <created>1623868346229</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623868346229</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"model.SpellCard.java&#10;RAIGEKI + POT_OF_GREED\">\r\n      <created>1623946393997</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623946393997</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Yami SpellCard.java\">\r\n      <created>1624002906129</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624002906129</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Forest &amp; Closed Forest&#10;SpellCard.java\">\r\n      <created>1624012207305</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624012207305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"debug import user\">\r\n      <created>1624093680512</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624093680512</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"debug import user o baghie import ha\">\r\n      <created>1624099929742</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624099929742</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"kiana test error fix\">\r\n      <created>1624533248061</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624533248061</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"show all cards debug\">\r\n      <created>1624546002241</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624546002241</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"jabejayie cheat money\">\r\n      <created>1624547044985</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624547044985</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"draw phase automatic\">\r\n      <created>1624556390073</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624556390073</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"debug1\">\r\n      <created>1624625286861</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624625286861</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"debug2\">\r\n      <created>1624639165113</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624639165113</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"ai\">\r\n      <created>1624641323564</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624641323564</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"debug attack1\">\r\n      <created>1624643600247</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624643600247</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"debug attack2\">\r\n      <created>1624645817335</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624645817335</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"debug attack3\">\r\n      <created>1624646566864</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624646566864</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"debug attack4\">\r\n      <created>1624650239704</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624650239704</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"debug show card\">\r\n      <created>1624653667478</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624653667478</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"debug show card2\">\r\n      <created>1624654145122</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624654145122</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"debug takeAction1\">\r\n      <created>1624702088038</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624702088038</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"debug command knight2\">\r\n      <created>1624703733833</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624703733833</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"nothing\">\r\n      <created>1624704514853</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624704514853</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"GATE_GUARDIAN\">\r\n      <created>1624709705904</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624709705904</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"SPELL_ABSORPTION debug1\">\r\n      <created>1624710730390</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624710730390</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"tributeForSummon debug\">\r\n      <created>1624712073940</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624712073940</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Full spell and trap zone\">\r\n      <created>1624713959005</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624713959005</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"continuous spell card\">\r\n      <created>1624715726136</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624715726136</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"suijin debug 1\">\r\n      <created>1624717829951</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624717829951</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"suijin debug 2\">\r\n      <created>1624719651615</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624719651615</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"gate gaurdian debug\">\r\n      <created>1624721450582</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624721450582</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"activate spell debug 1\">\r\n      <created>1624725085666</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624725085666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"AIFullDebug + monster reborn\">\r\n      <created>1624729177752</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624729177752</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"twin twister + spell absorption\">\r\n      <created>1624737729186</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624737729186</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"mystical space typhoon&#10;twin twisters\">\r\n      <created>1624739906446</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624739906446</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۳۸\" summary=\":|\">\r\n      <created>1625245993391</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۳۸\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۳۸\" />\r\n      <updated>1625245993391</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۳۹\" summary=\"profile and scoreboard edited\">\r\n      <created>1625252163631</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۳۹\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۳۹\" />\r\n      <updated>1625252163631</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\"ShopGraphic3\">\r\n      <created>1625304651482</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1625304651482</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00041\" summary=\"ShopGraphic4\">\r\n      <created>1625313201854</created>\r\n      <option name=\"number\" value=\"00041\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1625313201854</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۲\" summary=\"create deck\">\r\n      <created>1625349222305</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۲\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۲\" />\r\n      <updated>1625349222305</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۳\" summary=\"profile photo\">\r\n      <created>1625407690499</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۳\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۳\" />\r\n      <updated>1625407690499</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۴\" summary=\"...\">\r\n      <created>1625420301025</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۴\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۴\" />\r\n      <updated>1625420301025</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۵\" summary=\"ScoreBoard\">\r\n      <created>1625435400560</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۵\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۵\" />\r\n      <updated>1625435400560</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00046\" summary=\"rock paper scissor\">\r\n      <created>1625502701825</created>\r\n      <option name=\"number\" value=\"00046\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00046\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1625502701825</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00047\" summary=\"rock paper scissor\">\r\n      <created>1625514903733</created>\r\n      <option name=\"number\" value=\"00047\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00047\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1625514903733</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۸\" summary=\"rock paper scissor names\">\r\n      <created>1625565325571</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۸\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۸\" />\r\n      <updated>1625565325571</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۹\" summary=\"board cards imageview\">\r\n      <created>1625571369460</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۹\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۹\" />\r\n      <updated>1625571369460</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"50\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"debug takeAction1\" />\r\n    <MESSAGE value=\"debug command knight2\" />\r\n    <MESSAGE value=\"nothing\" />\r\n    <MESSAGE value=\"GATE_GUARDIAN\" />\r\n    <MESSAGE value=\"SPELL_ABSORPTION debug1\" />\r\n    <MESSAGE value=\"tributeForSummon debug\" />\r\n    <MESSAGE value=\"Full spell and trap zone\" />\r\n    <MESSAGE value=\"continuous spell card\" />\r\n    <MESSAGE value=\"suijin debug 1\" />\r\n    <MESSAGE value=\"suijin debug 2\" />\r\n    <MESSAGE value=\"gate gaurdian debug\" />\r\n    <MESSAGE value=\"activate spell debug 1\" />\r\n    <MESSAGE value=\"AIFullDebug + monster reborn\" />\r\n    <MESSAGE value=\"twin twister + spell absorption\" />\r\n    <MESSAGE value=\"mystical space typhoon&#10;twin twisters\" />\r\n    <MESSAGE value=\":|\" />\r\n    <MESSAGE value=\"profile and scoreboard edited\" />\r\n    <MESSAGE value=\"ShopGraphic3\" />\r\n    <MESSAGE value=\"ShopGraphic4\" />\r\n    <MESSAGE value=\"create deck\" />\r\n    <MESSAGE value=\"profile photo\" />\r\n    <MESSAGE value=\"...\" />\r\n    <MESSAGE value=\"ScoreBoard\" />\r\n    <MESSAGE value=\"rock paper scissor\" />\r\n    <MESSAGE value=\"rock paper scissor names\" />\r\n    <MESSAGE value=\"board cards imageview\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"board cards imageview\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/view/RockPaperScissorView.java</url>\r\n          <line>36</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d916541f9801a022d9eccdbc7473b3a530dc6ce9)
+++ b/.idea/workspace.xml	(date 1625662289466)
@@ -22,24 +22,9 @@
     <select />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="0b1707ad-3e75-4310-9619-956ec670ae1a" name="Default Changelist" comment="Duel View 3">
+    <list default="true" id="0b1707ad-3e75-4310-9619-956ec670ae1a" name="Default Changelist" comment="jaye card ha">
       <change afterPath="$PROJECT_DIR$/Users/hamraz.txt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_1.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_10.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_10.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_11.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_11.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_12.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_12.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_13.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_13.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_14.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_14.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_2.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_2.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_3.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_3.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_4.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_4.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_5.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_5.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_6.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_6.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_7.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_7.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_8.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_8.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_9.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_9.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/PopUp.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Cards/hamraz.txt" beforeDir="false" afterPath="$PROJECT_DIR$/Cards/hamraz.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Cards/parmida.txt" beforeDir="false" afterPath="$PROJECT_DIR$/Cards/parmida.txt" afterDir="false" />
@@ -50,8 +35,16 @@
       <change beforePath="$PROJECT_DIR$/Deck/parmidaoneParmidaMainDeck.txt" beforeDir="false" afterPath="$PROJECT_DIR$/Deck/parmidaoneParmidaMainDeck.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Deck/parmidaoneParmidaSideDeck.txt" beforeDir="false" afterPath="$PROJECT_DIR$/Deck/parmidaoneParmidaSideDeck.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/UsersDecks/@AI@AllDecks.txt" beforeDir="false" afterPath="$PROJECT_DIR$/UsersDecks/@AI@AllDecks.txt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/UsersDecks/kiana_mszAllDecks.txt" beforeDir="false" afterPath="$PROJECT_DIR$/UsersDecks/kiana_mszAllDecks.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/controller/DuelController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controller/DuelController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/model/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/User.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/view/DuelView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/DuelView.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/view/GameViewGraphic.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/GameViewGraphic.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/Main.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Main.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/controller/DuelController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/controller/DuelController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/User.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/User.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/view/DuelView.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/view/DuelView.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/view/GameViewGraphic.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/view/GameViewGraphic.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -118,7 +111,7 @@
       <recent name="controller.exeption" />
     </key>
   </component>
-  <component name="RunManager" selected="Application.LogInViewGraphic">
+  <component name="RunManager" selected="Application.SignUpViewGraphic">
     <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
       <option name="arquillianRunConfiguration">
         <value>
@@ -147,6 +140,13 @@
       <option name="ALTERNATIVE_JRE_PATH" value="1.8" />
       <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
       <option name="MAIN_CLASS_NAME" value="Main" />
+      <module name="project_team_17" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="PopUp" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="PopUp" />
       <module name="project_team_17" />
       <method v="2">
         <option name="Make" enabled="true" />
@@ -172,27 +172,17 @@
       <option name="PACKAGE_NAME" value="" />
       <option name="MAIN_CLASS_NAME" value="test" />
       <option name="TEST_OBJECT" value="class" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="test.testForMinFinder" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
-      <module name="project_team_17_2" />
-      <option name="PACKAGE_NAME" value="" />
-      <option name="MAIN_CLASS_NAME" value="test" />
-      <option name="METHOD_NAME" value="testForMinFinder" />
-      <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
     <recent_temporary>
       <list>
-        <item itemvalue="Application.LogInViewGraphic" />
         <item itemvalue="Application.SignUpViewGraphic" />
+        <item itemvalue="Application.PopUp" />
         <item itemvalue="Application.Main" />
+        <item itemvalue="Application.LogInViewGraphic" />
         <item itemvalue="JUnit.test" />
-        <item itemvalue="JUnit.test.testForMinFinder" />
       </list>
     </recent_temporary>
   </component>
@@ -212,13 +202,6 @@
       <updated>1623148364579</updated>
       <workItem from="1624545878199" duration="3232000" />
       <workItem from="1625476998745" duration="2760000" />
-    </task>
-    <task id="LOCAL-00001" summary="ScoreBoardViewGraphic.java">
-      <created>1623149665559</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1623149665559</updated>
     </task>
     <task id="LOCAL-00002" summary="ScoreBoardViewGraphic.java">
       <created>1623149688409</created>
@@ -548,7 +531,13 @@
       <option name="presentableId" value="LOCAL‎۰۰۰۴۹" />
       <updated>1625571369460</updated>
     </task>
-    <option name="localTasksCounter" value="50" />
+    <task id="LOCAL‎۰۰۰۵۰" summary="jaye card ha">
+      <created>1625646784444</created>
+      <option name="number" value="LOCAL‎۰۰۰۵۰" />
+      <option name="presentableId" value="LOCAL‎۰۰۰۵۰" />
+      <updated>1625646784445</updated>
+    </task>
+    <option name="localTasksCounter" value="51" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -568,7 +557,6 @@
   </component>
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
-    <MESSAGE value="debug takeAction1" />
     <MESSAGE value="debug command knight2" />
     <MESSAGE value="nothing" />
     <MESSAGE value="GATE_GUARDIAN" />
@@ -594,7 +582,8 @@
     <MESSAGE value="rock paper scissor" />
     <MESSAGE value="rock paper scissor names" />
     <MESSAGE value="board cards imageview" />
-    <option name="LAST_COMMIT_MESSAGE" value="board cards imageview" />
+    <MESSAGE value="jaye card ha" />
+    <option name="LAST_COMMIT_MESSAGE" value="jaye card ha" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: src/main/java/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport controller.ImportExportUserController;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.Random;\r\n\r\npublic class User {\r\n\r\n    private static List<User> allUsers;\r\n    private String username;\r\n    private String password;\r\n    private String nickname;\r\n    private int score;\r\n    private List<Card> allCards;\r\n    private List<Deck> allDecks;\r\n    private Deck currentActiveDeck;\r\n    private Deck currentGameDeck;\r\n    private int lifePoint;\r\n    private Board board;\r\n    private int money;\r\n    private int profileNumber;\r\n\r\n    public User(String username, String nickname, String password) {\r\n        if (allUsers == null)\r\n            allUsers = new ArrayList<>();\r\n        this.allCards = new ArrayList<>();\r\n        this.allDecks = new ArrayList<>();\r\n        this.username = username;\r\n        this.nickname = nickname;\r\n        this.password = password;\r\n        this.currentActiveDeck = null;\r\n        this.profileNumber = getRandomProfileNumber();\r\n        setScore(0);\r\n        setMoney(100000);\r\n        allUsers.add(this);\r\n        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n        importExportUserController.exportNewUser(User.getUserByUsername(username));\r\n        importExportUserController.exportAllUsers(User.getAllUsers());\r\n    }\r\n\r\n    public static User getUserByUsername(String username) {\r\n        if (allUsers != null) {\r\n            for (User user : allUsers) {\r\n                if (user.getUsername().equals(username))\r\n                    return user;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static User getUserByNickname(String nickname) {\r\n        for (User allUser : allUsers) {\r\n            if (allUser.getNickname().equals(nickname))\r\n                return allUser;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static List<User> getAllUsers() {\r\n        return allUsers;\r\n    }\r\n\r\n    public List<Deck> getAllDecks() {\r\n        return this.allDecks;\r\n    }\r\n\r\n    public List<Card> getAllCards() {\r\n        return this.allCards;\r\n    }\r\n\r\n    public Deck getDeckByName(String name) {\r\n        for (Deck deck : allDecks) {\r\n            if (deck.getDeckName().equals(name)) {\r\n                return deck;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public Deck getGameDeck() {\r\n        return this.currentGameDeck;\r\n    }\r\n\r\n    public Card getCardByName(String name) {\r\n        for (Card card : allCards) {\r\n            if (card.getNamePascalCase().equals(name)) {\r\n                return card;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void setGameDeck(Deck currentGameDeck) {\r\n        this.currentGameDeck = currentGameDeck;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return this.username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return this.password;\r\n    }\r\n\r\n    public String getNickname() {\r\n        return this.nickname;\r\n    }\r\n\r\n    public int getProfileNumber() {\r\n        return this.profileNumber;\r\n    }\r\n\r\n    public int getScore() {\r\n        return this.score;\r\n    }\r\n\r\n    public Deck getActiveDeck() {\r\n        return this.currentActiveDeck;\r\n    }\r\n\r\n    public Board getBoard() {\r\n        return this.board;\r\n    }\r\n\r\n    public void setNewBoard() {\r\n        this.board = new Board();\r\n    }\r\n\r\n    public int getLifePoint() {\r\n        return this.lifePoint;\r\n    }\r\n\r\n    public void setLifePoint(int lifePoint) {\r\n        this.lifePoint = lifePoint;\r\n    }\r\n\r\n    public void setScore(int score) {\r\n        this.score = score;\r\n    }\r\n\r\n    public void setMoney(int money) {\r\n        this.money = money;\r\n    }\r\n\r\n    public int getMoney() {\r\n        return this.money;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n        importExportUserController.exportNewUser(User.getUserByUsername(this.getUsername()));\r\n    }\r\n\r\n    public void setNickname(String nickname) {\r\n        this.nickname = nickname;\r\n        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n        importExportUserController.exportNewUser(User.getUserByNickname(nickname));\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n        importExportUserController.exportNewUser(User.getUserByUsername(username));\r\n        importExportUserController.exportAllUsers(User.getAllUsers());\r\n    }\r\n\r\n    public void setActiveDeck(Deck deck) {\r\n        this.currentActiveDeck = deck;\r\n        ImportExportUserController.getInstance().exportActiveDeck(Objects.requireNonNull(getUserByUsername(username)),deck.getDeckName());\r\n    }\r\n\r\n    public int getCountOfCardInAllCards(Card card) {\r\n        int counter = 0;\r\n        for (Card eachCard : allCards) {\r\n            if (card.getName().equals(eachCard.getName()))\r\n                counter++;\r\n        }\r\n        return counter;\r\n    }\r\n\r\n    public void deleteDeck(String name) {\r\n        this.allDecks.remove(getDeckByName(name));\r\n    }\r\n\r\n    public void deleteCard(String name) {\r\n        this.allCards.remove(getCardByName(name));\r\n    }\r\n\r\n    public void addDeck(Deck deck) {\r\n        this.allDecks.add(deck);\r\n        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n        importExportUserController.exportAllDecksName(this.getAllDecks(), Objects.requireNonNull(User.getUserByUsername(username)));\r\n    }\r\n\r\n    public void addCardToUsersAllCards(Card card) {\r\n        this.allCards.add(card);\r\n    }\r\n\r\n    public void removeDeck(Deck deck) {\r\n        this.allDecks.remove(deck);\r\n        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n        importExportUserController.exportAllDecksName(this.getAllDecks(), Objects.requireNonNull(User.getUserByUsername(username)));\r\n    }\r\n\r\n    public void increaseScore(int amount) {\r\n        this.score += amount;\r\n    }\r\n\r\n    public void decreaseScore(int amount) {\r\n        this.score -= amount;\r\n    }\r\n\r\n    public void increaseLifePoint(int amount) {\r\n        this.lifePoint += amount;\r\n    }\r\n\r\n    public void decreaseLifePoint(int amount) {\r\n        this.lifePoint -= amount;\r\n    }\r\n\r\n    public void increaseMoney(int amount) {\r\n        this.money += amount;\r\n        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n        importExportUserController.exportNewUser(User.getUserByUsername(this.getUsername()));\r\n    }\r\n\r\n    public void decreaseMoney(int amount) {\r\n        this.money -= amount;\r\n        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n        importExportUserController.exportNewUser(User.getUserByUsername(this.getUsername()));\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        User user = (User) o;\r\n        return (this.username.equals(user.username));\r\n    }\r\n\r\n    public int getRandomProfileNumber() {\r\n        Random random = new Random();\r\n        return ((random.nextInt(36) + 1));\r\n    }\r\n\r\n    public void removeCard(Card card) {\r\n        Card cardToBeDeleted = null;\r\n        for (Card eachCard : this.allCards) {\r\n            if (eachCard.getName().equals(card.getName())) {\r\n                cardToBeDeleted = eachCard;\r\n                break;\r\n            }\r\n        }\r\n        this.allCards.remove(cardToBeDeleted);\r\n    }\r\n\r\n    public void addDeckCardsToUserAllCards(String name) {\r\n        Deck deck = this.getDeckByName(name);\r\n        allCards.addAll(deck.getMainDeck());\r\n        allCards.addAll(deck.getSideDeck());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/User.java b/src/main/java/model/User.java
--- a/src/main/java/model/User.java	(revision d916541f9801a022d9eccdbc7473b3a530dc6ce9)
+++ b/src/main/java/model/User.java	(date 1625661984405)
@@ -113,6 +113,10 @@
         return this.profileNumber;
     }
 
+    public void setProfileNumber(int profileNumber) {
+        this.profileNumber = profileNumber;
+    }
+
     public int getScore() {
         return this.score;
     }
Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import controller.ImportExportUserController;\r\n\r\nimport view.LogInView;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n        importExportUserController.importAllUsers();\r\n        importExportUserController.importAllCards();\r\n        importExportUserController.importAllDecks();\r\n        LogInView.getInstance().getCommandForLogin();\r\n    }\r\n}\r\n/*\r\nuser login -u hamraz -p 123\r\nmenu enter Deck\r\ndeck set-activate one\r\nmenu exit\r\nduel -n -ai -r 3\r\nnext phase\r\n */
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision d916541f9801a022d9eccdbc7473b3a530dc6ce9)
+++ b/src/main/java/Main.java	(date 1625656462308)
@@ -1,15 +1,32 @@
 import controller.ImportExportUserController;
 
+import javafx.scene.control.Alert;
+import javafx.scene.control.ButtonType;
+import javafx.scene.image.Image;
+import javafx.scene.image.ImageView;
 import view.LogInView;
 
 public class Main {
 
-    public static void main(String[] args) {
-        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();
-        importExportUserController.importAllUsers();
-        importExportUserController.importAllCards();
-        importExportUserController.importAllDecks();
-        LogInView.getInstance().getCommandForLogin();
+    public static void main(String[] args)  {
+
+        Alert alert = new Alert(Alert.AlertType.INFORMATION, "ya hagh", ButtonType.OK);
+        alert.setHeaderText("");
+        alert.setTitle("");
+        alert.showAndWait();
+
+//        Alert alert = new Alert(Alert.AlertType.ERROR, "Error", ButtonType.OK);
+//        Image image = new Image("https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Emojione_1F62D.svg/64px-Emojione_1F62D.svg.png");
+//        ImageView imageView = new ImageView(image);
+//        alert.setGraphic(imageView);
+//        alert.showAndWait();
+
+
+//        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();
+//        importExportUserController.importAllUsers();
+//        importExportUserController.importAllCards();
+//        importExportUserController.importAllDecks();
+//        LogInView.getInstance().getCommandForLogin();
     }
 }
 /*
Index: src/main/java/view/DuelView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.DuelController;\r\nimport model.User;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class DuelView {\r\n    private DuelController duelController;\r\n\r\n    public static void printText(String output) {\r\n        System.out.println(output);\r\n    }\r\n\r\n    public static String scan() {\r\n        return ScannerClassForView.getScanner().nextLine();\r\n    }\r\n\r\n    public DuelView(User user, User rival, int roundNumber) {\r\n        duelController = new DuelController(user, rival, roundNumber);\r\n//        duelController.setDuelView(this);\r\n    }\r\n\r\n    public void getCommandForDuel() {\r\n        String command;\r\n        while (ScannerClassForView.getScanner().hasNext()) {\r\n            command = ScannerClassForView.getScanner().nextLine();\r\n            if (processCommand(command) ) break;\r\n            if(duelController.getShouldEndGameForView()) break;\r\n            duelController.manageEndGame();\r\n            if(duelController.getShouldEndGameForView()) break;\r\n        }\r\n    }\r\n\r\n    private boolean processCommand(String command) {\r\n        if (command.equals(\"select -d\")) {\r\n            try {\r\n                duelController.unselectCardFromCommand();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        Matcher matcher = getCommandMatcher(command, \"select ([\\\\w -]+)\");\r\n        if (matcher.matches()) {\r\n            Matcher isOpponent = getCommandMatcher(matcher.group(1), \"(--opponent|-o)\");\r\n            Matcher isMonster = getCommandMatcher(matcher.group(1), \"(--monster|-m)\");\r\n            Matcher isSpellAndTrap = getCommandMatcher(matcher.group(1), \"(--spell|-s)\");\r\n            Matcher isFieldZone = getCommandMatcher(matcher.group(1), \"(--field|-f)\");\r\n            Matcher isHand = getCommandMatcher(matcher.group(1), \"(--hand|-h)\");\r\n            Matcher numberMatcher = getCommandMatcher(matcher.group(1), \"[0-9]+\");\r\n            if (isMonster.find(0) && isOpponent.find(0) && numberMatcher.find(0)) {\r\n                try {\r\n                    duelController.selectCardOpponentMonsterZone(Integer.parseInt(numberMatcher.group()));\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isMonster.find(0) && numberMatcher.find(0)) {\r\n                try {\r\n                    duelController.selectCardPlayerMonsterZone(Integer.parseInt(numberMatcher.group()));\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isSpellAndTrap.find(0) && isOpponent.find(0) && numberMatcher.find(0)) {\r\n                try {\r\n                    duelController.selectCardOpponentTrapAndSpellZone(Integer.parseInt(numberMatcher.group()));\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isSpellAndTrap.find(0) && numberMatcher.find(0)) {\r\n                try {\r\n                    duelController.selectCardPlayerTrapAndSpellZone(Integer.parseInt(numberMatcher.group()));\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isFieldZone.find(0) && isOpponent.find(0)) {\r\n                try {\r\n                    duelController.selectCardOpponentFieldZone();\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isFieldZone.find(0)) {\r\n                try {\r\n                    duelController.selectCardPlayerFieldZone();\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isHand.find(0) && numberMatcher.find(0)) {\r\n                try {\r\n                    duelController.selectCardPlayerHand(Integer.parseInt(numberMatcher.group()));\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else printText(\"invalid selection\");\r\n            return false;\r\n        }\r\n\r\n        if (command.equals(\"next phase\")) {\r\n            duelController.goNextPhase();\r\n            return false;\r\n        }\r\n        if (command.equals(\"summon\")) {\r\n            try {\r\n                duelController.summonMonster();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        matcher = getCommandMatcher(command, \"set (--position|-p) (attack|defence)\");\r\n        if (matcher.matches()) {\r\n            try {\r\n                duelController.changePosition(matcher.group(2));\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n\r\n            }\r\n            return false;\r\n        }\r\n        if (command.equals(\"set\")) {\r\n            try {\r\n                duelController.preSet();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        if (command.equals(\"flip-summon\")) {\r\n            try {\r\n                duelController.flipSummon();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n\r\n            }\r\n            return false;\r\n        }\r\n        matcher = getCommandMatcher(command, \"attack ([1-5])\");\r\n        if (matcher.matches()) {\r\n            try {\r\n                duelController.attackMonster(Integer.parseInt(matcher.group(1)));\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        if (command.equals(\"attack direct\")) {\r\n            try {\r\n                duelController.directAttack();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        if (command.equals(\"activate effect\")) {\r\n            try {\r\n                duelController.activateSpell();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        if (command.equals(\"show graveyard\")) {\r\n            try {\r\n                duelController.showGraveyard();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        matcher = getCommandMatcher(command, \"card show (--selected|-s)\");\r\n        if (matcher.matches()) {\r\n            try {\r\n                duelController.showCard();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        if (command.equals(\"surrender\")) {\r\n            duelController.surrender();\r\n            return true;\r\n        }\r\n        if (command.startsWith(\"menu enter \")) {\r\n            printText(\"menu navigation is not possible\");\r\n            return false;\r\n        }\r\n        matcher = getCommandMatcher(command,\"edoCtaehc tnioPefil ([\\\\w -]+) ([\\\\w -]+)\");\r\n        if (matcher.matches()){\r\n            Matcher isOpponent = getCommandMatcher(matcher.group(1),\"tnenoppo\");\r\n            Matcher isPlayer = getCommandMatcher(matcher.group(1),\"reyalp\");\r\n            Matcher lifePoint = getCommandMatcher(matcher.group(2),\"[0-9]+\");\r\n            if (isOpponent.find() && lifePoint.find())\r\n                duelController.cheatLifePoint(\"opponent\",Integer.parseInt(lifePoint.group()));\r\n            if (isPlayer.find() && lifePoint.find())\r\n                duelController.cheatLifePoint(\"player\",Integer.parseInt(lifePoint.group()));\r\n\r\n            return false;\r\n        }\r\n        matcher = getCommandMatcher(command, \"edoCtaehc yenom ([0-9]+)\");\r\n        if (matcher.matches()){\r\n            int amount = Integer.parseInt(matcher.group(1));\r\n            duelController.cheatMoney(amount);\r\n            return false;\r\n        }\r\n        if (command.equals(\"niw ot tnaw tsuj i tub od ot gniht dab yrev a si gnitaehc wonk i\")){\r\n            duelController.cheatToWinGame();\r\n            return false;\r\n        }\r\n        printText(\"invalid command\");\r\n        return false;\r\n    }\r\n\r\n    private Matcher getCommandMatcher(String command, String regex) {\r\n        Pattern pattern = Pattern.compile(regex);\r\n        return pattern.matcher(command);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/view/DuelView.java b/src/main/java/view/DuelView.java
--- a/src/main/java/view/DuelView.java	(revision d916541f9801a022d9eccdbc7473b3a530dc6ce9)
+++ b/src/main/java/view/DuelView.java	(date 1625652708000)
@@ -111,7 +111,7 @@
         matcher = getCommandMatcher(command, "set (--position|-p) (attack|defence)");
         if (matcher.matches()) {
             try {
-                duelController.changePosition(matcher.group(2));
+//                duelController.changePosition(matcher.group(2));
             } catch (Exception exception) {
                 printText(exception.getMessage());
 
Index: src/main/java/PopUp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/PopUp.java b/src/main/java/PopUp.java
new file mode 100644
--- /dev/null	(date 1625658070753)
+++ b/src/main/java/PopUp.java	(date 1625658070753)
@@ -0,0 +1,118 @@
+import javafx.application.Application;
+import javafx.event.ActionEvent;
+import javafx.event.EventHandler;
+import javafx.scene.Scene;
+import javafx.scene.control.Alert;
+import javafx.scene.control.Button;
+import javafx.scene.control.ButtonType;
+import javafx.scene.control.Label;
+import javafx.scene.image.Image;
+import javafx.scene.image.ImageView;
+import javafx.scene.layout.AnchorPane;
+import javafx.scene.layout.TilePane;
+import javafx.stage.Popup;
+import javafx.stage.Stage;
+import sun.plugin.javascript.navig.Anchor;
+
+public class PopUp extends Application {
+    @Override
+    public void start(Stage primaryStage) throws Exception {
+
+
+        Stage stage = new Stage();
+        // set title for the stage
+        stage.setTitle("Creating popup");
+
+        // create a button
+        Button button = new Button("button");
+
+        // create a tile pane
+        TilePane tilepane = new TilePane();
+
+        // create a label
+        Label label = new Label("This is a Popup");
+
+        // create a popup
+        Popup popup = new Popup();
+
+        // set background
+        label.setStyle(" -fx-background-color: white;");
+
+        // add the label
+        popup.getContent().add(label);
+
+        // set size of label
+        label.setMinWidth(80);
+        label.setMinHeight(50);
+
+        // action event
+        EventHandler<ActionEvent> event =
+                new EventHandler<ActionEvent>() {
+
+                    public void handle(ActionEvent e)
+                    {
+                        if (!popup.isShowing())
+                            popup.show(stage);
+                        else
+                            popup.hide();
+                    }
+                };
+
+        // when button is pressed
+        button.setOnAction(event);
+
+        // add button
+        tilepane.getChildren().add(button);
+
+        // create a scene
+        Scene scene = new Scene(tilepane, 200, 200);
+
+        // set the scene
+        stage.setScene(scene);
+
+        stage.show();
+
+
+
+
+
+//        Alert alert = new Alert(Alert.AlertType.ERROR, "Error", ButtonType.OK);
+//        Stage stage = new Stage();
+//        stage.show();
+//        stage.setTitle("Creating popup");
+//        // create a label
+//        Label label = new Label("This is a Popup");
+//
+//        // create a popup
+//        Popup popup = new Popup();
+//
+//        // set background
+//        label.setStyle(" -fx-background-color: white;");
+//
+//        // add the label
+//        AnchorPane anchorPane = new AnchorPane();
+//        popup.getContent().add(anchorPane);
+//
+//        popup.show(stage);
+        //popup.wait();
+
+//        alert.setHeight(100);
+//        alert.setWidth(100);
+//        alert.setX(400);
+//        alert.setY(600);
+//        //alert.setWidth(100);
+//
+//        Image image = new Image("https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Emojione_1F62D.svg/64px-Emojione_1F62D.svg.png");
+//        ImageView imageView = new ImageView(image);
+//        alert.setGraphic(imageView);
+//        alert.showAndWait();
+
+
+
+
+//        Alert alert = new Alert(Alert.AlertType.INFORMATION, "ya hagh", ButtonType.OK);
+//        alert.setHeaderText("");
+//        alert.setTitle("");
+//        alert.showAndWait();
+    }
+}
Index: Users/hamraz.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Users/hamraz.txt b/Users/hamraz.txt
new file mode 100644
--- /dev/null	(date 1625664112911)
+++ b/Users/hamraz.txt	(date 1625664112911)
@@ -0,0 +1,5 @@
+hamraz
+123
+hamraz
+0
+100000
\ No newline at end of file
Index: UsersDecks/@AI@AllDecks.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>DeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UsersDecks/@AI@AllDecks.txt b/UsersDecks/@AI@AllDecks.txt
--- a/UsersDecks/@AI@AllDecks.txt	(revision d916541f9801a022d9eccdbc7473b3a530dc6ce9)
+++ b/UsersDecks/@AI@AllDecks.txt	(date 1625664114402)
@@ -14,3 +14,19 @@
 DeckForAI
 DeckForAI
 DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
