Index: .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_9_08_PM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_9_08_PM__Default_Changelist_.xml	(revision 56827a4ccc997c0e855261394b5db5502c6f9dbb)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_9_08_PM__Default_Changelist_.xml	(revision 56827a4ccc997c0e855261394b5db5502c6f9dbb)
@@ -1,9 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_6_25_2021_9_08_PM_[Default_Changelist]" date="1624639110741" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_9_08_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 6/25/2021 9:08 PM [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value="project_team_17_2.zip" />
-    <option name="AFTER_PATH" />
-    <option name="SHELVED_PATH" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_5_18_PM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_5_18_PM__Default_Changelist_.xml	(revision 56827a4ccc997c0e855261394b5db5502c6f9dbb)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_5_18_PM__Default_Changelist_.xml	(revision 56827a4ccc997c0e855261394b5db5502c6f9dbb)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_6_25_2021_5_18_PM_[Default_Changelist]" date="1624625368660" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_5_18_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 6/25/2021 5:18 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_5_18_PM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_5_18_PM_[Default_Changelist]/shelved.patch	(revision 56827a4ccc997c0e855261394b5db5502c6f9dbb)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_5_18_PM_[Default_Changelist]/shelved.patch	(revision 56827a4ccc997c0e855261394b5db5502c6f9dbb)
@@ -1,11 +0,0 @@
-Index: allUsers.txt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- allUsers.txt	(revision 22932e90e451dcc040c0fc24093b3d8906b64c53)
-+++ allUsers.txt	(revision 22932e90e451dcc040c0fc24093b3d8906b64c53)
-@@ -1,3 +0,0 @@
--kiana_msz
--parmida
--hamraz
Index: .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_9_08_PM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_9_08_PM_[Default_Changelist]/shelved.patch	(revision 56827a4ccc997c0e855261394b5db5502c6f9dbb)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_9_08_PM_[Default_Changelist]/shelved.patch	(revision 56827a4ccc997c0e855261394b5db5502c6f9dbb)
@@ -1,1098 +0,0 @@
-Index: src/main/java/model/MonsterCard.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package model;\r\n\r\nimport controller.DuelController;\r\nimport view.DuelView;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic enum MonsterCard implements Cardable {\r\n    COMMAND_KNIGHT(4, Attribute.FIRE, MonsterType.WARRIOR, CardType.EFFECT, 1200, 1900,\r\n            \"All Warrior-Type monsters you control gain 400 ATK. If you control another monster, monsters your \" +\r\n                    \"opponent controls cannot target this card for an attack.\",\r\n            2100, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            MonsterAction.getInstance().addToMonsterAttackPoints(duelController, 400, takeActionCase);\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return MonsterAction.getInstance().canBeAttackedCommandKnight(duelController, monsterNumber);\r\n        }\r\n    },\r\n\r\n    BATTLE_OX(4, Attribute.EARTH, MonsterType.BEAST_WARRIOR, CardType.NORMAL, 1700, 1000,\r\n            \"A monster with tremendous power, it destroys enemies with a swing of its axe.\", 2900, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    AXE_RAIDER(4, Attribute.EARTH, MonsterType.WARRIOR, CardType.NORMAL, 1700, 1150,\r\n            \"An axe-wielding monster of tremendous strength and agility.\", 3100, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    HORN_IMP(4, Attribute.DARK, MonsterType.FIEND, CardType.NORMAL, 1300, 1000,\r\n            \"A small fiend that dwells in the dark, its single horn makes it a formidable opponent.\", 2500, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    YOMI_SHIP(3, Attribute.WATER, MonsterType.AQUA, CardType.EFFECT, 800, 1400,\r\n            \"If this card is destroyed by battle and sent to the GY: Destroy the monster that destroyed this card.\",\r\n            1700, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            MonsterAction.getInstance().destroyAttackerYomiShip(duelController, takeActionCase);\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    SILVER_FANG(3, Attribute.EARTH, MonsterType.BEAST, CardType.NORMAL, 1200, 800,\r\n            \"A snow wolf that's beautiful to the eye, but absolutely vicious in battle.\", 1700, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    SUIJIN(7, Attribute.WATER, MonsterType.AQUA, CardType.EFFECT, 2500, 2400,\r\n            \"During damage calculation in your opponent's turn, if this card is being attacked: You can target \" +\r\n                    \"the attacking monster; make that target's ATK 0 during damage calculation only (this is a Quick Effect). \" +\r\n                    \"This effect can only be used once while this card is face-up on the field.\", 8700, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            MonsterAction.getInstance().makeAttackerAttackPoint0Suijin(duelController, takeActionCase, targetNumber);\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    FIREYAROU(4, Attribute.FIRE, MonsterType.PYRO, CardType.NORMAL, 1300, 1000,\r\n            \"A malevolent creature wrapped in flames that attacks enemies with intense fire.\", 2500, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    CURTAIN_OF_DARK_ONES(2, Attribute.DARK, MonsterType.SPELLCASTER, CardType.NORMAL, 600, 500,\r\n            \"A curtain that a spellcaster made, it is said to raise a dark power.\", 700, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    FERAL_IMP(4, Attribute.DARK, MonsterType.FIEND, CardType.NORMAL, 1300, 1400,\r\n            \"A playful little fiend that lurks in the dark, waiting to attack an unwary enemy.\", 2800, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    DARK_MAGICIAN(7, Attribute.DARK, MonsterType.SPELLCASTER, CardType.NORMAL, 2500,\r\n            2100, \"The ultimate wizard in terms of attack and defense.\", 8300, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    WATTKID(3, Attribute.LIGHT, MonsterType.THUNDER, CardType.NORMAL, 1000, 500,\r\n            \"A creature that electrocutes opponents with bolts of lightning.\", 1300, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    BABY_DRAGON(3, Attribute.WIND, MonsterType.DRAGON, CardType.NORMAL, 1200, 700,\r\n            \"Much more than just a child, this dragon is gifted with untapped power.\", 1600, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    HERO_OF_THE_EAST(3, Attribute.EARTH, MonsterType.WARRIOR, CardType.NORMAL, 1100, 1000,\r\n            \"Feel da strength ah dis sword-swinging samurai from da Far East.\", 1700, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    BATTLE_WARRIOR(3, Attribute.EARTH, MonsterType.WARRIOR, CardType.NORMAL, 700, 1000,\r\n            \"A warrior that fights with his bare hands!!!\", 1300, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    CRAWLING_DRAGON(5, Attribute.EARTH, MonsterType.DRAGON, CardType.NORMAL, 1600, 1400,\r\n            \"This weakened dragon can no longer fly, but is still a deadly force to be reckoned with.\", 3900, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    FLAME_MANIPULATOR(3, Attribute.FIRE, MonsterType.SPELLCASTER, CardType.NORMAL, 900, 1000,\r\n            \"This Spellcaster attacks enemies with fire-related spells such as \\\"Sea of Flames\\\" and \\\"Wall of Fire\\\".\",\r\n            1500, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    BLUE_EYES_WHITE_DRAGON(8, Attribute.LIGHT, MonsterType.DRAGON, CardType.NORMAL, 3000, 2500,\r\n            \"This legendary dragon is a powerful engine of destruction. Virtually invincible, very few have \" +\r\n                    \"faced this awesome creature and lived to tell the tale.\", 11300, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n    //TODO ritual\r\n    CRAB_TURTLE(8, Attribute.WATER, MonsterType.AQUA, CardType.RITUAL, 2550, 2500,\r\n            \"This monster can only be Ritual Summoned with the Ritual Spell Card, \\\"Turtle Oath\\\". You must \" +\r\n                    \"also offer monsters whose total Level Stars equal 8 or more as a Tribute from the field or your hand.\",\r\n            10200, false) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n    //TODO ritual\r\n    SKULL_GUARDIAN(7, Attribute.LIGHT, MonsterType.WARRIOR, CardType.RITUAL, 2050, 2500,\r\n            \"This monster can only be Ritual Summoned with the Ritual Spell Card, \\\"Novox's Prayer\\\". You must \" +\r\n                    \"also offer monsters whose total Level Stars equal 7 or more as a Tribute from the field or your hand.\",\r\n            7900, false) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    SLOT_MACHINE(7, Attribute.DARK, MonsterType.MACHINE, CardType.NORMAL, 2000, 2300,\r\n            \"The machine's ability is said to vary according to its slot results.\", 7500, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    HANIWA(2, Attribute.EARTH, MonsterType.ROCK, CardType.NORMAL, 500, 500,\r\n            \"An earthen figure that protects the tomb of an ancient ruler.\", 600, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    MAN_EATER_BUG(2, Attribute.EARTH, MonsterType.INSECT, CardType.EFFECT, 450, 600,\r\n            \"FLIP: Target 1 monster on the field; destroy that target.\", 600, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.FLIP_SUMMONED)) {\r\n                User temp = duelController.getPlayer();\r\n                duelController.setPlayer(duelController.getRival());\r\n                duelController.setRival(temp);\r\n                duelController.changePlayerAndRival();\r\n                if (duelController.getPlayer().getUsername().equals(\"@AI@\"))\r\n                    duelController.handleAITurn();\r\n                else if (duelController.getCountOfMonsterCardsInGround(duelController.getRival()) != 0) {\r\n                    DuelView.printText(\"select one of opponent's monster cards by number to destroy\");\r\n                    String givenNumber = DuelView.scan();\r\n                    int monsterNumber = DuelController.getOpponentGroundNumbers()[Integer.parseInt(givenNumber) - 1] - 1;\r\n                    while (duelController.getRival().getBoard().getMonsterByNumber(monsterNumber) == null) {\r\n                        DuelView.printText(\"there is no monster in this place. enter another number\");\r\n                        givenNumber = DuelView.scan();\r\n                        monsterNumber = DuelController.getOpponentGroundNumbers()[Integer.parseInt(givenNumber) - 1] - 1;\r\n                    }\r\n                    duelController.getRival().getBoard().getMonsterByNumber(monsterNumber).takeAction(duelController, TakeActionCase.REMOVE_FROM_MONSTERZONE, duelController.getRival(), duelController.getSelectedCard().getNumber());\r\n                    duelController.getRival().getBoard().removeMonster(monsterNumber);\r\n                    duelController.getRival().getBoard().putInGraveYard(duelController.getRival().getBoard().getMonsterByNumber(monsterNumber));\r\n                }\r\n            }\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    GATE_GUARDIAN(11, Attribute.DARK, MonsterType.WARRIOR, CardType.EFFECT, 3750, 3400,\r\n            \"Cannot be Normal Summoned/Set. Must first be Special Summoned (from your hand) by Tributing 1 \" +\r\n                    \"\\\"Sanga of the Thunder\\\", \\\"Kazejin\\\", and \\\"Suijin\\\".\", 20000, false) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.SPECIAL_SUMMONED)) {\r\n                DuelView.printText(\"select 3 monsters from ground to tribute\");\r\n                String input1 = DuelView.scan();\r\n                if (input1.equals(\"cancel\")) return;\r\n                int address1 = Integer.parseInt(input1) - 1;\r\n                address1 = DuelController.getPlayerGroundNumbers()[address1] - 1;\r\n                while (duelController.getPlayer().getBoard().getMonsterByNumber(address1) == null) {\r\n                    DuelView.printText(\"there is no monster in this address! please enter another number\");\r\n                    input1 = DuelView.scan();\r\n                    if (input1.equals(\"cancel\")) return;\r\n                    address1 = Integer.parseInt(input1) - 1;\r\n                    address1 = DuelController.getPlayerGroundNumbers()[address1] - 1;\r\n                }\r\n                String input2 = DuelView.scan();\r\n                if (input2.equals(\"cancel\")) return;\r\n                int address2 = Integer.parseInt(input2) - 1;\r\n                address2 = DuelController.getPlayerGroundNumbers()[address2] - 1;\r\n                while (duelController.getPlayer().getBoard().getMonsterByNumber(address2) == null) {\r\n                    DuelView.printText(\"there is no monster in this address! please enter another number\");\r\n                    input2 = DuelView.scan();\r\n                    if (input2.equals(\"cancel\")) return;\r\n                    address2 = Integer.parseInt(input2) - 1;\r\n                    address2 = DuelController.getPlayerGroundNumbers()[address2] - 1;\r\n                }\r\n                String input3 = DuelView.scan();\r\n                if (input3.equals(\"cancel\")) return;\r\n                int address3 = Integer.parseInt(input3) - 1;\r\n                address3 = DuelController.getPlayerGroundNumbers()[address3] - 1;\r\n                while (duelController.getPlayer().getBoard().getMonsterByNumber(address3) == null) {\r\n                    DuelView.printText(\"there is no monster in this address! please enter another number\");\r\n                    input3 = DuelView.scan();\r\n                    if (input3.equals(\"cancel\")) return;\r\n                    address3 = Integer.parseInt(input3) - 1;\r\n                    address3 = DuelController.getPlayerGroundNumbers()[address3] - 1;\r\n                }\r\n                duelController.getPlayer().getBoard().removeMonster(address1);\r\n                duelController.getPlayer().getBoard().removeMonster(address2);\r\n                duelController.getPlayer().getBoard().removeMonster(address3);\r\n                duelController.removeMonsterPlayer(address1);\r\n                duelController.removeMonsterPlayer(address2);\r\n                duelController.removeMonsterPlayer(address3);\r\n                DuelView.printText(\"enter the position you want to summon monster in(attack or defence)\");\r\n                String position = DuelView.scan();\r\n                if (position.equals(\"cancel\")) return;\r\n                while (!(position.equals(\"attack\") || position.equals(\"defence\"))) {\r\n                    DuelView.printText(\"please enter a valid position!\");\r\n                    position = DuelView.scan();\r\n                    if (position.equals(\"cancel\")) return;\r\n                }\r\n                switch (position) {\r\n                    case \"attack\":\r\n                        position = \"OO\";\r\n                        break;\r\n                    case \"defence\":\r\n                        position = \"DO\";\r\n                        break;\r\n                }\r\n                int targetPlace = duelController.getPlayer().getBoard().putMonster((MonsterCard) duelController.getSelectedCard().getCard(), position);\r\n                ((MonsterCard) duelController.getSelectedCard().getCard()).takeAction(duelController, TakeActionCase.PUT_IN_MONSTERZONE, duelController.getPlayer(), targetPlace);\r\n                duelController.getPlayer().getBoard().getCardsInHand().remove((int) duelController.getSelectedCard().getNumber());\r\n                duelController.setSelectedCard(null);\r\n                DuelView.printText(\"special summoned successfully\");\r\n            }\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    SCANNER(1, Attribute.LIGHT, MonsterType.MACHINE, CardType.EFFECT, 0, 0,\r\n            \"Once per turn, you can select 1 of your opponent's monsters that is removed from play. Until the\" +\r\n                    \" End Phase, this card's name is treated as the selected monster's name, and this card has the same \" +\r\n                    \"Attribute, Level, ATK, and DEF as the selected monster. If this card is removed from the field \" +\r\n                    \"while this effect is applied, remove it from play.\", 8000, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    BITRON(2, Attribute.EARTH, MonsterType.CYBERSE, CardType.NORMAL, 200, 2000,\r\n            \"A new species found in electronic space. There's not much information on it.\", 1000, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    MARSHMALLON(3, Attribute.LIGHT, MonsterType.FAIRY, CardType.EFFECT, 300, 500,\r\n            \"Cannot be destroyed by battle. After damage calculation, if this card was attacked, and was \" +\r\n                    \"face-down at the start of the Damage Step: The attacking player takes 1000 damage.\", 700, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    BEAST_KING_BARBAROS(8, Attribute.EARTH, MonsterType.BEAST_WARRIOR, CardType.EFFECT, 3000, 1200,\r\n            \"You can Normal Summon/Set this card without Tributing, but its original ATK becomes 1900. You can \" +\r\n                    \"Tribute 3 monsters to Tribute Summon (but not Set) this card. If Summoned this way: Destroy all \" +\r\n                    \"cards your opponent controls.\", 9200, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    TEXCHANGER(1, Attribute.DARK, MonsterType.CYBERSE, CardType.EFFECT, 100, 100,\r\n            \"Once per turn, when your monster is targeted for an attack: You can negate that attack, then \" +\r\n                    \"Special Summon 1 Cyberse Normal Monster from your hand, Deck, or GY.\", 200, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    LEOTRON(4, Attribute.EARTH, MonsterType.CYBERSE, CardType.NORMAL, 2000, 0,\r\n            \"A territorial electronic monster that guards its own domain.\", 2500, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    THE_CALCULATOR(2, Attribute.LIGHT, MonsterType.THUNDER, CardType.EFFECT, 0, 0,\r\n            \"The ATK of this card is the combined Levels of all face-up monsters you control x 300.\", 8000, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    ALEXANDRITE_DRAGON(4, Attribute.LIGHT, MonsterType.DRAGON, CardType.NORMAL, 2000, 100,\r\n            \"Many of the czars' lost jewels can be found in the scales of this priceless dragon. Its creator \" +\r\n                    \"remains a mystery, along with how they acquired the imperial treasures. But whosoever finds this\" +\r\n                    \" dragon has hit the jackpot... whether they know it or not.\", 2600, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    MIRAGE_DRAGON(4, Attribute.LIGHT, MonsterType.DRAGON, CardType.EFFECT, 1600, 600,\r\n            \"Your opponent cannot activate Trap Cards during the Battle Phase.\", 2500, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    HERALD_OF_CREATION(4, Attribute.LIGHT, MonsterType.SPELLCASTER, CardType.EFFECT, 1800, 600,\r\n            \"Once per turn: You can discard 1 card, then target 1 Level 7 or higher monster in your Graveyard; \" +\r\n                    \"add that target to your hand.\", 2700, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    EXPLODER_DRAGON(3, Attribute.EARTH, MonsterType.DRAGON, CardType.EFFECT, 1000, 0,\r\n            \"If this card is destroyed by battle and sent to the Graveyard: Destroy the monster that destroyed\" +\r\n                    \" it. Neither player takes any battle damage from attacks involving this attacking card.\", 1000, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.DIED_BY_BEING_ATTACKED)) {\r\n                duelController.getPlayer().getBoard().putInGraveYard(duelController.getSelectedCard().getCard());\r\n                duelController.getPlayer().getBoard().removeMonster(duelController.getSelectedCard().getNumber());\r\n                duelController.removeMonsterPlayer(duelController.getSelectedCard().getNumber());\r\n            }\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    WARRIOR_DAI_GREPHER(4, Attribute.EARTH, MonsterType.WARRIOR, CardType.NORMAL, 1700, 1600,\r\n            \"The warrior who can manipulate dragons. Nobody knows his mysterious past.\", 3400, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    DARK_BLADE(4, Attribute.DARK, MonsterType.WARRIOR, CardType.NORMAL, 1800, 1500,\r\n            \"They say he is a dragon-manipulating warrior from the dark world. His attack is tremendous, using \" +\r\n                    \"his great swords with vicious power.\", 3500, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    WATTAILDRAGON(6, Attribute.LIGHT, MonsterType.DRAGON, CardType.NORMAL, 2500, 1000,\r\n            \"Capable of indefinite flight. Attacks by wrapping its body with electricity and ramming into opponents.\\n\" +\r\n                    \"IMPORTANT: Capturing the \\\"Wattaildragon\\\" is forbidden by the Ancient Rules and is a Level 6 \" +\r\n                    \"offense, the minimum sentence for which is imprisonment for no less than 2500 heliocycles.\", 5800, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    TERRATIGER_THE_EMPOWERED_WARRIOR(4, Attribute.EARTH, MonsterType.WARRIOR, CardType.EFFECT, 1800, 1200,\r\n            \"When this card is Normal Summoned: You can Special Summon 1 Level 4 or lower Normal Monster from\" +\r\n                    \" your hand in Defense Position.\", 3200, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    THE_TRICKY(5, Attribute.WIND, MonsterType.SPELLCASTER, CardType.EFFECT, 2000, 1200,\r\n            \"You can Special Summon this card (from your hand) by discarding 1 card.\", 4300, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    SPIRAL_SERPENT(8, Attribute.WATER, MonsterType.SEA_SERPENT, CardType.NORMAL, 2900, 2900,\r\n            \"When huge whirlpools lay cities asunder, it is the hunger of this sea serpent at work. No one has\" +\r\n                    \" ever escaped its dreaded Spiral Wave to accurately describe the terror they experienced.\", 11700, true) {\r\n        public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n        }\r\n\r\n        public boolean canBeAttacked(DuelController duelController, int monsterNumber) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    private int level;\r\n    private Attribute attribute;\r\n    private MonsterType monsterType;\r\n    private CardType cardType;\r\n    private int attack;\r\n    private int defence;\r\n    private String description;\r\n    private int price;\r\n    private boolean canBeNormalSummoned;\r\n\r\n    MonsterCard(int level, Attribute attribute, MonsterType monsterType, CardType cardType, int attack, int defence, String description, int price, boolean canBeNormalSummoned) {\r\n        this.level = level;\r\n        this.attribute = attribute;\r\n        this.monsterType = monsterType;\r\n        this.cardType = cardType;\r\n        this.attack = attack;\r\n        this.defence = defence;\r\n        this.description = description;\r\n        this.price = price;\r\n        this.canBeNormalSummoned = canBeNormalSummoned;\r\n    }\r\n\r\n    public Attribute getAttribute() {\r\n        return this.attribute;\r\n    }\r\n\r\n    public CardType getCardType() {\r\n        return this.cardType;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return this.description;\r\n    }\r\n\r\n    public int getPrice() {\r\n        return this.price;\r\n    }\r\n\r\n    public int getAttack() {\r\n        return this.attack;\r\n    }\r\n\r\n    public int getDefence() {\r\n        return this.defence;\r\n    }\r\n\r\n    public int getLevel() {\r\n        return this.level;\r\n    }\r\n\r\n    public boolean getCanBeNormalSummoned() {\r\n        return this.canBeNormalSummoned;\r\n    }\r\n\r\n    private void setDefence(int defence) {\r\n        this.defence = defence;\r\n    }\r\n\r\n    public MonsterType getMonsterType() {\r\n        return this.monsterType;\r\n    }\r\n\r\n    public String getName() {\r\n        return this.name();\r\n    }\r\n\r\n    public abstract void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber);\r\n\r\n    public abstract boolean canBeAttacked(DuelController duelController, int monsterNumber);\r\n\r\n    public String getNamePascalCase() {\r\n        String name = this.name().charAt(0) + this.name().substring(1).toLowerCase();\r\n        Pattern pattern = Pattern.compile(\"_([a-z])[a-z]+\");\r\n        Matcher matcher = pattern.matcher(name);\r\n        while (matcher.find())\r\n            name = name.replace(\"_\" + matcher.group(1), \"_\" + matcher.group(1).toUpperCase());\r\n        name = name.replaceAll(\"_\", \" \");\r\n        return name;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        String name = this.getNamePascalCase();\r\n        String toReturn = \"Name: \" + name + \"\\n\" +\r\n                \"Level: \" + this.level + \"\\n\";\r\n        String monsterType = this.monsterType.getNamePascalCase();\r\n        toReturn = toReturn + \"Type: \" + monsterType + \"\\n\" +\r\n                \"ATK: \" + this.attack + \"\\n\" +\r\n                \"DEF: \" + this.defence + \"\\n\" +\r\n                \"Description: \" + this.description;\r\n        return toReturn;\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- src/main/java/model/MonsterCard.java	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ src/main/java/model/MonsterCard.java	(date 1624635532131)
-@@ -245,10 +245,10 @@
-             "FLIP: Target 1 monster on the field; destroy that target.", 600, true) {
-         public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {
-             if (takeActionCase.equals(TakeActionCase.FLIP_SUMMONED)) {
--                User temp = duelController.getPlayer();
-+                /*User temp = duelController.getPlayer();
-                 duelController.setPlayer(duelController.getRival());
-                 duelController.setRival(temp);
--                duelController.changePlayerAndRival();
-+                duelController.changePlayerAndRival();*/
-                 if (duelController.getPlayer().getUsername().equals("@AI@"))
-                     duelController.handleAITurn();
-                 else if (duelController.getCountOfMonsterCardsInGround(duelController.getRival()) != 0) {
-@@ -261,7 +261,7 @@
-                         monsterNumber = DuelController.getOpponentGroundNumbers()[Integer.parseInt(givenNumber) - 1] - 1;
-                     }
-                     duelController.getRival().getBoard().getMonsterByNumber(monsterNumber).takeAction(duelController, TakeActionCase.REMOVE_FROM_MONSTERZONE, duelController.getRival(), duelController.getSelectedCard().getNumber());
--                    duelController.getRival().getBoard().removeMonster(monsterNumber);
-+                    duelController.getRival().getBoard().removeMonster(monsterNumber,duelController,duelController.getRival());
-                     duelController.getRival().getBoard().putInGraveYard(duelController.getRival().getBoard().getMonsterByNumber(monsterNumber));
-                 }
-             }
-@@ -311,9 +311,9 @@
-                     address3 = Integer.parseInt(input3) - 1;
-                     address3 = DuelController.getPlayerGroundNumbers()[address3] - 1;
-                 }
--                duelController.getPlayer().getBoard().removeMonster(address1);
--                duelController.getPlayer().getBoard().removeMonster(address2);
--                duelController.getPlayer().getBoard().removeMonster(address3);
-+                duelController.getPlayer().getBoard().removeMonster(address1,duelController,duelController.getPlayer());
-+                duelController.getPlayer().getBoard().removeMonster(address2,duelController,duelController.getPlayer());
-+                duelController.getPlayer().getBoard().removeMonster(address3,duelController,duelController.getPlayer());
-                 duelController.removeMonsterPlayer(address1);
-                 duelController.removeMonsterPlayer(address2);
-                 duelController.removeMonsterPlayer(address3);
-@@ -469,7 +469,7 @@
-         public void takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {
-             if (takeActionCase.equals(TakeActionCase.DIED_BY_BEING_ATTACKED)) {
-                 duelController.getPlayer().getBoard().putInGraveYard(duelController.getSelectedCard().getCard());
--                duelController.getPlayer().getBoard().removeMonster(duelController.getSelectedCard().getNumber());
-+                duelController.getPlayer().getBoard().removeMonster(duelController.getSelectedCard().getNumber(),duelController,duelController.getRival());
-                 duelController.removeMonsterPlayer(duelController.getSelectedCard().getNumber());
-             }
-         }
-Index: src/main/java/model/SpellCard.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package model;\r\n\r\nimport controller.DuelController;\r\nimport view.DuelView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic enum SpellCard implements Cardable {\r\n\r\n\r\n    MONSTER_REBORN(Icon.NORMAL, \"Target 1 monster in either GY; Special Summon it.\", Status.UNLIMITED, 2000) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n                DuelView.printText(\"enter \\\"My\\\" or \\\"Rival\\\" to select graveyard\");\r\n                String graveyard = DuelView.scan();\r\n                while (!graveyard.equals(\"cancel\") && !graveyard.equals(\"My\") && !graveyard.equals(\"Rival\")) {\r\n                    DuelView.printText(\"enter \\\"My\\\" or \\\"Rival\\\" to select graveyard\");\r\n                    graveyard = DuelView.scan();\r\n                }\r\n                switch (graveyard) {\r\n                    case \"My\":\r\n                        boolean hasMonster = false;\r\n                        for (int i = 1; i <= duelController.getPlayer().getBoard().getCardsInGraveyard().size(); i++) {\r\n                            Cardable card = duelController.getPlayer().getBoard().getCardsInGraveyard().get(i);\r\n                            if (card instanceof MonsterCard) {\r\n                                hasMonster = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!hasMonster) {\r\n                            DuelView.printText(\"Graveyard is empty!\");\r\n//                            duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n                            return false;\r\n                        }\r\n                        DuelView.printText(\"select one these cards by number:\");\r\n                        int monsterCounter = 1;\r\n                        for (int i = 1; i <= duelController.getPlayer().getBoard().getCardsInGraveyard().size(); i++) {\r\n                            Cardable card = duelController.getPlayer().getBoard().getCardsInGraveyard().get(i);\r\n                            if (card instanceof MonsterCard) {\r\n                                DuelView.printText(monsterCounter + \": \" + card.getNamePascalCase() + \": \" + card.getDescription());\r\n                                monsterCounter++;\r\n                                break;\r\n                            }\r\n                        }\r\n                        String cardNumber = DuelView.scan();\r\n                        if (cardNumber.equals(\"cancel\")) return false;\r\n                        while (!cardNumber.matches(\"\\\\d+\") || Integer.parseInt(cardNumber) < 1\r\n                                || Integer.parseInt(cardNumber) > monsterCounter - 1) {\r\n                            DuelView.printText(\"please Enter a valid Number!\");\r\n                            cardNumber = DuelView.scan();\r\n                            if (cardNumber.equals(\"cancel\")) return false;\r\n                        }\r\n                        monsterCounter = 1;\r\n                        int i;\r\n                        for (i = 1; i <= duelController.getPlayer().getBoard().getCardsInGraveyard().size(); i++) {\r\n                            Cardable card = duelController.getPlayer().getBoard().getCardsInGraveyard().get(i);\r\n                            if (card instanceof MonsterCard) {\r\n                                if (monsterCounter == Integer.parseInt(cardNumber))\r\n                                    break;\r\n                                else\r\n                                    monsterCounter++;\r\n                            }\r\n                        }\r\n                        Cardable card = duelController.getPlayer().getBoard().getCardsInGraveyard().get(i - 1);\r\n                        DuelView.printText(\"enter the position you want to summon monster in(attack or defence)\");\r\n                        String position = DuelView.scan();\r\n                        if (position.equals(\"cancel\")) return false;\r\n                        while (!(position.equals(\"attack\") || position.equals(\"defence\"))) {\r\n                            DuelView.printText(\"please enter a valid position!\");\r\n                            position = DuelView.scan();\r\n                            if (position.equals(\"cancel\")) return false;\r\n                        }\r\n                        switch (position) {\r\n                            case \"attack\":\r\n                                position = \"OO\";\r\n                                break;\r\n                            case \"defence\":\r\n                                position = \"DO\";\r\n                                break;\r\n                        }\r\n                        int targetPlace = duelController.getPlayer().getBoard().putMonster((MonsterCard) card, position);\r\n                        ((MonsterCard) card).takeAction(duelController, TakeActionCase.PUT_IN_MONSTERZONE, duelController.getPlayer(), targetPlace);\r\n                        duelController.getPlayer().getBoard().getCardsInGraveyard().remove(i - 1);\r\n                        duelController.setSelectedCard(null);\r\n                        DuelView.printText(\"special summoned successfully\");\r\n                        SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n                        duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n                        return true;\r\n                    case \"Rival\":\r\n                        hasMonster = false;\r\n                        for (i = 1; i <= duelController.getRival().getBoard().getCardsInGraveyard().size(); i++) {\r\n                            card = duelController.getRival().getBoard().getCardsInGraveyard().get(i);\r\n                            if (card instanceof MonsterCard) {\r\n                                hasMonster = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!hasMonster) {\r\n                            DuelView.printText(\"Graveyard is empty!\");\r\n//                            duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n                            return false;\r\n                        }\r\n                        DuelView.printText(\"select one these cards by number:\");\r\n                        monsterCounter = 1;\r\n                        for (i = 1; i <= duelController.getRival().getBoard().getCardsInGraveyard().size(); i++) {\r\n                            card = duelController.getRival().getBoard().getCardsInGraveyard().get(i);\r\n                            if (card instanceof MonsterCard) {\r\n                                DuelView.printText(monsterCounter + \": \" + card.getNamePascalCase() + \": \" + card.getDescription());\r\n                                monsterCounter++;\r\n                                break;\r\n                            }\r\n                        }\r\n                        cardNumber = DuelView.scan();\r\n                        if (cardNumber.equals(\"cancel\")) return false;\r\n                        while (!cardNumber.matches(\"\\\\d+\") || Integer.parseInt(cardNumber) < 1\r\n                                || Integer.parseInt(cardNumber) > monsterCounter - 1) {\r\n                            DuelView.printText(\"please Enter a valid Number!\");\r\n                            cardNumber = DuelView.scan();\r\n                            if (cardNumber.equals(\"cancel\")) return false;\r\n                        }\r\n                        monsterCounter = 1;\r\n                        for (i = 1; i <= duelController.getRival().getBoard().getCardsInGraveyard().size(); i++) {\r\n                            card = duelController.getRival().getBoard().getCardsInGraveyard().get(i);\r\n                            if (card instanceof MonsterCard) {\r\n                                if (monsterCounter == Integer.parseInt(cardNumber))\r\n                                    break;\r\n                                else\r\n                                    monsterCounter++;\r\n                            }\r\n                        }\r\n                        card = duelController.getRival().getBoard().getCardsInGraveyard().get(i - 1);\r\n                        DuelView.printText(\"enter the position you want to summon monster in(attack or defence)\");\r\n                        position = DuelView.scan();\r\n                        if (position.equals(\"cancel\")) return false;\r\n                        while (!(position.equals(\"attack\") || position.equals(\"defence\"))) {\r\n                            DuelView.printText(\"please enter a valid position!\");\r\n                            position = DuelView.scan();\r\n                            if (position.equals(\"cancel\")) return false;\r\n                        }\r\n                        switch (position) {\r\n                            case \"attack\":\r\n                                position = \"OO\";\r\n                                break;\r\n                            case \"defence\":\r\n                                position = \"DO\";\r\n                                break;\r\n                        }\r\n                        targetPlace = duelController.getRival().getBoard().putMonster((MonsterCard) card, position);\r\n                        ((MonsterCard) card).takeAction(duelController, TakeActionCase.PUT_IN_MONSTERZONE, duelController.getPlayer(), targetPlace);\r\n                        duelController.getRival().getBoard().getCardsInGraveyard().remove(i - 1);\r\n                        duelController.setSelectedCard(null);\r\n                        DuelView.printText(\"special summoned successfully\");\r\n                        SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n                        duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n                        return true;\r\n                    default:\r\n                        return false;\r\n                }\r\n            } else return true;\r\n        }\r\n    },\r\n\r\n    TERRAFORMING(Icon.NORMAL, \"Add 1 Field Spell from your Deck to your hand.\", Status.LIMITED, 2500) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n                boolean hasFieldSpell = false;\r\n                for (Cardable card : duelController.getPlayer().getGameDeck().getMainDeck()) {\r\n                    if (card instanceof SpellCard && ((SpellCard) card).getIcon().equals(Icon.FIELD)) {\r\n                        hasFieldSpell = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!hasFieldSpell) {\r\n                    DuelView.printText(\"You have no field spell card in your deck!!\");\r\n//                            duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n                    return false;\r\n                }\r\n                DuelView.printText(\"select one of these Field Spell cards from your deck to add to your hand:\");\r\n                int cardCounter = 1;\r\n                for (Cardable card : duelController.getPlayer().getGameDeck().getMainDeck()) {\r\n                    if (card instanceof SpellCard && ((SpellCard) card).getIcon().equals(Icon.FIELD)) {\r\n                        DuelView.printText(cardCounter + \": \" + card.getName() + \": \" + card.getDescription());\r\n                        cardCounter++;\r\n                    }\r\n                }\r\n                String choice = DuelView.scan();\r\n                if (choice.equals(\"cancel\")) return false;\r\n                while (!choice.matches(\"\\\\d+\") || Integer.parseInt(choice) < 1\r\n                        || Integer.parseInt(choice) > cardCounter - 1) {\r\n                    DuelView.printText(\"please Enter a valid Number!\");\r\n                    choice = DuelView.scan();\r\n                    if (choice.equals(\"cancel\")) return false;\r\n                }\r\n                cardCounter = 1;\r\n                int i;\r\n                for (i = 1; i <= duelController.getPlayer().getBoard().getCardsInGraveyard().size(); i++) {\r\n                    Cardable card = duelController.getPlayer().getBoard().getCardsInGraveyard().get(i);\r\n                    if (card instanceof SpellCard && ((SpellCard) card).getIcon().equals(Icon.FIELD)) {\r\n                        if (cardCounter == Integer.parseInt(choice))\r\n                            break;\r\n                        else\r\n                            cardCounter++;\r\n                    }\r\n                }\r\n                Cardable card = duelController.getPlayer().getGameDeck().getMainDeck().get(i - 1);\r\n                duelController.getPlayer().getBoard().getCardsInHand().add(card);\r\n                duelController.getPlayer().getGameDeck().getMainDeck().remove(i - 1);\r\n                duelController.setSelectedCard(null);\r\n                DuelView.printText(\"card added to hand successfully\");\r\n                SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n                duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    POT_OF_GREED(Icon.NORMAL, \"Draw 2 cards.\", Status.LIMITED, 2500) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n                List<Cardable> deck = duelController.getPlayer().getGameDeck().getMainDeck();\r\n                Cardable card1 = deck.get(deck.size() - 1);\r\n                Cardable card2 = deck.get(deck.size() - 2);\r\n                duelController.getPlayer().getBoard().getCardsInHand().add(card1);\r\n                duelController.getPlayer().getBoard().getCardsInHand().add(card2);\r\n                deck.remove(card1);\r\n                deck.remove(card2);\r\n                DuelView.printText(\"Spell activated successfully\");\r\n                SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n                duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    RAIGEKI(Icon.NORMAL, \"Destroy all monsters your opponent controls.\", Status.LIMITED, 2500) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    if (duelController.getPlayer().getBoard().getMonsterByNumber(i) != null) {\r\n                        duelController.getPlayer().getBoard().getMonsterByNumber(i).takeAction(duelController, TakeActionCase.REMOVE_FROM_MONSTERZONE, duelController.getRival(), i);\r\n                        duelController.getPlayer().getBoard().removeMonster(i);\r\n                        duelController.setMonsterAttackRival(i, null);\r\n                    }\r\n                }\r\n                SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n                duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    CHANGE_OF_HEART(Icon.NORMAL, \"Target 1 monster your opponent controls; take control of it until the End Phase.\",\r\n            Status.LIMITED, 2500) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    HARPIES_FEATHER_DUST(Icon.NORMAL, \"Destroy all Spells and Traps your opponent controls.\", Status.LIMITED, 2500) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    if (duelController.getPlayer().getBoard().getSpellAndTrapByNumber(i) != null) {\r\n                        if (duelController.getPlayer().getBoard().getSpellAndTrapByNumber(i) instanceof SpellCard)\r\n                            ((SpellCard) duelController.getPlayer().getBoard().getSpellAndTrapByNumber(i)).takeAction(duelController, TakeActionCase.REMOVE_FROM_SPELLTRAPZONE, duelController.getRival(), i);\r\n                        duelController.getPlayer().getBoard().removeSpellOrTrap(i);\r\n                    }\r\n                }\r\n                SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n                duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    SWORD_OF_REVEALING_LIGHT(Icon.NORMAL, \"After this card's activation, it remains on the field, but destroy \" +\r\n            \"it during the End Phase of your opponent's 3rd turn. When this card is activated: If your opponent controls\" +\r\n            \" a face-down monster, flip all monsters they control face-up. While this card is face-up on the field, your\" +\r\n            \" opponent's monsters cannot declare an attack.\", Status.UNLIMITED, 2500) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    DARK_HOLE(Icon.NORMAL, \"Destroy all monsters on the field.\", Status.UNLIMITED, 2500) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    if (duelController.getPlayer().getBoard().getMonsterByNumber(i) != null) {\r\n                        duelController.getPlayer().getBoard().getMonsterByNumber(i).takeAction(duelController, TakeActionCase.REMOVE_FROM_MONSTERZONE, duelController.getRival(), i);\r\n                        duelController.getPlayer().getBoard().removeMonster(i);\r\n                        duelController.setMonsterAttackRival(i, null);\r\n                    }\r\n                    if (duelController.getRival().getBoard().getMonsterByNumber(i) != null) {\r\n                        duelController.getRival().getBoard().getMonsterByNumber(i).takeAction(duelController, TakeActionCase.REMOVE_FROM_MONSTERZONE, duelController.getRival(), i);\r\n                        duelController.getRival().getBoard().removeMonster(i);\r\n                        duelController.setMonsterAttackPlayer(i, null);\r\n                    }\r\n                }\r\n                SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n                duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    SUPPLY_SQUAD(Icon.CONTINUOUS, \"Once per turn, if a monster(s) you control is destroyed by battle or card\" +\r\n            \" effect: Draw 1 card.\", Status.UNLIMITED, 4000) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    SPELL_ABSORPTION(Icon.CONTINUOUS, \"Each time a Spell Card is activated, gain 500 Life Points immediately \" +\r\n            \"after it resolves.\", Status.UNLIMITED, 4000) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.ANY_SPELL_ACTIVATED)) {\r\n                duelController.getPlayer().increaseLifePoint(500);\r\n            }\r\n            return true;\r\n        }\r\n\r\n    },\r\n\r\n    //FIXME\r\n    MESSENGER_OF_PEACE(Icon.CONTINUOUS, \"Monsters with 1500 or more ATK cannot declare an attack. Once per turn,\" +\r\n            \" during your Standby Phase, pay 100 LP or destroy this card.\", Status.UNLIMITED, 4000) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    TWIN_TWISTER(Icon.QUICK_PLAY, \"Discard 1 card, then target up to 2 Spells/Traps on the field; destroy them.\"\r\n            , Status.UNLIMITED, 3500) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n                int numberOfCardsInHand = duelController.getPlayer().getBoard().getCardsInHand().size();\r\n                if (numberOfCardsInHand == 0) {\r\n                    DuelView.printText(\"you don't have enough card in your hand to use this spell\");\r\n                } else {\r\n                    numberOfCardsInHand -= 1;\r\n                    DuelView.printText(\"please enter a number between 1 and \" + (numberOfCardsInHand + 1) + \" to choose\" +\r\n                            \" a card from your hand to be removed.\");\r\n                    String cardNumber = DuelView.scan();\r\n                    if (cardNumber.equals(\"cancel\")) return false;\r\n                    while (!cardNumber.matches(\"\\\\d+\") || Integer.parseInt(cardNumber) < 0\r\n                            || Integer.parseInt(cardNumber) > numberOfCardsInHand + 1) {\r\n                        DuelView.printText(\"please Enter a valid Number!\");\r\n                        cardNumber = DuelView.scan();\r\n                        if (cardNumber.equals(\"cancel\")) return false;\r\n                    }\r\n                    int address = Integer.parseInt(cardNumber) - 1;\r\n                    Cardable toBeRemoved = duelController.getPlayer().getBoard().getCardInHandByNumber(address);\r\n                    duelController.getPlayer().getBoard().removeCardFromHand(toBeRemoved);\r\n                    DuelView.printText(\"the card was successfully removed from your hand. Now please enter \\\"My\\\" or \\\"Rival\\\" to select field\");\r\n                    String field = DuelView.scan();\r\n                    while (!field.equals(\"cancel\") && !field.equals(\"My\") && !field.equals(\"Rival\")) {\r\n                        DuelView.printText(\"enter \\\"My\\\" or \\\"Rival\\\" to select field\");\r\n                        field = DuelView.scan();\r\n                    }\r\n                    if (field.equals(\"cancel\")) return false;\r\n                    destroySpellOrTrap(duelController, field);\r\n                    DuelView.printText(\"now, if you want to destroy another spell or trap, type the word \\\"My\\\" or \\\"Rival\\\", otherwise type the word continue\");\r\n                    field = DuelView.scan();\r\n                    while (!field.equals(\"continue\") && !field.equals(\"My\") && !field.equals(\"Rival\")) {\r\n                        DuelView.printText(\"enter \\\"My\\\" or \\\"Rival\\\" to select field, or enter continue\");\r\n                        field = DuelView.scan();\r\n                    }\r\n                    if (field.equals(\"My\") || field.equals(\"Rival\")) {\r\n                        destroySpellOrTrap(duelController, field);\r\n                    }\r\n                    SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n                    duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    MYSTICAL_SPACE_TYPHOON(Icon.QUICK_PLAY, \"Target 1 Spell/Trap on the field; destroy that target.\",\r\n            Status.UNLIMITED, 3500) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n                DuelView.printText(\"please type the word \\\"My\\\" or \\\"Rival\\\" to choose a field to destroy the trap or spell\");\r\n                String field = DuelView.scan();\r\n                while (!field.equals(\"cancel\") && !field.equals(\"My\") && !field.equals(\"Rival\")) {\r\n                    DuelView.printText(\"enter \\\"My\\\" or \\\"Rival\\\" to select field\");\r\n                    field = DuelView.scan();\r\n                }\r\n                if (field.equals(\"cancel\")) return false;\r\n                destroySpellOrTrap(duelController, field);\r\n                SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n                duelController.getPlayer().getBoard().removeSpellOrTrap(targetNumber);\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    RING_OF_DEFENSE(Icon.QUICK_PLAY, \"When a Trap effect that inflicts damage is activated: Make that effect \" +\r\n            \"damage 0.\", Status.UNLIMITED, 3500) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    YAMI(Icon.FIELD, \"All Fiend and Spellcaster monsters on the field gain 200 ATK/DEF, also all Fairy monsters\" +\r\n            \" on the field lose 200 ATK/DEF.\", Status.UNLIMITED, 4300) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_FIELDZONE_FACE_UP)) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    MonsterCard playerMonster = duelController.getPlayer().getBoard().getMonsterByNumber(i);\r\n                    MonsterCard rivalMonster = duelController.getRival().getBoard().getMonsterByNumber(i);\r\n                    if (playerMonster != null) {\r\n                        if (playerMonster.getMonsterType().equals(MonsterType.FIEND) || playerMonster.getMonsterType().equals(MonsterType.SPELLCASTER)) {\r\n                            duelController.changePlayerAttackPoint(i, 200);\r\n                            duelController.changePlayerDefencePoint(i, 200);\r\n                        } else if (playerMonster.getMonsterType().equals(MonsterType.FAIRY)) {\r\n                            duelController.changePlayerAttackPoint(i, -200);\r\n                            duelController.changePlayerDefencePoint(i, -200);\r\n                        }\r\n                    }\r\n                    if (rivalMonster != null) {\r\n                        if (rivalMonster.getMonsterType().equals(MonsterType.FIEND) || rivalMonster.getMonsterType().equals(MonsterType.SPELLCASTER)) {\r\n                            duelController.changeRivalAttackPoint(i, 200);\r\n                            duelController.changeRivalDefencePoint(i, 200);\r\n                        } else if (rivalMonster.getMonsterType().equals(MonsterType.FAIRY)) {\r\n                            duelController.changeRivalAttackPoint(i, -200);\r\n                            duelController.changeRivalDefencePoint(i, -200);\r\n                        }\r\n                    }\r\n                }\r\n                SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n            } else if (takeActionCase.equals(TakeActionCase.REMOVE_FROM_FIELDZONE_FACE_UP)) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    MonsterCard playerMonster = duelController.getPlayer().getBoard().getMonsterByNumber(i);\r\n                    MonsterCard rivalMonster = duelController.getRival().getBoard().getMonsterByNumber(i);\r\n                    if (playerMonster != null) {\r\n                        if (playerMonster.getMonsterType().equals(MonsterType.FIEND) || playerMonster.getMonsterType().equals(MonsterType.SPELLCASTER)) {\r\n                            duelController.changePlayerAttackPoint(i, -200);\r\n                            duelController.changePlayerDefencePoint(i, -200);\r\n                        } else if (playerMonster.getMonsterType().equals(MonsterType.FAIRY)) {\r\n                            duelController.changePlayerAttackPoint(i, 200);\r\n                            duelController.changePlayerDefencePoint(i, 200);\r\n                        }\r\n                    }\r\n                    if (rivalMonster != null) {\r\n                        if (rivalMonster.getMonsterType().equals(MonsterType.FIEND) || rivalMonster.getMonsterType().equals(MonsterType.SPELLCASTER)) {\r\n                            duelController.changeRivalAttackPoint(i, -200);\r\n                            duelController.changeRivalDefencePoint(i, -200);\r\n                        } else if (rivalMonster.getMonsterType().equals(MonsterType.FAIRY)) {\r\n                            duelController.changeRivalAttackPoint(i, 200);\r\n                            duelController.changeRivalDefencePoint(i, 200);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    FOREST(Icon.FIELD, \"All Insect, Beast, Plant, and Beast-Warrior monsters on the field gain 200 ATK/DEF.\",\r\n            Status.UNLIMITED, 4300) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_FIELDZONE_FACE_UP)) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    MonsterCard playerMonster = duelController.getPlayer().getBoard().getMonsterByNumber(i);\r\n                    MonsterCard rivalMonster = duelController.getRival().getBoard().getMonsterByNumber(i);\r\n                    if (playerMonster != null) {\r\n                        if (playerMonster.getMonsterType().equals(MonsterType.INSECT) || playerMonster.getMonsterType().equals(MonsterType.BEAST) || playerMonster.getMonsterType().equals(MonsterType.BEAST_WARRIOR)) {\r\n                            duelController.changePlayerAttackPoint(i, 200);\r\n                            duelController.changePlayerDefencePoint(i, 200);\r\n                        }\r\n                    }\r\n                    if (rivalMonster != null) {\r\n                        if (rivalMonster.getMonsterType().equals(MonsterType.INSECT) || rivalMonster.getMonsterType().equals(MonsterType.BEAST) || rivalMonster.getMonsterType().equals(MonsterType.BEAST_WARRIOR)) {\r\n                            duelController.changeRivalAttackPoint(i, 200);\r\n                            duelController.changeRivalDefencePoint(i, 200);\r\n                        }\r\n                    }\r\n                }\r\n                SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n            } else if (takeActionCase.equals(TakeActionCase.REMOVE_FROM_FIELDZONE_FACE_UP)) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    MonsterCard playerMonster = duelController.getPlayer().getBoard().getMonsterByNumber(i);\r\n                    MonsterCard rivalMonster = duelController.getRival().getBoard().getMonsterByNumber(i);\r\n                    if (playerMonster != null) {\r\n                        if (playerMonster.getMonsterType().equals(MonsterType.INSECT) || playerMonster.getMonsterType().equals(MonsterType.BEAST) || playerMonster.getMonsterType().equals(MonsterType.BEAST_WARRIOR)) {\r\n                            duelController.changePlayerAttackPoint(i, -200);\r\n                            duelController.changePlayerDefencePoint(i, -200);\r\n                        }\r\n                    }\r\n                    if (rivalMonster != null) {\r\n                        if (rivalMonster.getMonsterType().equals(MonsterType.INSECT) || rivalMonster.getMonsterType().equals(MonsterType.BEAST) || rivalMonster.getMonsterType().equals(MonsterType.BEAST_WARRIOR)) {\r\n                            duelController.changeRivalAttackPoint(i, -200);\r\n                            duelController.changeRivalDefencePoint(i, -200);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n    },\r\n\r\n    CLOSED_FOREST(Icon.FIELD, \"All Beast-Type monsters you control gain 100 ATK for each monster in your \" +\r\n            \"Graveyard. Field Spell Cards cannot be activated. Field Spell Cards cannot be activated during the turn \" +\r\n            \"this card is destroyed.\", Status.UNLIMITED, 4300) {\r\n        //TODO change graveyard if necessary\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            int amount = 0;\r\n            for (Cardable card : duelController.getPlayer().getBoard().getCardsInGraveyard()) {\r\n                if (card instanceof MonsterCard) {\r\n                    amount++;\r\n                }\r\n            }\r\n            amount = amount * 100;\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_FIELDZONE_FACE_UP)) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    MonsterCard playerMonster = duelController.getPlayer().getBoard().getMonsterByNumber(i);\r\n                    if (playerMonster != null) {\r\n                        if (playerMonster.getMonsterType().equals(MonsterType.BEAST) || playerMonster.getMonsterType().equals(MonsterType.BEAST_WARRIOR)) {\r\n                            duelController.changePlayerAttackPoint(i, amount);\r\n                        }\r\n                    }\r\n                }\r\n                SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n            } else if (takeActionCase.equals(TakeActionCase.REMOVE_FROM_FIELDZONE_FACE_UP)) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    MonsterCard playerMonster = duelController.getPlayer().getBoard().getMonsterByNumber(i);\r\n                    if (playerMonster != null) {\r\n                        if (playerMonster.getMonsterType().equals(MonsterType.BEAST) || playerMonster.getMonsterType().equals(MonsterType.BEAST_WARRIOR)) {\r\n                            duelController.changePlayerAttackPoint(i, -1 * amount);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n    },\r\n\r\n    UMIIRUKA(Icon.FIELD, \"Increase the ATK of all WATER monsters by 500 points and decrease their DEF by 400 \" +\r\n            \"points.\", Status.UNLIMITED, 4300) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_FIELDZONE_FACE_UP)) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    MonsterCard playerMonster = duelController.getPlayer().getBoard().getMonsterByNumber(i);\r\n                    MonsterCard rivalMonster = duelController.getRival().getBoard().getMonsterByNumber(i);\r\n                    if (playerMonster != null) {\r\n                        if (playerMonster.getMonsterType().equals(MonsterType.AQUA)) {\r\n                            duelController.changePlayerAttackPoint(i, 500);\r\n                            duelController.changePlayerDefencePoint(i, -400);\r\n                        }\r\n                    }\r\n                    if (rivalMonster != null) {\r\n                        if (rivalMonster.getMonsterType().equals(MonsterType.AQUA)) {\r\n                            duelController.changeRivalAttackPoint(i, 500);\r\n                            duelController.changeRivalDefencePoint(i, -400);\r\n                        }\r\n                    }\r\n                }\r\n                SPELL_ABSORPTION.takeAction(duelController, TakeActionCase.ANY_SPELL_ACTIVATED, owner, targetNumber);\r\n            } else if (takeActionCase.equals(TakeActionCase.REMOVE_FROM_FIELDZONE_FACE_UP)) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    MonsterCard playerMonster = duelController.getPlayer().getBoard().getMonsterByNumber(i);\r\n                    MonsterCard rivalMonster = duelController.getRival().getBoard().getMonsterByNumber(i);\r\n                    if (playerMonster != null) {\r\n                        if (playerMonster.getMonsterType().equals(MonsterType.AQUA)) {\r\n                            duelController.changePlayerAttackPoint(i, -500);\r\n                            duelController.changePlayerDefencePoint(i, 400);\r\n                        }\r\n                    }\r\n                    if (rivalMonster != null) {\r\n                        if (rivalMonster.getMonsterType().equals(MonsterType.AQUA)) {\r\n                            duelController.changeRivalAttackPoint(i, -500);\r\n                            duelController.changeRivalDefencePoint(i, 400);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n    },\r\n\r\n    //FIXME\r\n    SWORD_OF_DARK_DESTRUCTION(Icon.EQUIP, \"A DARK monster equipped with this card increases its ATK by 400 \" +\r\n            \"points and decreases its DEF by 200 points.\", Status.UNLIMITED, 4300) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    BLACK_PENDANT(Icon.EQUIP, \"The equipped monster gains 500 ATK. When this card is sent from the field to the\" +\r\n            \" Graveyard: Inflict 500 damage to your opponent.\", Status.UNLIMITED, 4300) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    UNITED_WE_STAND(Icon.EQUIP, \"The equipped monster gains 800 ATK/DEF for each face-up monster you control.\",\r\n            Status.UNLIMITED, 4300) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_FIELDZONE_FACE_UP)) {\r\n\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    MAGNUM_SHIELD(Icon.EQUIP, \"Equip only to a Warrior-Type monster. Apply this effect, depending on its battle position.\\n\" +\r\n            \"Attack Position: It gains ATK equal to its original DEF.\\n\" +\r\n            \"Defense Position: It gains DEF equal to its original ATK.\", Status.UNLIMITED, 4300) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n            }\r\n            return true;\r\n        }\r\n    },\r\n\r\n    //FIXME\r\n    ADVANCED_RITUAL_ART(Icon.RITUAL, \"This card can be used to Ritual Summon any 1 Ritual Monster. You must \" +\r\n            \"also send Normal Monsters from your Deck to the Graveyard whose total Levels equal the Level of that Ritual\" +\r\n            \" Monster.\", Status.UNLIMITED, 3000) {\r\n        public boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber) {\r\n            if (takeActionCase.equals(TakeActionCase.PUT_IN_SPELLTRAPZONE)) {\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n\r\n\r\n    private final Icon icon;\r\n\r\n    private final Status status;\r\n    private final String description;\r\n    private final int price;\r\n\r\n    SpellCard(Icon icon, String description, Status status, int price) {\r\n        this.icon = icon;\r\n        this.status = status;\r\n        this.description = description;\r\n        this.price = price;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return this.description;\r\n    }\r\n\r\n    public int getPrice() {\r\n        return this.price;\r\n    }\r\n\r\n    public Icon getIcon() {\r\n        return this.icon;\r\n    }\r\n\r\n    public Status getStatus() {\r\n        return this.status;\r\n    }\r\n\r\n    public String getName() {\r\n        return this.name();\r\n    }\r\n\r\n    public abstract boolean takeAction(DuelController duelController, TakeActionCase takeActionCase, User owner, int targetNumber);\r\n\r\n    public String getNamePascalCase() {\r\n        String name = this.name().charAt(0) + this.name().substring(1).toLowerCase();\r\n        Pattern pattern = Pattern.compile(\"_([a-z])[a-z]+\");\r\n        Matcher matcher = pattern.matcher(name);\r\n        while (matcher.find())\r\n            name = name.replace(\"_\" + matcher.group(1), \"_\" + matcher.group(1).toUpperCase());\r\n        name = name.replaceAll(\"_\", \" \");\r\n        return name;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        String name = this.getNamePascalCase();\r\n        String toReturn = \"Name: \" + name + \"\\n\" +\r\n                \"Spell\" + \"\\n\";\r\n        String type = this.icon.getNamePascalCase();\r\n        toReturn = toReturn + \"Type: \" + type + \"\\n\" +\r\n                \"Description: \" + this.description;\r\n        return toReturn;\r\n    }\r\n\r\n    private static void destroySpellOrTrap(DuelController duelController, String field) {\r\n        ArrayList<Integer> updatedOnBoardSpellOrTrap = new ArrayList<>();\r\n        if (field.equals(\"My\")) {\r\n            for (int i = 1; i <= 5; i++) {\r\n                Cardable notNullSpellOrTrap = duelController.getPlayer().getBoard().getSpellAndTrapByNumber(i - 1);\r\n                if (notNullSpellOrTrap != null)\r\n                    updatedOnBoardSpellOrTrap.add(i);\r\n            }\r\n            DuelView.printText(\"please type the spell or trap's address from your spell zone to be destroyed\");\r\n            String input = DuelView.scan();\r\n            while (!input.matches(\"\\\\d+\") || Integer.parseInt(input) < 1 || Integer.parseInt(input) > 5) {\r\n                DuelView.printText(\"please type the spell or trap's address from your spell zone to be destroyed, between 1 and 5\");\r\n                input = DuelView.scan();\r\n            }\r\n            int myAddress = Integer.parseInt(input);\r\n            while (!(updatedOnBoardSpellOrTrap.contains(myAddress))) {\r\n                DuelView.printText(\"the chosen address is empty\");\r\n                input = DuelView.scan();\r\n                while (!input.matches(\"\\\\d+\") || Integer.parseInt(input) < 1 || Integer.parseInt(input) > 5) {\r\n                    DuelView.printText(\"please type the spell or trap's address from your spell zone to be destroyed\");\r\n                    input = DuelView.scan();\r\n                }\r\n                myAddress = Integer.parseInt(input);\r\n            }\r\n//            Cardable numberOne = duelController.getPlayer().getBoard().getSpellAndTrapByNumber(myAddress);\r\n            duelController.getPlayer().getBoard().removeSpellOrTrap(myAddress - 1);\r\n        } else {\r\n            for (int i = 1; i <= 5; i++) {\r\n                Cardable notNullSpellOrTrap = duelController.getRival().getBoard().getSpellAndTrapByNumber(i - 1);\r\n                if (notNullSpellOrTrap != null)\r\n                    updatedOnBoardSpellOrTrap.add(i);\r\n            }\r\n            DuelView.printText(\"please type the spell or trap's address from your spell zone to be destroyed\");\r\n            String input = DuelView.scan();\r\n            while (!input.matches(\"\\\\d+\") || Integer.parseInt(input) < 1 || Integer.parseInt(input) > 5) {\r\n                DuelView.printText(\"please type the spell or trap's address from your spell zone to be destroyed, between 1 and 5\");\r\n                input = DuelView.scan();\r\n            }\r\n            int myAddress = Integer.parseInt(input);\r\n            while (!(updatedOnBoardSpellOrTrap.contains(myAddress))) {\r\n                DuelView.printText(\"the chosen address is empty\");\r\n                input = DuelView.scan();\r\n                while (!input.matches(\"\\\\d+\") || Integer.parseInt(input) < 1 || Integer.parseInt(input) > 5) {\r\n                    DuelView.printText(\"please type the spell or trap's address from your spell zone to be destroyed\");\r\n                    input = DuelView.scan();\r\n                }\r\n                myAddress = Integer.parseInt(input);\r\n            }\r\n//            Cardable numberOne = duelController.getPlayer().getBoard().getSpellAndTrapByNumber(myAddress);\r\n            duelController.getRival().getBoard().removeSpellOrTrap(myAddress - 1);\r\n        }\r\n        DuelView.printText(\"the chosen spell or trap was destroyed\");\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- src/main/java/model/SpellCard.java	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ src/main/java/model/SpellCard.java	(date 1624635513587)
-@@ -241,7 +241,7 @@
-                 for (int i = 0; i < 5; i++) {
-                     if (duelController.getPlayer().getBoard().getMonsterByNumber(i) != null) {
-                         duelController.getPlayer().getBoard().getMonsterByNumber(i).takeAction(duelController, TakeActionCase.REMOVE_FROM_MONSTERZONE, duelController.getRival(), i);
--                        duelController.getPlayer().getBoard().removeMonster(i);
-+                        duelController.getPlayer().getBoard().removeMonster(i,duelController,duelController.getPlayer());
-                         duelController.setMonsterAttackRival(i, null);
-                     }
-                 }
-@@ -297,12 +297,12 @@
-                 for (int i = 0; i < 5; i++) {
-                     if (duelController.getPlayer().getBoard().getMonsterByNumber(i) != null) {
-                         duelController.getPlayer().getBoard().getMonsterByNumber(i).takeAction(duelController, TakeActionCase.REMOVE_FROM_MONSTERZONE, duelController.getRival(), i);
--                        duelController.getPlayer().getBoard().removeMonster(i);
-+                        duelController.getPlayer().getBoard().removeMonster(i,duelController,duelController.getPlayer());
-                         duelController.setMonsterAttackRival(i, null);
-                     }
-                     if (duelController.getRival().getBoard().getMonsterByNumber(i) != null) {
-                         duelController.getRival().getBoard().getMonsterByNumber(i).takeAction(duelController, TakeActionCase.REMOVE_FROM_MONSTERZONE, duelController.getRival(), i);
--                        duelController.getRival().getBoard().removeMonster(i);
-+                        duelController.getRival().getBoard().removeMonster(i,duelController,duelController.getRival());
-                         duelController.setMonsterAttackPlayer(i, null);
-                     }
-                 }
-Index: src/main/java/model/MonsterAction.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package model;\r\n\r\nimport controller.DuelController;\r\n\r\npublic class MonsterAction {\r\n    private static MonsterAction instance;\r\n\r\n    public static MonsterAction getInstance() {\r\n        if (instance == null) instance = new MonsterAction();\r\n        return instance;\r\n    }\r\n\r\n    public void addToMonsterAttackPoints(DuelController duelController, int amount, TakeActionCase takeActionCase) {\r\n        if (takeActionCase.equals(TakeActionCase.SUMMONED) || takeActionCase.equals(TakeActionCase.FLIP_SUMMONED) || takeActionCase.equals(TakeActionCase.PUT_IN_MONSTERZONE)) {\r\n            duelController.changeAllAttackPoints(1, amount);\r\n        } else if (takeActionCase.equals(TakeActionCase.REMOVE_FROM_MONSTERZONE) || takeActionCase.equals(TakeActionCase.DIED_BY_BEING_ATTACKED)) {\r\n            duelController.changeAllAttackPoints(-1, amount);\r\n        }\r\n    }\r\n\r\n    public boolean canBeAttackedCommandKnight(DuelController duelController,int monsterNumber){\r\n        if (!duelController.getRival().getBoard().getMonsterConditionByNumber(monsterNumber).equals(\"DH\")) {\r\n            for (int i = 0; i < 5; i++) {\r\n                if (i != monsterNumber) {\r\n                    if (duelController.getRival().getBoard().getMonsterByNumber(i) != null && !duelController.getRival().getBoard().getMonsterByNumber(i).equals(MonsterCard.COMMAND_KNIGHT))\r\n                        return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void destroyAttackerYomiShip(DuelController duelController,TakeActionCase takeActionCase){\r\n        if (takeActionCase.equals(TakeActionCase.DIED_BY_BEING_ATTACKED)) {\r\n            duelController.getPlayer().getBoard().putInGraveYard(duelController.getSelectedCard().getCard());\r\n            duelController.getPlayer().getBoard().removeMonster(duelController.getSelectedCard().getNumber());\r\n            duelController.removeMonsterPlayer(duelController.getSelectedCard().getNumber());\r\n        }\r\n    }\r\n\r\n    public void makeAttackerAttackPoint0Suijin(DuelController duelController,TakeActionCase takeActionCase,int targetNumber){\r\n        if (takeActionCase.equals(TakeActionCase.ATTACKED)) {\r\n            int place = duelController.getSelectedCard().getNumber();\r\n            if (!duelController.getHasEnabledSuijin(place)) {\r\n                duelController.setMonsterAttackPlayer(targetNumber, 0);\r\n                duelController.setHasEnabledSuijinTrue(place);\r\n            }\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- src/main/java/model/MonsterAction.java	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ src/main/java/model/MonsterAction.java	(date 1624635513604)
-@@ -34,7 +34,7 @@
-     public void destroyAttackerYomiShip(DuelController duelController,TakeActionCase takeActionCase){
-         if (takeActionCase.equals(TakeActionCase.DIED_BY_BEING_ATTACKED)) {
-             duelController.getPlayer().getBoard().putInGraveYard(duelController.getSelectedCard().getCard());
--            duelController.getPlayer().getBoard().removeMonster(duelController.getSelectedCard().getNumber());
-+            duelController.getPlayer().getBoard().removeMonster(duelController.getSelectedCard().getNumber(),duelController,duelController.getPlayer());
-             duelController.removeMonsterPlayer(duelController.getSelectedCard().getNumber());
-         }
-     }
-Index: src/main/java/Main.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import controller.ImportExportUserController;\r\nimport view.LogInView;\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n        importExportUserController.importAllUsers();\r\n        importExportUserController.importAllCards();\r\n        importExportUserController.importAllDecks();\r\n        LogInView.getInstance().getCommandForLogin();\r\n        /*ArrayList<MonsterTypes> types = new ArrayList<>();\r\n        types.add(MonsterTypes.BEAST);\r\n        types.add(MonsterTypes.CYBERSE);\r\n        types.add(MonsterTypes.BEAST_WARRIOR);\r\n        String typesForPrint;\r\n        for(MonsterTypes eachType : types){\r\n            typesForPrint += eachType.toString().\r\n        }\r\n        String typesForPrint = types.toString().replaceAll(\"\\\\[|\\\\]\",\"\").replaceAll(\", \",\"/\").replaceAll(\"_\",\"-\");\r\n        System.out.println(typesForPrint);\r\n        System.out.println(MonsterType.AQUA);\r\n        String test = \"HELLO_WELCOME_TO_HERE\";\r\n        test = test.charAt(0) + test.substring(1).toLowerCase();\r\n        Pattern pattern = Pattern.compile(\"_([a-z])[a-z]+\");\r\n        Matcher matcher = pattern.matcher(test);\r\n        while (matcher.find())\r\n            test = test.replace(matcher.group(1), matcher.group(1).toUpperCase());\r\n        test = test.replaceAll(\"_\",\" \");\r\n        System.out.println(test);\r\n        System.out.println(Model.Icon.EQUIP);\r\n        System.out.println(MonsterCard.BATTLE_OX.getAttribute());\r\n        Deck deck = new Deck(\"me\");\r\n        Deck deck1 = new Deck(\"ey\");\r\n        Deck deck2 = new Deck(\"mo\");\r\n        ArrayList<Deck> allDecks = new ArrayList<>();\r\n        allDecks.add(deck);\r\n        allDecks.add(deck1);\r\n        allDecks.add(deck2);\r\n        Comparator<Deck> deckComparator = Comparator.comparing(Deck::getDeckName);\r\n        allDecks.sort(deckComparator);\r\n        System.out.println(allDecks);*/\r\n    }\r\n}\r\n/*\r\nuser login -u hamraz -p 123\r\nmenu enter Shop\r\nshop buy Yomi Ship\r\nshop buy Yomi Ship\r\nshop buy Yomi Ship\r\nshop buy Wattaildragon\r\nshop buy Wattaildragon\r\nshop buy Wattaildragon\r\nshop buy Warrior Dai Grepher\r\nshop buy Warrior Dai Grepher\r\nshop buy Warrior Dai Grepher\r\nshop buy Warrior Dai Grepher\r\nshop buy Bitron\r\nshop buy Bitron\r\nshop buy Bitron\r\nshop buy Bitron\r\nshop buy Dark Hole\r\nshop buy Dark Hole\r\nshop buy Dark Hole\r\nshop buy Exploder Dragon\r\nshop buy Exploder Dragon\r\nshop buy Exploder Dragon\r\nshop buy Command Knight\r\nshop buy Command Knight\r\nshop buy Command Knight\r\nshop buy Command Knight\r\nshop buy Curtain Of Dark Ones\r\nshop buy Curtain Of Dark Ones\r\nshop buy Curtain Of Dark Ones\r\nshop buy Curtain Of Dark Ones\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Haniwa\r\nshop buy Haniwa\r\nshop buy Haniwa\r\nshop buy Haniwa\r\nshop buy Horn Imp\r\nshop buy Horn Imp\r\nshop buy Horn Imp\r\nshop buy Horn Imp\r\nshop buy Magic Cylinder\r\nshop buy Magic Cylinder\r\nshop buy Magic Cylinder\r\nshop buy Magic Cylinder\r\nshop buy Mind Crush\r\nshop buy Mind Crush\r\nshop buy Mind Crush\r\nshop buy Mind Crush\r\nshop buy Man Eater Bug\r\nshop buy Man Eater Bug\r\nshop buy Man Eater Bug\r\nshop buy Man Eater Bug\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Supply Squad\r\nshop buy Supply Squad\r\nshop buy Supply Squad\r\nshop buy Supply Squad\r\nbuy card Sword Of Revealing Light\r\nshop buy Sword Of Revealing Light\r\nshop buy Sword Of Revealing Light\r\nshop buy Sword Of Revealing Light\r\nshop buy Supply Squad\r\nshop buy Supply Squad\r\nshop buy Supply Squad\r\nshop buy Trap Hole\r\nshop buy Trap Hole\r\nshop buy Trap Hole\r\nshop buy Spell Absorption\r\nshop buy Spell Absorption\r\nshop buy Spell Absorption\r\nshop buy Leotron\r\nshop buy Leotron\r\nshop buy Leotron\r\nshop buy Leotron\r\nshop buy United We Stand\r\nshop buy United We Stand\r\nshop buy United We Stand\r\nmenu exit\r\nmenu enter Deck\r\ndeck create one\r\ndeck add-card -c United We Stand -d one\r\ndeck add-card -c United We Stand -d one\r\ndeck add-card -c United We Stand -d one\r\ndeck add-card -c United We Stand -d one\r\ndeck add-card -c Leotron -d one\r\ndeck add-card -c Leotron -d one\r\ndeck add-card -c Leotron -d one\r\ndeck add-card -c Leotron -d one\r\ndeck add-card -c Leotron -d one -s\r\ndeck add-card -c Silver Fang -d one -s\r\ndeck add-card -c Silver Fang -d one –s\r\ndeck add-card -c Silver Fang -d one -s\r\ndeck add-card -c Silver Fang -d one -s\r\ndeck add-card -c Silver Fang -d one -s\r\ndeck add-card -c Spell Absorption -d one -s\r\ndeck add-card -c Spell Absorption -d one -s\r\ndeck add-card -c Spell Absorption -d one -s\r\ndeck add-card -c Spell Absorption -d one -s\r\ndeck add-card -c Trap Hole -d one -s\r\ndeck add-card -c Trap Hole -d one -s\r\ndeck add-card -c Trap Hole -d one -s\r\ndeck add-card -c Trap Hole -d one -s\r\ndeck add-card -c shop buy Supply Squad\r\ndeck add-card -c Supply Squad -d one -s\r\ndeck add-card -c Supply Squad -d one -s\r\ndeck add-card -c Supply Squad -d one -s\r\ndeck add-card -c Sword Of Revealing Light -d one -s\r\ndeck add-card -c Sword Of Revealing Light -d one -s\r\ndeck add-card -c Sword Of Revealing Light -d one -s\r\ndeck add-card -c Sword Of Revealing Light -d one -s\r\ncard with name Sword Of Revealing Light does not exist\r\ndeck add-card -c Supply Squad -d one -s\r\ndeck add-card -c Supply Squad -d one\r\ndeck add-card -c Silver Fang -d one\r\ndeck add-card -c Man Eater Bug -d one\r\ndeck add-card -c Man Eater Bug -d one\r\ndeck add-card -c Man Eater Bug -d one\r\ndeck add-card -c Man Eater Bug -d one\r\ndeck add-card -c Mind Crush -d one\r\ndeck add-card -c Mind Crush -d one\r\ndeck add-card -c Mind Crush -d one\r\ndeck add-card -c Mind Crush -d one\r\ndeck add-card -c Magic Cylinder -d one\r\ndeck add-card -c Magic Cylinder -d one\r\ndeck add-card -c Magic Cylinder -d one\r\ndeck add-card -c Magic Cylinder -d one\r\ndeck show --all\r\ndeck add-card -c Horn Imp -d one\r\ndeck add-card -c Horn Imp -d one\r\ndeck add-card -c Horn Imp -d one\r\ndeck add-card Haniwa -d one\r\ndeck add-card -c Haniwa -d one\r\ndeck add-card -c Haniwa -d one\r\ndeck add-card -c Haniwa -d one\r\ndeck add-card -c Haniwa -d one\r\ndeck show --all\r\ndeck add-card -c Curtain Of Dark Ones -d one\r\ndeck add-card -c Curtain Of Dark Ones -d one\r\ndeck add-card -c Curtain Of Dark Ones -d one\r\ndeck add-card -c Curtain Of Dark Ones -d one\r\ndeck add-card -c Command Knight -d one\r\ndeck add-card -c Command Knight -d one\r\ndeck add-card -c Command Knight -d one\r\ndeck add-card -c Command Knight -d one\r\ndeck add-card -c Exploder Dragon -d one\r\ndeck add-card -c Exploder Dragon -d one\r\ndeck add-card -c Exploder Dragon -d one\r\ndeck add-card -c Exploder Dragon -d one\r\ndeck add-card -c Dark Hole -d one\r\ndeck add-card -c Dark Hole -d one\r\ndeck add-card -c Dark Hole -d one\r\ndeck add-card -c Dark Hole -d one\r\ndeck add-card -c Bitron -d one\r\ndeck add-card -c Bitron -d one\r\ndeck add-card -c Bitron -d one\r\ndeck add-card -c Bitron -d one\r\ndeck add-card -c Bitron -d one\r\ndeck add-card -c Warrior Dai Grepher -d one\r\ndeck add-card -c Warrior Dai Grepher -d one\r\ndeck add-card -c Warrior Dai Grepher -d one\r\ndeck add-card -c Warrior Dai Grepher -d one\r\ndeck add-card -c Wattaildragon -d one\r\ndeck add-card -c Wattaildragon -d one\r\ndeck add-card -c Wattaildragon -d one\r\ndeck show --all\r\ndeck add-card -c Yomi Ship -d one\r\ndeck add-card -c Yomi Ship -d one\r\ndeck add-card -c Yomi Ship -d one\r\ndeck add-card -c Yomi Ship -d one\r\ndeck add-card -c Yami -d one\r\ndeck add-card -c Yami -d one\r\ndeck add-card -c Yami -d one\r\ndeck add-card -c Yami -d one\r\ndeck show --all\r\nmenu exit\r\nmenu enter Shop\r\nshop buy Yami\r\nshop buy Yami\r\nmenu exit\r\nmenu enter Deck\r\ndeck add-card -c Yami -d one\r\ndeck show –-all\r\ndeck set-activate one\r\nmenu exit\r\nuser logout\r\nuser login -u parmida -p 1234\r\nedoCtaehc yenom 1000000\r\nmenu enter Shop\r\nshop buy Yomi Ship\r\nshop buy Yomi Ship\r\nshop buy Yomi Ship\r\nshop buy Wattaildragon\r\nshop buy Wattaildragon\r\nshop buy Wattaildragon\r\nshop buy Warrior Dai Grepher\r\nshop buy Warrior Dai Grepher\r\nshop buy Warrior Dai Grepher\r\nshop buy Warrior Dai Grepher\r\nshop buy Bitron\r\nshop buy Bitron\r\nshop buy Bitron\r\nshop buy Bitron\r\nshop buy Dark Hole\r\nshop buy Dark Hole\r\nshop buy Dark Hole\r\nshop buy Exploder Dragon\r\nshop buy Exploder Dragon\r\nshop buy Exploder Dragon\r\nshop buy Command Knight\r\nshop buy Command Knight\r\nshop buy Command Knight\r\nshop buy Command Knight\r\nshop buy Curtain Of Dark Ones\r\nshop buy Curtain Of Dark Ones\r\nshop buy Curtain Of Dark Ones\r\nshop buy Curtain Of Dark Ones\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Haniwa\r\nshop buy Haniwa\r\nshop buy Haniwa\r\nshop buy Haniwa\r\nshop buy Horn Imp\r\nshop buy Horn Imp\r\nshop buy Horn Imp\r\nshop buy Horn Imp\r\nshop buy Magic Cylinder\r\nshop buy Magic Cylinder\r\nshop buy Magic Cylinder\r\nshop buy Magic Cylinder\r\nshop buy Mind Crush\r\nshop buy Mind Crush\r\nshop buy Mind Crush\r\nshop buy Mind Crush\r\nshop buy Man Eater Bug\r\nshop buy Man Eater Bug\r\nshop buy Man Eater Bug\r\nshop buy Man Eater Bug\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Silver Fang\r\nshop buy Supply Squad\r\nshop buy Supply Squad\r\nshop buy Supply Squad\r\nshop buy Supply Squad\r\nbuy card Sword Of Revealing Light\r\nshop buy Sword Of Revealing Light\r\nshop buy Sword Of Revealing Light\r\nshop buy Sword Of Revealing Light\r\nshop buy Supply Squad\r\nshop buy Supply Squad\r\nshop buy Supply Squad\r\nshop buy Trap Hole\r\nshop buy Trap Hole\r\nshop buy Trap Hole\r\nshop buy Spell Absorption\r\nshop buy Spell Absorption\r\nshop buy Spell Absorption\r\nshop buy Leotron\r\nshop buy Leotron\r\nshop buy Leotron\r\nshop buy Leotron\r\nshop buy United We Stand\r\nshop buy United We Stand\r\nshop buy United We Stand\r\nmenu exit\r\nmenu enter Deck\r\ndeck create oneParmida\r\ndeck add-card -c United We Stand -d oneParmida\r\ndeck add-card -c United We Stand -d oneParmida\r\ndeck add-card -c United We Stand -d oneParmida\r\ndeck add-card -c United We Stand -d oneParmida\r\ndeck add-card -c Leotron -d oneParmida\r\ndeck add-card -c Leotron -d oneParmida\r\ndeck add-card -c Leotron -d oneParmida\r\ndeck add-card -c Leotron -d oneParmida\r\ndeck add-card -c Leotron -d oneParmida -s\r\ndeck add-card -c Silver Fang -d oneParmida -s\r\ndeck add-card -c Silver Fang -d oneParmida –s\r\ndeck add-card -c Silver Fang -d oneParmida -s\r\ndeck add-card -c Silver Fang -d oneParmida -s\r\ndeck add-card -c Silver Fang -d oneParmida -s\r\ndeck add-card -c Spell Absorption -d oneParmida -s\r\ndeck add-card -c Spell Absorption -d oneParmida -s\r\ndeck add-card -c Spell Absorption -d oneParmida -s\r\ndeck add-card -c Spell Absorption -d oneParmida -s\r\ndeck add-card -c Trap Hole -d oneParmida -s\r\ndeck add-card -c Trap Hole -d oneParmida -s\r\ndeck add-card -c Trap Hole -d oneParmida -s\r\ndeck add-card -c Trap Hole -d oneParmida -s\r\ndeck add-card -c Supply Squad -d oneParmida -s\r\ndeck add-card -c Supply Squad -d oneParmida -s\r\ndeck add-card -c Supply Squad -d oneParmida -s\r\ndeck add-card -c Sword Of Revealing Light -d oneParmida -s\r\ndeck add-card -c Sword Of Revealing Light -d oneParmida -s\r\ndeck add-card -c Sword Of Revealing Light -d oneParmida -s\r\ndeck add-card -c Sword Of Revealing Light -d oneParmida -s\r\ndeck add-card -c Supply Squad -d oneParmida -s\r\ndeck add-card -c Supply Squad -d oneParmida\r\ndeck add-card -c Silver Fang -d oneParmida\r\ndeck add-card -c Man Eater Bug -d oneParmida\r\ndeck add-card -c Man Eater Bug -d oneParmida\r\ndeck add-card -c Man Eater Bug -d oneParmida\r\ndeck add-card -c Man Eater Bug -d oneParmida\r\ndeck add-card -c Mind Crush -d oneParmida\r\ndeck add-card -c Mind Crush -d oneParmida\r\ndeck add-card -c Mind Crush -d oneParmida\r\ndeck add-card -c Mind Crush -d oneParmida\r\ndeck add-card -c Magic Cylinder -d oneParmida\r\ndeck add-card -c Magic Cylinder -d oneParmida\r\ndeck add-card -c Magic Cylinder -d oneParmida\r\ndeck add-card -c Magic Cylinder -d oneParmida\r\ndeck show --all\r\ndeck add-card -c Horn Imp -d oneParmida\r\ndeck add-card -c Horn Imp -d oneParmida\r\ndeck add-card -c Horn Imp -d oneParmida\r\ndeck add-card Haniwa -d oneParmida\r\ndeck add-card -c Haniwa -d oneParmida\r\ndeck add-card -c Haniwa -d oneParmida\r\ndeck add-card -c Haniwa -d oneParmida\r\ndeck add-card -c Haniwa -d oneParmida\r\ndeck show --all\r\ndeck add-card -c Curtain Of Dark Ones -d oneParmida\r\ndeck add-card -c Curtain Of Dark Ones -d oneParmida\r\ndeck add-card -c Curtain Of Dark Ones -d oneParmida\r\ndeck add-card -c Curtain Of Dark Ones -d oneParmida\r\ndeck add-card -c Command Knight -d oneParmida\r\ndeck add-card -c Command Knight -d oneParmida\r\ndeck add-card -c Command Knight -d oneParmida\r\ndeck add-card -c Command Knight -d oneParmida\r\ndeck add-card -c Exploder Dragon -d oneParmida\r\ndeck add-card -c Exploder Dragon -d oneParmida\r\ndeck add-card -c Exploder Dragon -d oneParmida\r\ndeck add-card -c Exploder Dragon -d oneParmida\r\ndeck add-card -c Dark Hole -d oneParmida\r\ndeck add-card -c Dark Hole -d oneParmida\r\ndeck add-card -c Dark Hole -d oneParmida\r\ndeck add-card -c Dark Hole -d oneParmida\r\ndeck add-card -c Bitron -d oneParmida\r\ndeck add-card -c Bitron -d oneParmida\r\ndeck add-card -c Bitron -d oneParmida\r\ndeck add-card -c Bitron -d oneParmida\r\ndeck add-card -c Bitron -d oneParmida\r\ndeck add-card -c Warrior Dai Grepher -d oneParmida\r\ndeck add-card -c Warrior Dai Grepher -d oneParmida\r\ndeck add-card -c Warrior Dai Grepher -d oneParmida\r\ndeck add-card -c Warrior Dai Grepher -d oneParmida\r\ndeck add-card -c Wattaildragon -d oneParmida\r\ndeck add-card -c Wattaildragon -d oneParmida\r\ndeck add-card -c Wattaildragon -d oneParmida\r\ndeck show --all\r\ndeck add-card -c Yomi Ship -d oneParmida\r\ndeck add-card -c Yomi Ship -d oneParmida\r\ndeck add-card -c Yomi Ship -d oneParmida\r\ndeck add-card -c Yomi Ship -d oneParmida\r\ndeck add-card -c Yami -d oneParmida\r\ndeck add-card -c Yami -d oneParmida\r\ndeck add-card -c Yami -d oneParmida\r\ndeck add-card -c Yami -d oneParmida\r\ndeck show --all\r\nmenu exit\r\nmenu enter Shop\r\nshop buy Yami\r\nshop buy Yami\r\nmenu exit\r\nmenu enter Deck\r\ndeck add-card -c Yami -d oneParmida\r\nmenu show-current\r\ndeck show --all\r\ndeck set-activate oneParmida\r\nmenu exit\r\nduel -n -r 3 -sp hamraz\r\nnext phase\r\nselect -h 2\r\nset\r\nselect -m 1\r\ncard show -s\r\n */
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- src/main/java/Main.java	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ src/main/java/Main.java	(date 1624633499191)
-@@ -1,12 +1,12 @@
--import controller.ImportExportUserController;
-+//import controller.ImportExportUserController;
- import view.LogInView;
- public class Main {
- 
-     public static void main(String[] args) {
--        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();
--        importExportUserController.importAllUsers();
--        importExportUserController.importAllCards();
--        importExportUserController.importAllDecks();
-+//        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();
-+//        importExportUserController.importAllUsers();
-+//        importExportUserController.importAllCards();
-+//        importExportUserController.importAllDecks();
-         LogInView.getInstance().getCommandForLogin();
-         /*ArrayList<MonsterTypes> types = new ArrayList<>();
-         types.add(MonsterTypes.BEAST);
-@@ -42,7 +42,10 @@
-     }
- }
- /*
-+user create -u hamraz -p 123 -n hamraz
-+user create -u parmida -p 1234 -n parmida
- user login -u hamraz -p 123
-+edoCtaehc yenom 1000000
- menu enter Shop
- shop buy Yomi Ship
- shop buy Yomi Ship
-@@ -421,10 +424,6 @@
- deck show --all
- deck set-activate oneParmida
- menu exit
--duel -n -r 3 -sp hamraz
-+duel -n -sp hamraz -r 3
- next phase
--select -h 2
--set
--select -m 1
--card show -s
-  */
-\ No newline at end of file
-Index: src/main/java/controller/DuelController.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package controller;\r\n\r\nimport controller.exeption.*;\r\nimport model.*;\r\nimport view.DuelView;\r\n\r\nimport java.util.*;\r\n\r\npublic class DuelController {\r\n\r\n    public static final int[] playerGroundNumbers = {3, 4, 2, 5, 1};\r\n    public static final int[] opponentGroundNumbers = {3, 2, 4, 1, 5};\r\n    private User player;\r\n    private User rival;\r\n    private Round[] rounds;\r\n    private final int roundNumber;\r\n    private SelectedCard selectedCard;\r\n    private int roundCounter;\r\n    private Phase phase;\r\n    private boolean hasSummonedOrSetInThisTurn;\r\n    private ArrayList<ArrayList<ActionsDoneInTurn>> actionsOnThisCardPlayer = new ArrayList<>(5);\r\n    //    private ArrayList<ArrayList<ActionsDoneInTurn>> actionsOnThisCardRival=new ArrayList<>(5);\r\n    private Integer[] playerAttackPoints = new Integer[5];\r\n    private Integer[] rivalAttackPoints = new Integer[5];\r\n    private Integer[] playerDefencePoints = new Integer[5];\r\n    private Integer[] rivalDefencePoints = new Integer[5];\r\n    /*private boolean hasUsedHeraldInThisTurn;\r\n    private boolean hasUsedTexChangerInThisTurn;*/\r\n    /*boolean[] hasChangedPositionInThisTurn;\r\n    boolean[] hasSetInThisTurn;\r\n    boolean[] hasAttackedInThisTurn;*/\r\n//    MonsterZone monsterZone;\r\n    boolean isStartTurn;\r\n    private boolean shouldEndGameForView;\r\n    //TODO check frequently: cancel, unselect, printBoard\r\n\r\n    public DuelController(User player, User rival, int roundNumber) {\r\n        this.player = player;\r\n        this.rival = rival;\r\n        setGameDeck(this.player);\r\n        setGameDeck(this.rival);\r\n        this.rounds = new Round[roundNumber];\r\n        this.roundNumber = roundNumber;\r\n        this.roundCounter = 0;\r\n//        this.monsterZone = new MonsterZone(this);\r\n        newActionsOnThisCardPlayer();\r\n        startNewGame(null);\r\n    }\r\n\r\n    private void newActionsOnThisCardPlayer() {\r\n        ArrayList<ActionsDoneInTurn> arrayList = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            this.actionsOnThisCardPlayer.add(arrayList);\r\n        }\r\n    }\r\n\r\n    private void setGameDeck(User user) {\r\n        Deck deck;\r\n        if (user.getDeckByName(\"@\" + user.getActiveDeck().getDeckName()) == null) {\r\n            deck = new Deck(\"@\" + user.getActiveDeck().getDeckName());\r\n        } else {\r\n            deck = user.getDeckByName(\"@\" + user.getActiveDeck().getDeckName());\r\n            user.removeDeck(deck);\r\n        }\r\n        ArrayList<Cardable> mainCards = new ArrayList<>(user.getActiveDeck().getMainDeck());\r\n        ArrayList<Cardable> sideCards = new ArrayList<>(user.getActiveDeck().getSideDeck());\r\n        deck.setDeck(mainCards, sideCards);\r\n        user.addDeck(deck);\r\n        user.setGameDeck(deck);\r\n    }\r\n\r\n    public User getPlayer() {\r\n        return this.player;\r\n    }\r\n\r\n    public User getRival() {\r\n        return this.rival;\r\n    }\r\n\r\n    public void setPlayer(User player) {\r\n        this.player = player;\r\n    }\r\n\r\n    public void setRival(User rival) {\r\n        this.rival = rival;\r\n    }\r\n\r\n    public boolean getHasEnabledSuijin(int i) {\r\n        return actionsOnThisCardPlayer.get(i).contains(ActionsDoneInTurn.ENABLE_SUIJIN);\r\n    }\r\n\r\n    public void setHasEnabledSuijinTrue(int i) {\r\n        actionsOnThisCardPlayer.get(i).add(ActionsDoneInTurn.ENABLE_SUIJIN);\r\n    }\r\n\r\n    public void setMonsterAttackPlayer(int i, Integer number) {\r\n        this.playerAttackPoints[i] = number;\r\n    }\r\n\r\n    public void setMonsterAttackRival(int i, Integer number) {\r\n        this.rivalAttackPoints[i] = number;\r\n    }\r\n\r\n    /*public MonsterZone getMonsterZone() {\r\n        return this.monsterZone;\r\n    }*/\r\n\r\n    public SelectedCard getSelectedCard() {\r\n        return this.selectedCard;\r\n    }\r\n\r\n    public boolean getShouldEndGameForView() {\r\n        return this.shouldEndGameForView;\r\n    }\r\n\r\n    public static int[] getOpponentGroundNumbers() {\r\n        return opponentGroundNumbers;\r\n    }\r\n\r\n    public static int[] getPlayerGroundNumbers() {\r\n        return playerGroundNumbers;\r\n    }\r\n\r\n\r\n    /*public boolean getHasUsedHeraldInThisTurn() {\r\n        return this.hasUsedHeraldInThisTurn;\r\n    }\r\n\r\n    public void setHasHasUsedHeraldInThisTurnTrue() {\r\n        this.hasUsedHeraldInThisTurn = true;\r\n    }\r\n\r\n    public boolean getHasUsedTexChangerInThisTurn() {\r\n        return this.hasUsedTexChangerInThisTurn;\r\n    }\r\n\r\n    public void setHasUsedTexChangerInThisTurn() {\r\n        this.hasUsedTexChangerInThisTurn = true;\r\n    }*/\r\n\r\n    //TODO age vaght shod choose first player random\r\n    public void startNewGame(User winner) {\r\n        if (winner != null) {\r\n            User loser;\r\n            if (winner.equals(this.player)) {\r\n                loser = this.rival;\r\n            } else {\r\n                loser = this.player;\r\n            }\r\n            this.player = loser;\r\n            this.rival = winner;\r\n        } else this.isStartTurn = true;\r\n        this.player.setLifePoint(8000);\r\n        this.rival.setLifePoint(8000);\r\n        this.player.setNewBoard();\r\n        this.rival.setNewBoard();\r\n        clearLastTurn();\r\n        startDrawPhase();\r\n    }\r\n\r\n    public void selectCardPlayerMonsterZone(int address) throws Exception {\r\n        MonsterCard[] monsters = this.player.getBoard().getMonsters();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (monsters[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(address), BoardZone.MONSTERZONE, address, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentMonsterZone(int address) throws Exception {\r\n        MonsterCard[] monsters = this.rival.getBoard().getMonsters();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = opponentGroundNumbers[address - 1] - 1;\r\n        if (monsters[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getMonsterByNumber(address), BoardZone.MONSTERZONE, address, this.rival);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerTrapAndSpellZone(int address) throws Exception {\r\n        Cardable[] spellAndTrap = this.player.getBoard().getSpellsAndTraps();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (spellAndTrap[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getSpellAndTrapByNumber(address), BoardZone.SPELLANDTRAPZONE, address, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentTrapAndSpellZone(int address) throws Exception {\r\n        Cardable[] spellAndTrap = this.rival.getBoard().getSpellsAndTraps();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = opponentGroundNumbers[address - 1] - 1;\r\n        if (spellAndTrap[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getSpellAndTrapByNumber(address), BoardZone.SPELLANDTRAPZONE, address, this.rival);\r\n\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerFieldZone() throws Exception {\r\n        Cardable fieldZone = this.player.getBoard().getFieldZone();\r\n        if (fieldZone == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getFieldZone(), BoardZone.FIELDZONE, 1, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentFieldZone() throws Exception {\r\n        Cardable fieldZone = this.player.getBoard().getFieldZone();\r\n        if (fieldZone == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getFieldZone(), BoardZone.FIELDZONE, 1, this.rival);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerHand(int address) throws Exception {\r\n        List<Cardable> cardsInHand = this.player.getBoard().getCardsInHand();\r\n        if ((address > cardsInHand.size()) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        } else if (cardsInHand.get(address - 1) == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        }\r\n        this.selectedCard = new SelectedCard(this.player.getBoard().getCardInHandByNumber(address - 1), BoardZone.HAND, address - 1, this.player);\r\n//        System.out.println(selectedCard.getNumber());\r\n        DuelView.printText(\"card selected\");\r\n    }\r\n\r\n    private void unselectCard() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else {\r\n            this.selectedCard = null;\r\n        }\r\n    }\r\n\r\n    public void setSelectedCard(SelectedCard selectedCard) {\r\n        this.selectedCard = selectedCard;\r\n    }\r\n\r\n    public void unselectCardFromCommand() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else {\r\n            this.selectedCard = null;\r\n            DuelView.printText(\"card deselected\");\r\n        }\r\n    }\r\n\r\n    public int getCountOfMonsterCardsInGround(User user) {\r\n        MonsterCard[] monsterCards = user.getBoard().getMonsters();\r\n        int countOfMonsterCardsInGround = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            if (monsterCards[i] != null) {\r\n                countOfMonsterCardsInGround++;\r\n            }\r\n        }\r\n        return countOfMonsterCardsInGround;\r\n    }\r\n\r\n    public void summonMonster() throws Exception {\r\n        //TODO special va ritual summon\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        }\r\n        //TODO in exception payinie halate \"مد نظر قابلیت احضار عادی را نداشته باشد monster\" ro nadare hanooz(fekr konam dare alan)\r\n        if (!(this.selectedCard.getCard() instanceof MonsterCard && this.selectedCard.getBoardZone().equals(BoardZone.HAND) && !((MonsterCard) this.selectedCard.getCard()).getCardType().equals(CardType.RITUAL))) {\r\n            throw new CanNotSummon();\r\n        }\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2)))) {\r\n            throw new ActionNotAllowedInThisPhase();\r\n        }\r\n        if (this.player.getBoard().isFullMonsterZone()) {\r\n            throw new FullMonsterZone();\r\n        }\r\n        if (((MonsterCard) this.selectedCard.getCard()).getCanBeNormalSummoned()) {\r\n            if (hasSummonedOrSetInThisTurn) {\r\n                throw new AlreadySummoned();\r\n            }\r\n            MonsterCard monsterCard = (MonsterCard) selectedCard.getCard();\r\n            if (monsterCard.getLevel() <= 4) {\r\n                this.player.getBoard().putMonster(monsterCard, \"OO\");\r\n                monsterCard.takeAction(this, TakeActionCase.SUMMONED, this.player, this.selectedCard.getNumber());\r\n                this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n                unselectCard();\r\n                DuelView.printText(\"summoned successfully\");\r\n                printBoard();\r\n                hasSummonedOrSetInThisTurn = true;\r\n                return;\r\n            }\r\n            if (monsterCard.getLevel() < 7) {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 1) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeOneMonsterForSummon();\r\n                }\r\n            } else {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 2) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeTwoMonstersForSummon();\r\n                }\r\n            }\r\n        } else if (!((MonsterCard) this.selectedCard.getCard()).getCardType().equals(CardType.RITUAL)) {\r\n            specialSummonNormal();\r\n        }\r\n    }\r\n\r\n    private void tributeOneMonsterForSummon() throws Exception {\r\n        String input = DuelView.scan();\r\n        if (input.equals(\"cancel\")) return;\r\n        int address = Integer.parseInt(input);\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address) == null) throw new NoMonsterHere1();\r\n        this.player.getBoard().removeMonster(address);\r\n        removeMonsterPlayer(address);\r\n        this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"OO\");\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.SUMMONED, this.player, this.selectedCard.getNumber());\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"summoned successfully\");\r\n        printBoard();\r\n        hasSummonedOrSetInThisTurn = true;\r\n    }\r\n\r\n    private void tributeTwoMonstersForSummon() throws Exception {\r\n        String input1 = DuelView.scan();\r\n        if (input1.equals(\"cancel\")) return;\r\n        int address1 = Integer.parseInt(input1) - 1;\r\n        address1 = playerGroundNumbers[address1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address1) == null) throw new NoMonsterHere1();\r\n        String input2 = DuelView.scan();\r\n        if (input2.equals(\"cancel\")) return;\r\n        int address2 = Integer.parseInt(input2) - 1;\r\n        address2 = playerGroundNumbers[address2] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address2) == null) throw new NoMonsterHere1();\r\n        if (address1 == address2) throw new sameAddresses();\r\n        this.player.getBoard().removeMonster(address1);\r\n        this.player.getBoard().removeMonster(address2);\r\n        removeMonsterPlayer(address1);\r\n        removeMonsterPlayer(address2);\r\n        this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"OO\");\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.SUMMONED, this.player, this.selectedCard.getNumber());\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"summoned successfully\");\r\n        printBoard();\r\n        hasSummonedOrSetInThisTurn = true;\r\n    }\r\n\r\n    public void specialSummonNormal() throws Exception {\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.SPECIAL_SUMMONED, this.player, this.selectedCard.getNumber());\r\n\r\n    }\r\n\r\n    private void specialSummonWithSpell() throws Exception {\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.HAND)) {\r\n            throw new CanNotSpecialSummon();\r\n        }\r\n        /*if (*//*hayula special summon nashod*//*) {\r\n        DuelView.printText(\"you should special summon right now\");\r\n        special summon kone\r\n        }*/\r\n    }\r\n\r\n    public void preSet() throws Exception {\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!(this.selectedCard.getBoardZone().equals(BoardZone.HAND))) throw new CanNotSet();\r\n        if (this.selectedCard.getCard() instanceof MonsterCard) setMonster();\r\n        else if (this.selectedCard.getCard() instanceof SpellCard) setSpell();\r\n        else if (this.selectedCard.getCard() instanceof TrapCard) setTrap();\r\n    }\r\n\r\n    private void setMonster() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2)))) {\r\n            throw new ImproperPhase();\r\n        }\r\n        if (this.player.getBoard().isFullMonsterZone()) {\r\n            throw new FullMonsterZone();\r\n        }\r\n        if (hasSummonedOrSetInThisTurn) {\r\n            throw new AlreadySummoned();\r\n        }\r\n        MonsterCard monsterCard = (MonsterCard) this.selectedCard.getCard();\r\n        if (monsterCard.getLevel() <= 4) {\r\n            this.actionsOnThisCardPlayer.get(this.player.getBoard().putMonster(monsterCard, \"DH\")).add(ActionsDoneInTurn.SET);\r\n//            monsterZone.setHasSetInThisTurn(this.player.getBoard().putMonster(monsterCard, \"DH\"), true);\r\n            this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n            unselectCard();\r\n            DuelView.printText(\"set successfully\");\r\n            hasSummonedOrSetInThisTurn = true;\r\n            printBoard();\r\n            return;\r\n        }\r\n        if (monsterCard.getLevel() < 7) {\r\n            if (getCountOfMonsterCardsInGround(this.player) < 1) {\r\n                throw new InsufficientForTribute();\r\n            } else {\r\n                tributeOneMonsterForSet();\r\n            }\r\n        } else {\r\n            if (getCountOfMonsterCardsInGround(this.player) < 2) {\r\n                throw new InsufficientForTribute();\r\n            } else {\r\n                tributeTwoMonstersForSet();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void tributeOneMonsterForSet() throws Exception {\r\n        String input = DuelView.scan();\r\n        if (input.equals(\"cancel\")) return;\r\n        int address = Integer.parseInt(input);\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address) == null) throw new NoMonsterHere1();\r\n        this.player.getBoard().removeMonster(address);\r\n        removeMonsterPlayer(address);\r\n        this.actionsOnThisCardPlayer.get(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\")).add(ActionsDoneInTurn.SET);\r\n//        monsterZone.setHasSetInThisTurn(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\"), true);\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        hasSummonedOrSetInThisTurn = true;\r\n        printBoard();\r\n    }\r\n\r\n    private void tributeTwoMonstersForSet() throws Exception {\r\n        String input1 = DuelView.scan();\r\n        if (input1.equals(\"cancel\")) return;\r\n        int address1 = Integer.parseInt(input1);\r\n        address1 = playerGroundNumbers[address1 - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address1) == null) throw new NoMonsterHere1();\r\n        String input2 = DuelView.scan();\r\n        if (input2.equals(\"cancel\")) return;\r\n        int address2 = Integer.parseInt(input2);\r\n        address2 = playerGroundNumbers[address2 - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address2) == null) throw new NoMonsterHere1();\r\n        if (address1 == address2) throw new sameAddresses();\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        this.player.getBoard().removeMonster(address1);\r\n        this.player.getBoard().removeMonster(address2);\r\n        removeMonsterPlayer(address1);\r\n        removeMonsterPlayer(address2);\r\n        this.actionsOnThisCardPlayer.get(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\")).add(ActionsDoneInTurn.SET);\r\n//        monsterZone.setHasSetInThisTurn(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\"), true);\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        hasSummonedOrSetInThisTurn = true;\r\n        printBoard();\r\n    }\r\n\r\n    private void setSpell() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new ImproperPhase();\r\n        SpellCard spellCard = (SpellCard) this.selectedCard.getCard();\r\n        if (!spellCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().isFullSpellAndTrapZone())\r\n                throw new FullSpellZone();\r\n            this.player.getBoard().putSpellOrTrap(spellCard, \"H\");\r\n        } else {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            this.player.getBoard().putInFieldZone(spellCard);\r\n        }\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        printBoard();\r\n    }\r\n\r\n    private void setTrap() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new ImproperPhase();\r\n        TrapCard trapCard = (TrapCard) this.selectedCard.getCard();\r\n        if (!trapCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().isFullSpellAndTrapZone()) {\r\n                throw new FullSpellZone();\r\n            }\r\n            this.player.getBoard().putSpellOrTrap(trapCard, \"H\");\r\n        } else {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            this.player.getBoard().putInFieldZone(trapCard);\r\n        }\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        printBoard();\r\n    }\r\n\r\n    public void changePosition(String targetPosition) throws Exception {\r\n        String targetPositionInShort = \"\";\r\n        switch (targetPosition) {\r\n            case \"attack\":\r\n                targetPositionInShort = \"OO\";\r\n                break;\r\n            case \"defence\":\r\n                targetPositionInShort = \"DO\";\r\n                break;\r\n        }\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) || this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\"))\r\n            throw new CanNotChangePosition();\r\n        if (!(this.phase.equals(Phase.MAIN_PHASE1) || (this.phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new CantDoActionInThisPhase();\r\n        if (this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(targetPositionInShort) || this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\"))\r\n            throw new AlreadyInWantedPosition();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.CHANGE_POSITION))\r\n            throw new AlreadyChangedPosition();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.ATTACK) && this.phase.equals(Phase.MAIN_PHASE2))\r\n            throw new HasAttackedInBattle();\r\n        this.player.getBoard().changeMonsterPosition(this.selectedCard.getNumber(), targetPositionInShort);\r\n        actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.CHANGE_POSITION);\r\n//        monsterZone.setHasChangedPositionInThisTurn(this.selectedCard.getNumber(), true);\r\n        DuelView.printText(\"monster card position changed successfully\");\r\n        printBoard();\r\n    }\r\n\r\n    public void flipSummon() throws Exception {\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE))\r\n            throw new CanNotChangePosition();\r\n        if (!(this.phase.equals(Phase.MAIN_PHASE1) || this.phase.equals(Phase.MAIN_PHASE2)))\r\n            throw new CantDoActionInThisPhase();\r\n        if (!this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\") || actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.SET))\r\n            throw new CanNotFlipSummon();\r\n        this.player.getBoard().changeMonsterPosition(this.selectedCard.getNumber(), \"OO\");\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.FLIP_SUMMONED, this.player, this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"flip summoned successfully\");\r\n        printBoard();\r\n    }\r\n\r\n    public void attackMonster(int monsterNumber) throws Exception {\r\n        monsterNumber = opponentGroundNumbers[monsterNumber - 1] - 1;\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!(this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) && (this.selectedCard.getCard() instanceof MonsterCard) && (this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"OO\"))))\r\n            throw new CanNotAttack();\r\n        if (!(this.phase.equals(Phase.BATTLE_PHASE)))\r\n            throw new CantDoActionInThisPhase();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.ATTACK))\r\n            throw new AlreadyAttacked();\r\n        if (getCountOfMonsterCardsInGround(this.rival) == 0)\r\n            throw new NoCardToAttack();\r\n        String targetPosition = this.rival.getBoard().getMonsterConditionByNumber(monsterNumber);\r\n        if (this.rival.getBoard().getMonsterByNumber(monsterNumber).canBeAttacked(this, monsterNumber)) {\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.ATTACKED, this.rival, monsterNumber);\r\n            switch (targetPosition) {\r\n                case \"OO\":\r\n                    attackMonsterOO(monsterNumber);\r\n                    break;\r\n                case \"DO\":\r\n                    attackMonsterDO(monsterNumber);\r\n                    break;\r\n                case \"DH\":\r\n                    attackMonsterDH(monsterNumber);\r\n                    break;\r\n            }\r\n        } else throw new CanNotAttackThisCard();\r\n    }\r\n\r\n    private void attackMonsterOO(int monsterNumber) throws Exception {\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        int targetAttack = this.rivalAttackPoints[monsterNumber];\r\n        if (attackerAttack > targetAttack) {\r\n            int damage = attackerAttack - targetAttack;\r\n            if (!this.rival.getBoard().getMonsterByNumber(monsterNumber).equals(MonsterCard.EXPLODER_DRAGON))\r\n                this.rival.decreaseLifePoint(damage);\r\n            this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"your opponent’s monster is destroyed and your opponent receives \" + damage + \" battle damage\");\r\n        } else if (attackerAttack == targetAttack) {\r\n            this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));\r\n            this.rival.getBoard().removeMonster(monsterNumber);\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            if (this.player.getBoard().getMonsterByNumber(this.selectedCard.getNumber()) != null) {\r\n                this.player.getBoard().putInGraveYard(this.selectedCard.getCard());\r\n                this.player.getBoard().removeMonster(this.selectedCard.getNumber());\r\n                removeMonsterPlayer(this.selectedCard.getNumber());\r\n            }\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"both you and your opponent monster cards are destroyed and no one receives damage\");\r\n        } else {\r\n            int damage = targetAttack - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.REMOVE_FROM_MONSTERZONE, this.player, this.selectedCard.getNumber());\r\n            this.player.getBoard().putInGraveYard(this.selectedCard.getCard());\r\n            this.player.getBoard().removeMonster(this.selectedCard.getNumber());\r\n            removeMonsterPlayer(this.selectedCard.getNumber());\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"Your monster card is destroyed and you received\" + damage + \"battle damage\");\r\n        }\r\n        unselectCard();\r\n        printBoard();\r\n    }\r\n\r\n    private void attackMonsterDO(int monsterNumber) throws Exception {\r\n        MonsterCard target = this.rival.getBoard().getMonsterByNumber(monsterNumber);\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        if (attackerAttack > target.getDefence()) {\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber);\r\n            this.rival.getBoard().putInGraveYard(target);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"the defense position monster is destroyed\");\r\n        } else if (attackerAttack == target.getDefence()) {\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"no card is destroyed\");\r\n        } else {\r\n            int damage = target.getDefence() - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"no card is destroyed and you received\" + damage + \" battle damage\");\r\n        }\r\n        unselectCard();\r\n        printBoard();\r\n    }\r\n\r\n    private void attackMonsterDH(int monsterNumber) throws Exception {\r\n        MonsterCard target = this.rival.getBoard().getMonsterByNumber(monsterNumber);\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        String targetName = this.rival.getBoard().getMonsterByNumber(monsterNumber).getName();\r\n        this.rival.getBoard().changeMonsterPosition(monsterNumber, \"DO\");\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.FLIP_SUMMONED, this.rival, this.selectedCard.getNumber());\r\n        if (attackerAttack > target.getDefence()) {\r\n            this.rival.getBoard().putInGraveYard(target);\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and the defense position monster is destroyed\");\r\n        } else if (attackerAttack == target.getDefence()) {\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and no card is destroyed\");\r\n        } else {\r\n            int damage = target.getDefence() - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and no card is destroyed and you received\" + damage + \" battle damage\");\r\n        }\r\n        unselectCard();\r\n        printBoard();\r\n    }\r\n\r\n    public void directAttack() throws Exception {\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE)) throw new CanNotAttack();\r\n        if (!this.phase.equals(Phase.BATTLE_PHASE)) throw new ImproperPhase();\r\n        int countOfMonsterCardsInGround = getCountOfMonsterCardsInGround(this.rival);\r\n        if (countOfMonsterCardsInGround == 0) {\r\n            rival.decreaseLifePoint(((MonsterCard) this.selectedCard.getCard()).getAttack());\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            unselectCard();\r\n            printBoard();\r\n        } else throw new CanNotAttackDirectly();\r\n        printBoard();\r\n    }\r\n\r\n    public void activateSpell() throws Exception {\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!(this.selectedCard.getCard() instanceof SpellCard))\r\n            throw new IsNotSpell();\r\n        if (!((this.phase.equals(Phase.MAIN_PHASE1)) || (this.phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new CanNotActivateEffectOnThisTurn();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.HAND) && this.player.getBoard().getSpellAndTrapConditionByNumber(this.selectedCard.getNumber()).equals(\"O\"))\r\n            throw new AlreadyActivated();\r\n        SpellCard spellCard = (SpellCard) this.selectedCard.getCard();\r\n        if (this.player.getBoard().isFullSpellAndTrapZone() && !spellCard.getIcon().equals(Icon.FIELD))\r\n            throw new FullSpellZone();\r\n        //TODO maybe complete next condition\r\n        if ((((SpellCard) this.selectedCard.getCard()).getIcon().equals(Icon.QUICK_PLAY)\r\n                && actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.SET)))\r\n            throw new UndonePreparationOfSpell();\r\n        if (spellCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                if (((SpellCard) this.player.getBoard().getFieldZone()).takeAction(this, TakeActionCase.REMOVE_FROM_FIELDZONE_FACE_UP, this.player, 1))\r\n                    this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            //TODO age lazeme condition ham pas bede\r\n            if (((SpellCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.PUT_IN_FIELDZONE_FACE_UP, this.player, 1))\r\n                this.player.getBoard().putInFieldZone(spellCard);\r\n\r\n        } else {\r\n            int number = this.player.getBoard().putSpellOrTrap(spellCard, \"O\");\r\n            if (!((SpellCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.PUT_IN_SPELLTRAPZONE, this.player, number)) {\r\n                this.player.getBoard().removeSpellOrTrap(number);\r\n            }\r\n        }\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"spell activated\");\r\n        printBoard();\r\n    }\r\n\r\n    private void ritualSummon() throws Exception {\r\n\r\n\r\n    }\r\n\r\n    private void activateSpellOrTrapInRivalsTurn() throws Exception {\r\n        /*sharayet bar ghara bud*/\r\n        if (true) {\r\n            DuelView.printText(\"do you want to activate your trap and spell?\");\r\n            String input = DuelView.scan();\r\n            if (input.equals(\"yes\")) {\r\n//                if (/*kare digei anjam shod*/) throw new NotYourTurnForThisAction();\r\n                //faal sazie YEK card ke sharayetesh hast va ru zamine\r\n                DuelView.printText(\"spell/trap activated\");\r\n            } else if (input.equals(\"no\")) {\r\n                DuelView.printText(\"now it will be \" + this.player + \"'s turn\");\r\n                printBoard();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void cheatLifePoint(String target, int lifePoint) {\r\n        if (lifePoint < 2000) {\r\n            if (target.equals(\"player\"))\r\n                this.player.increaseLifePoint(lifePoint);\r\n            if (target.equals(\"opponent\"))\r\n                this.rival.decreaseLifePoint(lifePoint);\r\n            DuelView.printText(\"shame on you for cheating!!!!\");\r\n        }\r\n    }\r\n\r\n    public void cheatMoney(int amount) {\r\n        if (amount <= 5000)\r\n            this.player.increaseMoney(amount);\r\n        DuelView.printText(\"shame on you for cheating!!!!\");\r\n    }\r\n\r\n    public void cheatToWinGame() {\r\n        DuelView.printText(\"this is not a good way to win the game, but ok. Shame on you!\");\r\n        endGame(this.rival);\r\n    }\r\n\r\n    /*private void checkForChangesWhenAttackedMonster(int monsterNumber) {\r\n        switch (this.rival.getBoard().getMonsterByNumber(monsterNumber)) {\r\n            case COMMAND_KNIGHT:\r\n                changeAllAttackPointsBy400(-1);\r\n                break;\r\n        }\r\n    }*/\r\n\r\n    public void changeAllAttackPoints(int increaseOrDecrease, int amount) {\r\n        Board playerBoard = this.player.getBoard();\r\n        Board rivalBoard = this.rival.getBoard();\r\n        for (int i = 0; i < 5; i++) {\r\n            if (playerBoard.getMonsterByNumber(i) != null)\r\n                this.playerAttackPoints[i] = this.playerAttackPoints[i] + increaseOrDecrease * amount;\r\n            if (rivalBoard.getMonsterByNumber(i) != null)\r\n                this.rivalAttackPoints[i] = this.rivalAttackPoints[i] + increaseOrDecrease * amount;\r\n        }\r\n    }\r\n\r\n    public void changePlayerAttackPoint(int address, int amount) {\r\n        this.playerAttackPoints[address] += amount;\r\n    }\r\n\r\n    public void changeRivalAttackPoint(int address, int amount) {\r\n        this.rivalAttackPoints[address] += amount;\r\n    }\r\n\r\n    public void changePlayerDefencePoint(int address, int amount) {\r\n        this.playerDefencePoints[address] += amount;\r\n    }\r\n\r\n    public void changeRivalDefencePoint(int address, int amount) {\r\n        this.rivalDefencePoints[address] += amount;\r\n    }\r\n\r\n    public void surrender() {\r\n        //todo shayad lazem bashe darbare in bishter tafakor konim\r\n        endGame(this.player);\r\n    }\r\n\r\n    public void manageEndGame() {\r\n        List<Cardable> playersCardInHand = player.getBoard().getCardsInHand();\r\n        List<Cardable> rivalsCardInHand = rival.getBoard().getCardsInHand();\r\n        if (player.getLifePoint() <= 0) {\r\n            endGame(player);\r\n        } else if (rival.getLifePoint() <= 0) {\r\n            endGame(rival);\r\n        } else if (playersCardInHand.isEmpty()) {\r\n            endGame(player);\r\n        } else if (rivalsCardInHand.isEmpty()) {\r\n            endGame(rival);\r\n        }\r\n    }\r\n\r\n    private void endGame(User loser) {\r\n        User winner;\r\n        if (loser.equals(rival)) {\r\n            winner = player;\r\n        } else {\r\n            winner = rival;\r\n        }\r\n        roundCounter++;\r\n        if (roundNumber == 1) {\r\n            winner.increaseScore(1000);\r\n            winner.increaseMoney(1000 + winner.getLifePoint());\r\n            loser.increaseMoney(100);\r\n            shouldEndGameForView = true;\r\n            DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n        }\r\n        if (roundNumber == 3) {\r\n            this.rounds[this.roundCounter - 1] = new Round(winner, loser, winner.getLifePoint(), loser.getLifePoint());\r\n            if (this.roundCounter == 2 && this.rounds[0].getWinner().equals(this.rounds[1].getWinner())) {\r\n                int winnerLP1 = this.rounds[0].getLifePointByUser(winner);\r\n                int winnerLP2 = this.rounds[1].getLifePointByUser(winner);\r\n                int maxLP = Math.max(winnerLP1, winnerLP2);\r\n                winner.increaseScore(3000);\r\n                winner.increaseMoney(3000 + (3 * maxLP));\r\n                loser.increaseMoney(300);\r\n                shouldEndGameForView = true;\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                DuelView.printText(winner.getUsername() + \" won the whole match with score: \" + winner.getScore() + \"-\" + loser.getScore());\r\n            } else if (roundCounter == 3) {\r\n                int winnerLP1 = this.rounds[0].getLifePointByUser(winner);\r\n                int winnerLP2 = this.rounds[1].getLifePointByUser(winner);\r\n                int winnerLP3 = this.rounds[2].getLifePointByUser(winner);\r\n                int maxLP = Math.max(winnerLP1, winnerLP2);\r\n                maxLP = Math.max(maxLP, winnerLP3);\r\n                winner.increaseScore(3000);\r\n                winner.increaseMoney(3000 + (3 * maxLP));\r\n                loser.increaseMoney(300);\r\n                shouldEndGameForView = true;\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                DuelView.printText(winner.getUsername() + \" won the whole match with score: \" + winner.getScore() + \"-\" + loser.getScore());\r\n            } else {\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                exchangeCardBetweenMainAndSide(this.player);\r\n                exchangeCardBetweenMainAndSide(this.rival);\r\n                startNewGame(winner);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void exchangeCardBetweenMainAndSide(User user) {\r\n        DuelView.printText(\"Do you want to exchange a card between main and side deck \" + user.getNickname() + \"?\");\r\n        String answer = DuelView.scan().toLowerCase();\r\n        if (answer.equals(\"yes\")) {\r\n            DuelView.printText(\"enter card name from main and side\");\r\n            String main = DuelView.scan();\r\n            Cardable mainCard = user.getCardByName(main);\r\n            while (mainCard == null || !user.getGameDeck().getMainDeck().contains(mainCard)) {\r\n                DuelView.printText(\"Please enter a card you have in your main deck!\");\r\n                main = DuelView.scan();\r\n                mainCard = user.getCardByName(main);\r\n            }\r\n            String side = DuelView.scan();\r\n            Cardable sideCard = user.getCardByName(side);\r\n            while (sideCard == null || !user.getGameDeck().getSideDeck().contains(sideCard)) {\r\n                DuelView.printText(\"Please enter a card you have in your side deck!\");\r\n                side = DuelView.scan();\r\n                sideCard = user.getCardByName(side);\r\n            }\r\n            user.getGameDeck().getSideDeck().remove(sideCard);\r\n            user.getGameDeck().getMainDeck().remove(mainCard);\r\n            user.getGameDeck().getSideDeck().add(mainCard);\r\n            user.getGameDeck().getMainDeck().add(sideCard);\r\n        }\r\n    }\r\n\r\n    public void goNextPhase() {\r\n        //shayad to do in kar dare hala\r\n        if (this.phase.equals(Phase.DRAW_PHASE)) {\r\n            this.phase = Phase.STANDBY_PHASE;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (phase.equals(Phase.STANDBY_PHASE)) {\r\n            this.phase = Phase.MAIN_PHASE1;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n            printBoard();\r\n        } else if (phase.equals(Phase.MAIN_PHASE1)) {\r\n            if (!isStartTurn)\r\n                this.phase = Phase.BATTLE_PHASE;\r\n            else\r\n                this.phase = Phase.MAIN_PHASE2;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (this.phase.equals(Phase.BATTLE_PHASE)) {\r\n            this.phase = Phase.MAIN_PHASE2;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (this.phase.equals(Phase.MAIN_PHASE2)) {\r\n            this.phase = Phase.END_PHASE;\r\n        } else if (this.phase.equals(Phase.END_PHASE)) {\r\n            DuelView.printText(\"phase: \" + phase.getNamePascalCase());\r\n            DuelView.printText(\"its \" + rival.getNickname() + \"’s turn\");\r\n            changeTurn();\r\n            startDrawPhase();\r\n        }\r\n    }\r\n\r\n    private void startDrawPhase() {\r\n        this.phase = Phase.DRAW_PHASE;\r\n        ArrayList<Cardable> playerMainCards = (ArrayList<Cardable>) this.player.getGameDeck().getMainDeck();\r\n        ArrayList<Cardable> rivalMainCards = (ArrayList<Cardable>) this.rival.getGameDeck().getMainDeck();\r\n        if (playerMainCards.size() == 0) endGame(this.player);\r\n        else {\r\n            Collections.shuffle(this.player.getGameDeck().getMainDeck());\r\n            Collections.shuffle(this.rival.getGameDeck().getMainDeck());\r\n            for (int i = 0; i < 5; i++) {\r\n                this.player.getBoard().addCardToHand(playerMainCards.get(playerMainCards.size() - 1));\r\n                this.player.getGameDeck().removeCardFromMainDeck(playerMainCards.get(playerMainCards.size() - 1));\r\n                Collections.shuffle(this.player.getGameDeck().getMainDeck());\r\n                this.rival.getBoard().addCardToHand(rivalMainCards.get(rivalMainCards.size() - 1));\r\n                this.rival.getGameDeck().removeCardFromMainDeck(rivalMainCards.get(rivalMainCards.size() - 1));\r\n                Collections.shuffle(this.rival.getGameDeck().getMainDeck());\r\n            }\r\n            this.player.getBoard().addCardToHand(playerMainCards.get(playerMainCards.size() - 1));\r\n            this.player.getGameDeck().removeCardFromMainDeck(playerMainCards.get(playerMainCards.size() - 1));\r\n            Collections.shuffle(this.player.getGameDeck().getMainDeck());\r\n            DuelView.printText(\"new card added to the hand : \" + playerMainCards.get(playerMainCards.size() - 1).getNamePascalCase());\r\n        }\r\n//        goNextPhase();\r\n    }\r\n\r\n    private void changeTurn() {\r\n        if (this.isStartTurn) this.isStartTurn = false;\r\n        clearLastTurn();\r\n        //shayad TO DO inam hanooz kar dare\r\n        User temp = this.player;\r\n        this.player = rival;\r\n        this.rival = temp;\r\n        changePlayerAndRival();\r\n        if (this.player.getUsername().equals(\"@AI@\"))\r\n            handleAITurn();\r\n\r\n    }\r\n\r\n    public void changePlayerAndRival() {\r\n        Integer[] temp = this.playerAttackPoints;\r\n        this.playerAttackPoints = this.rivalAttackPoints;\r\n        this.rivalAttackPoints = temp;\r\n    }\r\n\r\n    private void clearLastTurn() {\r\n        this.selectedCard = null;\r\n        this.hasSummonedOrSetInThisTurn = false;\r\n        /*this.hasUsedHeraldInThisTurn = false;\r\n        this.hasUsedTexChangerInThisTurn = false;*/\r\n        newThoseThatResetWithTurn();\r\n    }\r\n\r\n    private void newThoseThatResetWithTurn() {\r\n        for (int i = 0; i < 5; i++) {\r\n            actionsOnThisCardPlayer.get(i).clear();\r\n            if (this.player.getBoard().getMonsterByNumber(i) != null && this.playerAttackPoints[i] != null && this.playerAttackPoints[i] == 0 && this.player.getBoard().getMonsterByNumber(i).getAttack() != 0) {\r\n                this.playerAttackPoints[i] = this.player.getBoard().getMonsterByNumber(i).getAttack();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void printBoard() {\r\n        String toPrint = this.rival.getNickname() + \":\" + this.rival.getLifePoint() + \"\\n\";\r\n        for (Cardable ignored : this.rival.getBoard().getCardsInHand()) {\r\n            toPrint += \"\\tc\";\r\n        }\r\n        toPrint += \"\\n\";\r\n        toPrint += this.rival.getGameDeck().getMainSize() + \"\\n\";\r\n        for (int i = 4; i > -1; i--) {\r\n            toPrint += \"\\t\";\r\n            if (this.rival.getBoard().getSpellAndTrapConditionByNumber(i) == null) toPrint += \"E\";\r\n            else toPrint += this.rival.getBoard().getSpellAndTrapConditionByNumber(i);\r\n        }\r\n        toPrint += \"\\n\";\r\n        for (int i = 4; i > -1; i--) {\r\n            toPrint += \"\\t\";\r\n            if (this.rival.getBoard().getMonsterConditionByNumber(i) == null) toPrint += \"E\";\r\n            else toPrint += this.rival.getBoard().getMonsterConditionByNumber(i);\r\n        }\r\n        toPrint += \"\\n\" + this.rival.getBoard().getCardsInGraveyard().size() + \"\\t\\t\\t\\t\\t\\t\";\r\n        if (this.rival.getBoard().getFieldZone() == null) toPrint += \"E\\n\";\r\n        else toPrint += \"O\\n\";\r\n        toPrint += \"\\n--------------------------\\n\\n\";\r\n        if (this.player.getBoard().getFieldZone() == null) toPrint += \"E\\t\\t\\t\\t\\t\\t\";\r\n        else toPrint += \"O\\t\\t\\t\\t\\t\\t\";\r\n        toPrint += this.player.getBoard().getCardsInGraveyard().size() + \"\\n\";\r\n        for (int i = 0; i < 5; i++) {\r\n            toPrint += \"\\t\";\r\n            if (this.player.getBoard().getMonsterConditionByNumber(i) == null) toPrint += \"E\";\r\n            else toPrint += this.player.getBoard().getMonsterConditionByNumber(i);\r\n        }\r\n        toPrint += \"\\n\";\r\n        for (int i = 0; i < 5; i++) {\r\n            toPrint += \"\\t\";\r\n            if (this.player.getBoard().getSpellAndTrapConditionByNumber(i) == null) toPrint += \"E\";\r\n            else toPrint += this.player.getBoard().getSpellAndTrapConditionByNumber(i);\r\n        }\r\n        toPrint += \"\\n\\t\\t\\t\\t\\t\\t\" + this.player.getGameDeck().getMainSize() + \"\\n\";\r\n        for (Cardable ignored : this.player.getBoard().getCardsInHand()) {\r\n            toPrint += ignored.getNamePascalCase() + \"\\t\";\r\n//            toPrint += \"c\\t\";\r\n        }\r\n        toPrint += \"\\n\" + this.player.getNickname() + \":\" + this.player.getLifePoint();\r\n        DuelView.printText(toPrint);\r\n    }\r\n\r\n    public void showCard() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else if (!this.selectedCard.getOwner().equals(this.player)) {\r\n            throw new InvisibleCard();\r\n        } else\r\n            DuelView.printText(this.selectedCard.getCard().toString());\r\n    }\r\n\r\n    public void showGraveyard() throws Exception {\r\n        List<Cardable> graveyard = this.player.getBoard().getCardsInGraveyard();\r\n        String toPrint = \"\";\r\n        if (graveyard.isEmpty())\r\n            throw new GraveYardEmpty();\r\n        else {\r\n            for (Cardable cardInGraveyard : graveyard) {\r\n                if (graveyard.indexOf(cardInGraveyard) == graveyard.size() - 1) {\r\n                    toPrint += cardInGraveyard.getName() + \":\" + cardInGraveyard.getDescription();\r\n                } else {\r\n                    toPrint += cardInGraveyard.getName() + \":\" + cardInGraveyard.getDescription() + \"\\n\";\r\n                }\r\n            }\r\n        }\r\n        DuelView.printText(toPrint);\r\n        String input = DuelView.scan();\r\n        while (!input.equals(\"back\")) {\r\n            DuelView.printText(\"invalid command\");\r\n            input = DuelView.scan();\r\n        }\r\n    }\r\n\r\n    public void removeMonsterPlayer(int address) {\r\n        actionsOnThisCardPlayer.get(address).clear();\r\n        /*monsterZone.setHasChangedPositionInThisTurn(address, false);\r\n        monsterZone.setHasSetInThisTurn(address, false);\r\n        monsterZone.setMonsterAttackPlayer(address, null);*/\r\n        setMonsterAttackPlayer(address, null);\r\n        player.getBoard().removeMonster(address);\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.REMOVE_FROM_MONSTERZONE, this.player, this.selectedCard.getNumber());\r\n    }\r\n\r\n\r\n    public void handleAITurn() {\r\n        goNextPhase();\r\n        goNextPhase();\r\n        setMonsterCardInAI();\r\n        changePositionInAI();\r\n        setSpellOrTrapInAI();\r\n        goNextPhase();\r\n        attackInAI();\r\n        changeTurn();\r\n    }\r\n\r\n\r\n    private void setMonsterCardInAI() {\r\n        int numberOfMonstersOnPlayerBoard = numberOfMonstersOnPlayerBoard();\r\n        if (numberOfMonstersOnPlayerBoard > 1 && monsterCardWithTwoTributesWithMaxAttackPointInHand() != null)\r\n            setATwoTributeMonster();\r\n        else if (numberOfMonstersOnPlayerBoard > 0 && monsterCardWithOneTributeWithMaxAttackPointInHand() != null)\r\n            setAOneTributeMonster();\r\n        else if (numberOfMonstersOnPlayerBoard != 5 && monsterCardWithoutTributeWithMaxAttackPointInHand() != null)\r\n            setANoTributeMonster();\r\n    }\r\n\r\n    private void setATwoTributeMonster() {\r\n        if (numberOfLevelSevenEightMonstersInHand() > 0) {\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard());\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard());\r\n            this.player.getBoard().putMonster(monsterCardWithTwoTributesWithMaxAttackPointInHand(), \"OO\");\r\n        }\r\n\r\n    }\r\n\r\n    private void setAOneTributeMonster() {\r\n        if (numberOfLevelFiveSixMonstersInPlayerHand() > 0) {\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard());\r\n            this.player.getBoard().putMonster(monsterCardWithOneTributeWithMaxAttackPointInHand(), \"OO\");\r\n        }\r\n    }\r\n\r\n    private void setANoTributeMonster() {\r\n        if (numberOfLevelOneTwoFourMonstersInPlayerHand() > 0) {\r\n            if (monsterCardWithoutTributeWithMaxAttackPointInHand() != null && monsterCardWithLeastDefencePointOnRivalBoard() != 10)\r\n                if (numberOfMonstersOnPlayerBoard() == 0 && Objects.requireNonNull(monsterCardWithoutTributeWithMaxAttackPointInHand()).getAttack() < monsterCardWithLeaseAttackPointOnPlayerBoard())\r\n                    this.player.getBoard().putMonster(monsterCardWithMaxDefenseInHand(), \"DH\");\r\n                else if (numberOfMonstersOnPlayerBoard() < 5)\r\n                    this.player.getBoard().putMonster(monsterCardWithoutTributeWithMaxAttackPointInHand(), \"OO\");\r\n        }\r\n    }\r\n\r\n    private void setSpellOrTrapInAI() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof SpellCard || card instanceof TrapCard)\r\n                if (numberOfSpellsAndTrapsOnPlayerBoard() < 5)\r\n                    this.player.getBoard().putSpellOrTrap(card, \"H\");\r\n        }\r\n    }\r\n\r\n    private void attackInAI() {\r\n        if (numberOfMonstersOnPlayerBoard() > 0) {\r\n            if (numberOfMonstersOnRivalBoard() == 0)\r\n                directAttackInAI();\r\n            else if (allCardsOnRivalAreDH())\r\n                attackAllDHInAI(numberOfMonstersOnRivalBoard(), numberOfMonstersOnPlayerBoard());\r\n            else if (monsterCardWithMostAttackPointOnPlayerBoard() != 10 && monsterCardWithMostAttackPointOnRivalBoard() != 10) {\r\n                attackOOInAI();\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean allCardsOnRivalAreDH() {\r\n        int counterOfDH = 0;\r\n        int counterOfCards = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.rival.getBoard().getMonsterByNumber(i) != null) {\r\n                counterOfCards++;\r\n                if (!this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DH\"))\r\n                    counterOfDH++;\r\n            }\r\n        }\r\n        return counterOfDH == counterOfCards;\r\n    }\r\n\r\n    private void directAttackInAI() {\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null) {\r\n                try {\r\n                    selectCardPlayerMonsterZone(i);\r\n                    directAttack();\r\n                    unselectCard();\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void attackAllDHInAI(int numberOfMonstersOnRivalBoard, int numberOfMonstersOnPlayerBoard) {\r\n        int indexOfAttacker = 10;\r\n        ArrayList<Integer> monstersOnBoardIndex = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.rival.getBoard().getMonsterByNumber(i) != null)\r\n                monstersOnBoardIndex.add(i);\r\n        }\r\n        if (numberOfMonstersOnPlayerBoard > numberOfMonstersOnRivalBoard) {\r\n            for (int i = 0; i < numberOfMonstersOnRivalBoard; i++) {\r\n                if (i == 0)\r\n                    indexOfAttacker = monsterCardWithMostAttackPointOnPlayerBoard();\r\n                else if (i == 1)\r\n                    indexOfAttacker = monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard());\r\n                try {\r\n                    selectCardPlayerMonsterZone(indexOfAttacker);\r\n                    attackMonsterDH(monstersOnBoardIndex.get(i));\r\n                    unselectCard();\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        } else {\r\n            for (int i = 0; i < numberOfMonstersOnPlayerBoard; i++) {\r\n                if (i == 0)\r\n                    indexOfAttacker = monsterCardWithMostAttackPointOnPlayerBoard();\r\n                if (i == 1)\r\n                    indexOfAttacker = monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard());\r\n                try {\r\n                    selectCardPlayerMonsterZone(indexOfAttacker);\r\n                    attackMonsterDH(monstersOnBoardIndex.get(i));\r\n                    unselectCard();\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void attackOOInAI() {\r\n        if (monsterCardWithMostAttackPointOnPlayerBoard() != 10 && this.rival.getBoard().getMonsterConditionByNumber(monsterCardWithMostAttackPointOnRivalBoard()).equals(\"OO\")) {\r\n            MonsterCard strongestRivalAttacker = this.rival.getBoard().getMonsterByNumber(monsterCardWithLeaseAttackPointOnRivalBoard());\r\n            MonsterCard strongestPlayerAttacker = this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard());\r\n            if (strongestRivalAttacker != null && strongestPlayerAttacker != null) {\r\n                if (strongestPlayerAttacker.getAttack() > strongestRivalAttacker.getAttack()) {\r\n                    try {\r\n                        attackMonsterOO(monsterCardWithMostAttackPointOnRivalBoard());\r\n                    } catch (Exception exception) {\r\n                        exception.printStackTrace();\r\n                    }\r\n                }\r\n            } else if (monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard()) != 10) {\r\n                MonsterCard secondStrongestRivalAttacker = this.rival.getBoard().getMonsterByNumber(monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard()));\r\n                assert strongestPlayerAttacker != null;\r\n                if (strongestPlayerAttacker.getAttack() > secondStrongestRivalAttacker.getAttack()) {\r\n                    try {\r\n                        attackMonsterOO(monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithLeaseAttackPointOnRivalBoard()));\r\n                    } catch (Exception exception) {\r\n                        exception.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void changePositionInAI() {\r\n        MonsterCard leastAttackerOnRival = this.rival.getBoard().getMonsterByNumber(monsterCardWithLeaseAttackPointOnRivalBoard());\r\n        MonsterCard strongestAttackerOnPlayer = this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard());\r\n        if (leastAttackerOnRival != null && strongestAttackerOnPlayer != null) {\r\n            if (leastAttackerOnRival.getAttack() > strongestAttackerOnPlayer.getAttack()) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);\r\n                    if (monsterCard != null)\r\n                        this.player.getBoard().changeMonsterPosition(i, \"DO\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private MonsterCard monsterCardWithoutTributeWithMaxAttackPointInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getLevel() < 5)\r\n                        if (((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                            maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                            indexOfMaxAttacker = i;\r\n                        }\r\n            }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return this.player.getBoard().getMonsterByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithOneTributeWithMaxAttackPointInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getLevel() == 5 || ((MonsterCard) card).getLevel() == 6)\r\n                        if (((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                            maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                            indexOfMaxAttacker = i;\r\n                        }\r\n            }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return this.player.getBoard().getMonsterByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithTwoTributesWithMaxAttackPointInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getLevel() > 6)\r\n                        if (((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                            maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                            indexOfMaxAttacker = i;\r\n                        }\r\n            }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithMaxDefenseInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxDefencePoint = 0;\r\n        int indexOfMaxDefender = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getDefence() > maxDefencePoint) {\r\n                        maxDefencePoint = ((MonsterCard) card).getDefence();\r\n                        indexOfMaxDefender = i;\r\n                    }\r\n            }\r\n        }\r\n        if (indexOfMaxDefender != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxDefender);\r\n        else return null;\r\n    }\r\n\r\n    private int monsterCardWithLeaseAttackPointOnRivalBoard() {\r\n        int leastAttackPoint = 100000;\r\n        int indexOfMinAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getSpellAndTrapConditionByNumber(i).equals(\"OO\"))\r\n                    if (leastAttackPoint > card.getAttack()) {\r\n                        indexOfMinAttacker = i;\r\n                        leastAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMinAttacker;\r\n    }\r\n\r\n    private int monsterCardWithLeaseAttackPointOnPlayerBoard() {\r\n        int leastAttackPoint = 100000;\r\n        int indexOfMinAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.player.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.player.getBoard().getSpellAndTrapConditionByNumber(i).equals(\"OO\"))\r\n                    if (leastAttackPoint > card.getAttack()) {\r\n                        indexOfMinAttacker = i;\r\n                        leastAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMinAttacker;\r\n    }\r\n\r\n\r\n    private int monsterCardWithSecondMostAttackPointOnRivalBoard(int indexOfStrongestAttacker) {\r\n        int indexOfSecondStrongestAttacker = 10;\r\n        int secondMostAttackPoint = 0;\r\n        if (numberOfMonstersOnPlayerBoard() > 1) {\r\n            for (int i = 0; i < 5; i++) {\r\n                MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n                if (card != null)\r\n                    if (i != indexOfStrongestAttacker && this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"OO\")) {\r\n                        if (secondMostAttackPoint < card.getAttack()) {\r\n                            indexOfSecondStrongestAttacker = i;\r\n                            secondMostAttackPoint = card.getAttack();\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n        return indexOfSecondStrongestAttacker;\r\n    }\r\n\r\n    private int monsterCardWithMostAttackPointOnPlayerBoard() {\r\n        int mostAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.player.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.player.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"))\r\n                    if (mostAttackPoint < card.getAttack()) {\r\n                        indexOfMaxAttacker = i;\r\n                        mostAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMaxAttacker;\r\n    }\r\n\r\n    private int monsterCardWithLeastDefencePointOnRivalBoard() {\r\n        int leastDefencePoint = 100000;\r\n        int indexOfMinDefender = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DO\"))\r\n                    if (leastDefencePoint > card.getDefence()) {\r\n                        leastDefencePoint = card.getDefence();\r\n                        indexOfMinDefender = i;\r\n                    }\r\n        }\r\n        return indexOfMinDefender;\r\n    }\r\n\r\n    private int monsterCardWithMostAttackPointOnRivalBoard() {\r\n        int mostAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"))\r\n                    if (mostAttackPoint < card.getAttack()) {\r\n                        mostAttackPoint = card.getAttack();\r\n                        indexOfMaxAttacker = i;\r\n                    }\r\n        }\r\n        return indexOfMaxAttacker;\r\n    }\r\n\r\n    private int monsterCardWithMostDefencePointOnRivalBoard() {\r\n        int mostDefencePoint = 0;\r\n        int indexOfMaxDefender = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DO\"))\r\n                    if (mostDefencePoint < card.getDefence()) {\r\n                        indexOfMaxDefender = i;\r\n                        mostDefencePoint = card.getDefence();\r\n                    }\r\n        }\r\n        return indexOfMaxDefender;\r\n    }\r\n\r\n    private int numberOfMonstersOnPlayerBoard() {\r\n        int numberOfMonsters = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null)\r\n                numberOfMonsters++;\r\n        }\r\n        return numberOfMonsters;\r\n    }\r\n\r\n    private int numberOfMonstersOnRivalBoard() {\r\n        int numberOfMonsters = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard monsterCard = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null)\r\n                numberOfMonsters++;\r\n        }\r\n        return numberOfMonsters;\r\n    }\r\n\r\n\r\n    private int numberOfSpellsAndTrapsOnPlayerBoard() {\r\n        int numberOfSpellsAndTraps = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            Cardable card = this.player.getBoard().getSpellAndTrapByNumber(i);\r\n            if (card != null)\r\n                numberOfSpellsAndTraps++;\r\n        }\r\n        return numberOfSpellsAndTraps;\r\n    }\r\n\r\n    private int numberOfLevelOneTwoFourMonstersInPlayerHand() {\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() < 5)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n\r\n    private int numberOfLevelFiveSixMonstersInPlayerHand() {\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() == 5 || ((MonsterCard) card).getLevel() == 6)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n\r\n    private int numberOfLevelSevenEightMonstersInHand() {\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() > 6)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n\r\n    public int minFinder(int firstNumber, int secondNumber) {\r\n        return Math.min(firstNumber, secondNumber);\r\n    }\r\n\r\n\r\n}\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- src/main/java/controller/DuelController.java	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ src/main/java/controller/DuelController.java	(date 1624636931112)
-@@ -101,6 +101,14 @@
-         this.rivalAttackPoints[i] = number;
-     }
- 
-+    public void setMonsterDefencePlayer(int i, Integer number) {
-+        this.playerDefencePoints[i] = number;
-+    }
-+
-+    public void setMonsterDefenceRival(int i, Integer number) {
-+        this.rivalDefencePoints[i] = number;
-+    }
-+
-     /*public MonsterZone getMonsterZone() {
-         return this.monsterZone;
-     }*/
-@@ -155,7 +163,7 @@
-         this.player.setNewBoard();
-         this.rival.setNewBoard();
-         clearLastTurn();
--        startDrawPhase();
-+        startDrawPhase(true);
-     }
- 
-     public void selectCardPlayerMonsterZone(int address) throws Exception {
-@@ -300,7 +308,9 @@
-             }
-             MonsterCard monsterCard = (MonsterCard) selectedCard.getCard();
-             if (monsterCard.getLevel() <= 4) {
--                this.player.getBoard().putMonster(monsterCard, "OO");
-+                int place = this.player.getBoard().putMonster(monsterCard, "OO");
-+                setMonsterAttackPlayer(place, monsterCard.getAttack());
-+                this.playerDefencePoints[place] = monsterCard.getAttack();
-                 monsterCard.takeAction(this, TakeActionCase.SUMMONED, this.player, this.selectedCard.getNumber());
-                 this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());
-                 unselectCard();
-@@ -333,9 +343,11 @@
-         int address = Integer.parseInt(input);
-         address = playerGroundNumbers[address - 1] - 1;
-         if (this.player.getBoard().getMonsterByNumber(address) == null) throw new NoMonsterHere1();
--        this.player.getBoard().removeMonster(address);
-+        this.player.getBoard().removeMonster(address,this,player);
-         removeMonsterPlayer(address);
--        this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), "OO");
-+        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), "OO");
-+        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());
-+        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();
-         ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.SUMMONED, this.player, this.selectedCard.getNumber());
-         this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());
-         unselectCard();
-@@ -356,11 +368,13 @@
-         address2 = playerGroundNumbers[address2] - 1;
-         if (this.player.getBoard().getMonsterByNumber(address2) == null) throw new NoMonsterHere1();
-         if (address1 == address2) throw new sameAddresses();
--        this.player.getBoard().removeMonster(address1);
--        this.player.getBoard().removeMonster(address2);
-+        this.player.getBoard().removeMonster(address1,this,player);
-+        this.player.getBoard().removeMonster(address2,this,player);
-         removeMonsterPlayer(address1);
-         removeMonsterPlayer(address2);
--        this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), "OO");
-+        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), "OO");
-+        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());
-+        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();
-         ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.SUMMONED, this.player, this.selectedCard.getNumber());
-         this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());
-         unselectCard();
-@@ -405,7 +419,10 @@
-         }
-         MonsterCard monsterCard = (MonsterCard) this.selectedCard.getCard();
-         if (monsterCard.getLevel() <= 4) {
--            this.actionsOnThisCardPlayer.get(this.player.getBoard().putMonster(monsterCard, "DH")).add(ActionsDoneInTurn.SET);
-+            int place = this.player.getBoard().putMonster(monsterCard, "DH");
-+            setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());
-+            this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();
-+            this.actionsOnThisCardPlayer.get(place).add(ActionsDoneInTurn.SET);
- //            monsterZone.setHasSetInThisTurn(this.player.getBoard().putMonster(monsterCard, "DH"), true);
-             this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());
-             unselectCard();
-@@ -435,9 +452,12 @@
-         int address = Integer.parseInt(input);
-         address = playerGroundNumbers[address - 1] - 1;
-         if (this.player.getBoard().getMonsterByNumber(address) == null) throw new NoMonsterHere1();
--        this.player.getBoard().removeMonster(address);
-+        this.player.getBoard().removeMonster(address,this,player);
-         removeMonsterPlayer(address);
--        this.actionsOnThisCardPlayer.get(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), "DH")).add(ActionsDoneInTurn.SET);
-+        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), "DH");
-+        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());
-+        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();
-+        this.actionsOnThisCardPlayer.get(place).add(ActionsDoneInTurn.SET);
- //        monsterZone.setHasSetInThisTurn(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), "DH"), true);
-         this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());
-         unselectCard();
-@@ -459,11 +479,14 @@
-         if (this.player.getBoard().getMonsterByNumber(address2) == null) throw new NoMonsterHere1();
-         if (address1 == address2) throw new sameAddresses();
-         this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());
--        this.player.getBoard().removeMonster(address1);
--        this.player.getBoard().removeMonster(address2);
-+        this.player.getBoard().removeMonster(address1,this,player);
-+        this.player.getBoard().removeMonster(address2,this,player);
-         removeMonsterPlayer(address1);
-         removeMonsterPlayer(address2);
--        this.actionsOnThisCardPlayer.get(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), "DH")).add(ActionsDoneInTurn.SET);
-+        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), "DH");
-+        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());
-+        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();
-+        this.actionsOnThisCardPlayer.get(place).add(ActionsDoneInTurn.SET);
- //        monsterZone.setHasSetInThisTurn(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), "DH"), true);
-         unselectCard();
-         DuelView.printText("set successfully");
-@@ -570,6 +593,8 @@
-             throw new AlreadyAttacked();
-         if (getCountOfMonsterCardsInGround(this.rival) == 0)
-             throw new NoCardToAttack();
-+        if(rival.getBoard().getMonsterByNumber(monsterNumber)!=null)
-+            throw new NoCardFoundInThisPosition();
-         String targetPosition = this.rival.getBoard().getMonsterConditionByNumber(monsterNumber);
-         if (this.rival.getBoard().getMonsterByNumber(monsterNumber).canBeAttacked(this, monsterNumber)) {
-             this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.ATTACKED, this.rival, monsterNumber);
-@@ -596,16 +621,16 @@
-                 this.rival.decreaseLifePoint(damage);
-             this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));
-             this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);
--            this.rival.getBoard().removeMonster(monsterNumber);
-+            this.rival.getBoard().removeMonster(monsterNumber,this,rival);
-             actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);
-             DuelView.printText("your opponent’s monster is destroyed and your opponent receives " + damage + " battle damage");
-         } else if (attackerAttack == targetAttack) {
-             this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));
--            this.rival.getBoard().removeMonster(monsterNumber);
-+            this.rival.getBoard().removeMonster(monsterNumber,this,rival);
-             this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);
-             if (this.player.getBoard().getMonsterByNumber(this.selectedCard.getNumber()) != null) {
-                 this.player.getBoard().putInGraveYard(this.selectedCard.getCard());
--                this.player.getBoard().removeMonster(this.selectedCard.getNumber());
-+                this.player.getBoard().removeMonster(this.selectedCard.getNumber(),this,player);
-                 removeMonsterPlayer(this.selectedCard.getNumber());
-             }
-             actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);
-@@ -615,10 +640,10 @@
-             this.player.decreaseLifePoint(damage);
-             ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.REMOVE_FROM_MONSTERZONE, this.player, this.selectedCard.getNumber());
-             this.player.getBoard().putInGraveYard(this.selectedCard.getCard());
--            this.player.getBoard().removeMonster(this.selectedCard.getNumber());
-+            this.player.getBoard().removeMonster(this.selectedCard.getNumber(),this,player);
-             removeMonsterPlayer(this.selectedCard.getNumber());
-             actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);
--            DuelView.printText("Your monster card is destroyed and you received" + damage + "battle damage");
-+            DuelView.printText("Your monster card is destroyed and you received " + damage + "battle damage");
-         }
-         unselectCard();
-         printBoard();
-@@ -629,7 +654,7 @@
-         int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];
-         if (attackerAttack > target.getDefence()) {
-             this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);
--            this.rival.getBoard().removeMonster(monsterNumber);
-+            this.rival.getBoard().removeMonster(monsterNumber,this,rival);
-             this.rival.getBoard().putInGraveYard(target);
-             actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);
-             DuelView.printText("the defense position monster is destroyed");
-@@ -640,7 +665,7 @@
-             int damage = target.getDefence() - attackerAttack;
-             this.player.decreaseLifePoint(damage);
-             actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);
--            DuelView.printText("no card is destroyed and you received" + damage + " battle damage");
-+            DuelView.printText("no card is destroyed and you received " + damage + " battle damage");
-         }
-         unselectCard();
-         printBoard();
-@@ -649,13 +674,13 @@
-     private void attackMonsterDH(int monsterNumber) throws Exception {
-         MonsterCard target = this.rival.getBoard().getMonsterByNumber(monsterNumber);
-         int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];
--        String targetName = this.rival.getBoard().getMonsterByNumber(monsterNumber).getName();
-+        String targetName = this.rival.getBoard().getMonsterByNumber(monsterNumber).getNamePascalCase();
-         this.rival.getBoard().changeMonsterPosition(monsterNumber, "DO");
-         ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.FLIP_SUMMONED, this.rival, this.selectedCard.getNumber());
-         if (attackerAttack > target.getDefence()) {
-             this.rival.getBoard().putInGraveYard(target);
-             this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);
--            this.rival.getBoard().removeMonster(monsterNumber);
-+            this.rival.getBoard().removeMonster(monsterNumber,this,rival);
-             actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);
-             DuelView.printText("opponent’s monster card was " + targetName + " and the defense position monster is destroyed");
-         } else if (attackerAttack == target.getDefence()) {
-@@ -665,7 +690,7 @@
-             int damage = target.getDefence() - attackerAttack;
-             this.player.decreaseLifePoint(damage);
-             actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);
--            DuelView.printText("opponent’s monster card was " + targetName + " and no card is destroyed and you received" + damage + " battle damage");
-+            DuelView.printText("opponent’s monster card was " + targetName + " and no card is destroyed and you received " + damage + " battle damage");
-         }
-         unselectCard();
-         printBoard();
-@@ -773,14 +798,19 @@
-         }
-     }*/
- 
-+
-+
-     public void changeAllAttackPoints(int increaseOrDecrease, int amount) {
-         Board playerBoard = this.player.getBoard();
-         Board rivalBoard = this.rival.getBoard();
-         for (int i = 0; i < 5; i++) {
--            if (playerBoard.getMonsterByNumber(i) != null)
-+//            System.out.println(playerBoard.getMonsterByNumber(i));
-+            if (this.playerAttackPoints[i] != null)
-                 this.playerAttackPoints[i] = this.playerAttackPoints[i] + increaseOrDecrease * amount;
--            if (rivalBoard.getMonsterByNumber(i) != null)
-+            if (this.rivalAttackPoints[i] != null)
-                 this.rivalAttackPoints[i] = this.rivalAttackPoints[i] + increaseOrDecrease * amount;
-+//            System.out.println(Arrays.toString(this.playerAttackPoints) + ": player");
-+//            System.out.println(Arrays.toString(this.rivalAttackPoints) + ": rival");
-         }
-     }
- 
-@@ -895,6 +925,7 @@
- 
-     public void goNextPhase() {
-         //shayad to do in kar dare hala
-+        printBoard();
-         if (this.phase.equals(Phase.DRAW_PHASE)) {
-             this.phase = Phase.STANDBY_PHASE;
-             DuelView.printText("phase: " + this.phase.getNamePascalCase());
-@@ -913,36 +944,40 @@
-             DuelView.printText("phase: " + this.phase.getNamePascalCase());
-         } else if (this.phase.equals(Phase.MAIN_PHASE2)) {
-             this.phase = Phase.END_PHASE;
-+            DuelView.printText("phase: " + this.phase.getNamePascalCase());
-         } else if (this.phase.equals(Phase.END_PHASE)) {
--            DuelView.printText("phase: " + phase.getNamePascalCase());
-+//            DuelView.printText("phase: " + phase.getNamePascalCase());
-             DuelView.printText("its " + rival.getNickname() + "’s turn");
-             changeTurn();
--            startDrawPhase();
-+            startDrawPhase(false);
-         }
-     }
- 
--    private void startDrawPhase() {
-+    private void startDrawPhase(boolean isFirst) {
-         this.phase = Phase.DRAW_PHASE;
-+        DuelView.printText("phase: " + this.phase.getNamePascalCase());
-         ArrayList<Cardable> playerMainCards = (ArrayList<Cardable>) this.player.getGameDeck().getMainDeck();
-         ArrayList<Cardable> rivalMainCards = (ArrayList<Cardable>) this.rival.getGameDeck().getMainDeck();
-         if (playerMainCards.size() == 0) endGame(this.player);
-         else {
-             Collections.shuffle(this.player.getGameDeck().getMainDeck());
-             Collections.shuffle(this.rival.getGameDeck().getMainDeck());
--            for (int i = 0; i < 5; i++) {
--                this.player.getBoard().addCardToHand(playerMainCards.get(playerMainCards.size() - 1));
--                this.player.getGameDeck().removeCardFromMainDeck(playerMainCards.get(playerMainCards.size() - 1));
--                Collections.shuffle(this.player.getGameDeck().getMainDeck());
--                this.rival.getBoard().addCardToHand(rivalMainCards.get(rivalMainCards.size() - 1));
--                this.rival.getGameDeck().removeCardFromMainDeck(rivalMainCards.get(rivalMainCards.size() - 1));
--                Collections.shuffle(this.rival.getGameDeck().getMainDeck());
-+            if (isFirst) {
-+                for (int i = 0; i < 5; i++) {
-+                    this.player.getBoard().addCardToHand(playerMainCards.get(playerMainCards.size() - 1));
-+                    this.player.getGameDeck().removeCardFromMainDeck(playerMainCards.get(playerMainCards.size() - 1));
-+                    Collections.shuffle(this.player.getGameDeck().getMainDeck());
-+                    this.rival.getBoard().addCardToHand(rivalMainCards.get(rivalMainCards.size() - 1));
-+                    this.rival.getGameDeck().removeCardFromMainDeck(rivalMainCards.get(rivalMainCards.size() - 1));
-+                    Collections.shuffle(this.rival.getGameDeck().getMainDeck());
-+                }
-             }
-             this.player.getBoard().addCardToHand(playerMainCards.get(playerMainCards.size() - 1));
-             this.player.getGameDeck().removeCardFromMainDeck(playerMainCards.get(playerMainCards.size() - 1));
-             Collections.shuffle(this.player.getGameDeck().getMainDeck());
-             DuelView.printText("new card added to the hand : " + playerMainCards.get(playerMainCards.size() - 1).getNamePascalCase());
-         }
--//        goNextPhase();
-+        goNextPhase();
-     }
- 
-     private void changeTurn() {
-@@ -1043,9 +1078,9 @@
-         else {
-             for (Cardable cardInGraveyard : graveyard) {
-                 if (graveyard.indexOf(cardInGraveyard) == graveyard.size() - 1) {
--                    toPrint += cardInGraveyard.getName() + ":" + cardInGraveyard.getDescription();
-+                    toPrint += cardInGraveyard.getNamePascalCase() + ":" + cardInGraveyard.getDescription();
-                 } else {
--                    toPrint += cardInGraveyard.getName() + ":" + cardInGraveyard.getDescription() + "\n";
-+                    toPrint += cardInGraveyard.getNamePascalCase() + ":" + cardInGraveyard.getDescription() + "\n";
-                 }
-             }
-         }
-@@ -1063,22 +1098,24 @@
-         monsterZone.setHasSetInThisTurn(address, false);
-         monsterZone.setMonsterAttackPlayer(address, null);*/
-         setMonsterAttackPlayer(address, null);
--        player.getBoard().removeMonster(address);
-+        player.getBoard().removeMonster(address,this,player);
-         ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.REMOVE_FROM_MONSTERZONE, this.player, this.selectedCard.getNumber());
-     }
- 
--
-     public void handleAITurn() {
--        goNextPhase();
--        goNextPhase();
-         setMonsterCardInAI();
-         changePositionInAI();
-         setSpellOrTrapInAI();
-         goNextPhase();
-         attackInAI();
-+        //TODO faal sazie spell o trap
-+        goNextPhase();
-+        setSpellOrTrapInAI();
-         changeTurn();
-     }
- 
-+    //fixme un exception haye duc ro bara set monster biam inja check konam
-+    //TODO in mokhalefe 10 haro check konam. (age na vazehe baratun ye jur null pointer e. tabe haye most or least AI ro bebinin migiri dastano)
- 
-     private void setMonsterCardInAI() {
-         int numberOfMonstersOnPlayerBoard = numberOfMonstersOnPlayerBoard();
-@@ -1092,27 +1129,36 @@
- 
-     private void setATwoTributeMonster() {
-         if (numberOfLevelSevenEightMonstersInHand() > 0) {
--            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard());
--            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard());
--            this.player.getBoard().putMonster(monsterCardWithTwoTributesWithMaxAttackPointInHand(), "OO");
-+            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard(),this,player);
-+            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard(),this,player);
-+            int place = this.player.getBoard().putMonster(monsterCardWithTwoTributesWithMaxAttackPointInHand(), "OO");
-+            setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());
-+            this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();
-         }
- 
-     }
- 
-     private void setAOneTributeMonster() {
-         if (numberOfLevelFiveSixMonstersInPlayerHand() > 0) {
--            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard());
--            this.player.getBoard().putMonster(monsterCardWithOneTributeWithMaxAttackPointInHand(), "OO");
-+            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard(),this,player);
-+            int place = this.player.getBoard().putMonster(monsterCardWithOneTributeWithMaxAttackPointInHand(), "OO");
-+            setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());
-+            this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();
-         }
-     }
- 
-     private void setANoTributeMonster() {
-         if (numberOfLevelOneTwoFourMonstersInPlayerHand() > 0) {
-             if (monsterCardWithoutTributeWithMaxAttackPointInHand() != null && monsterCardWithLeastDefencePointOnRivalBoard() != 10)
--                if (numberOfMonstersOnPlayerBoard() == 0 && Objects.requireNonNull(monsterCardWithoutTributeWithMaxAttackPointInHand()).getAttack() < monsterCardWithLeaseAttackPointOnPlayerBoard())
--                    this.player.getBoard().putMonster(monsterCardWithMaxDefenseInHand(), "DH");
--                else if (numberOfMonstersOnPlayerBoard() < 5)
--                    this.player.getBoard().putMonster(monsterCardWithoutTributeWithMaxAttackPointInHand(), "OO");
-+                if (numberOfMonstersOnPlayerBoard() == 0 && monsterCardWithoutTributeWithMaxAttackPointInHand().getAttack() < monsterCardWithLeaseAttackPointOnPlayerBoard()) {
-+                    int place = this.player.getBoard().putMonster(monsterCardWithMaxDefenseInHand(), "DH");
-+                    setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());
-+                    this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();
-+                } else if (numberOfMonstersOnPlayerBoard() < 5) {
-+                    int place = this.player.getBoard().putMonster(monsterCardWithoutTributeWithMaxAttackPointInHand(), "OO");
-+                    setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());
-+                    this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();
-+                }
-         }
-     }
- 
-@@ -1126,14 +1172,24 @@
-         }
-     }
- 
-+    //TODO monster ha ke set mishan unayi ke monstercard return mikonan shayad null bede!
-+    //TODO biad bad az har bar attack alamat bezanatesh ke ta hala bahash atack zade
-     private void attackInAI() {
-         if (numberOfMonstersOnPlayerBoard() > 0) {
-+            ArrayList<Integer> hasAttacked = new ArrayList<>();
-             if (numberOfMonstersOnRivalBoard() == 0)
-                 directAttackInAI();
--            else if (allCardsOnRivalAreDH())
--                attackAllDHInAI(numberOfMonstersOnRivalBoard(), numberOfMonstersOnPlayerBoard());
--            else if (monsterCardWithMostAttackPointOnPlayerBoard() != 10 && monsterCardWithMostAttackPointOnRivalBoard() != 10) {
-+            if (allCardsOnRivalAreDH()) {
-+                int numberOfAttacks = minFinder(numberOfMonstersOnRivalBoard(), numberOfMonstersOnPlayerBoard());
-+                for (int i = 0; i < numberOfAttacks; i++) {
-+                    //TODO if already bahash attack nazade
-+                    attackAllDHInAI();
-+                }
-+            }
-+            if (monsterCardWithMostAttackPointOnPlayerBoard() != 10 && monsterCardWithMostAttackPointOnRivalBoard() != 10) {
-                 attackOOInAI();
-+                if (numberOfMonstersOnRivalBoard() == 0)
-+                    directAttackInAI();
-             }
-         }
-     }
-@@ -1141,18 +1197,20 @@
-     private boolean allCardsOnRivalAreDH() {
-         int counterOfDH = 0;
-         int counterOfCards = 0;
--        for (int i = 0; i < 5; i++) {
-+        for (int i = 1; i < 6; i++) {
-             if (this.rival.getBoard().getMonsterByNumber(i) != null) {
-                 counterOfCards++;
-                 if (!this.rival.getBoard().getMonsterConditionByNumber(i).equals("DH"))
-                     counterOfDH++;
-             }
-         }
--        return counterOfDH == counterOfCards;
-+        if (counterOfDH == counterOfCards)
-+            return true;
-+        else return false;
-     }
- 
-     private void directAttackInAI() {
--        for (int i = 0; i < 5; i++) {
-+        for (int i = 1; i < 6; i++) {
-             MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);
-             if (monsterCard != null) {
-                 try {
-@@ -1166,65 +1224,44 @@
-         }
-     }
- 
--    private void attackAllDHInAI(int numberOfMonstersOnRivalBoard, int numberOfMonstersOnPlayerBoard) {
--        int indexOfAttacker = 10;
--        ArrayList<Integer> monstersOnBoardIndex = new ArrayList<>();
--        for (int i = 0; i < 5; i++) {
--            if (this.rival.getBoard().getMonsterByNumber(i) != null)
--                monstersOnBoardIndex.add(i);
--        }
--        if (numberOfMonstersOnPlayerBoard > numberOfMonstersOnRivalBoard) {
--            for (int i = 0; i < numberOfMonstersOnRivalBoard; i++) {
--                if (i == 0)
--                    indexOfAttacker = monsterCardWithMostAttackPointOnPlayerBoard();
--                else if (i == 1)
--                    indexOfAttacker = monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard());
--                try {
--                    selectCardPlayerMonsterZone(indexOfAttacker);
--                    attackMonsterDH(monstersOnBoardIndex.get(i));
--                    unselectCard();
--                } catch (Exception exception) {
--                    exception.printStackTrace();
--                }
--            }
--        } else {
--            for (int i = 0; i < numberOfMonstersOnPlayerBoard; i++) {
--                if (i == 0)
--                    indexOfAttacker = monsterCardWithMostAttackPointOnPlayerBoard();
--                if (i == 1)
--                    indexOfAttacker = monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard());
--                try {
--                    selectCardPlayerMonsterZone(indexOfAttacker);
--                    attackMonsterDH(monstersOnBoardIndex.get(i));
--                    unselectCard();
--                } catch (Exception exception) {
--                    exception.printStackTrace();
--                }
--            }
-+    private void attackAllDHInAI() {
-+        try {
-+            selectCardPlayerMonsterZone(monsterCardWithMostAttackPointOnPlayerBoard());
-+            int wantedMonster = 0;
-+            for (int i = 1; i < 6; i++) {
-+                MonsterCard monsterCard = this.rival.getBoard().getMonsterByNumber(i);
-+                if (monsterCard != null) {
-+                    wantedMonster = i;
-+                    break;
-+                }
-+            }
-+            attackMonsterDH(wantedMonster);
-+        } catch (Exception exception) {
-+            exception.printStackTrace();
-         }
-     }
- 
-     private void attackOOInAI() {
--        if (monsterCardWithMostAttackPointOnPlayerBoard() != 10 && this.rival.getBoard().getMonsterConditionByNumber(monsterCardWithMostAttackPointOnRivalBoard()).equals("OO")) {
-+        if (this.rival.getBoard().getMonsterConditionByNumber(monsterCardWithMostAttackPointOnRivalBoard()).equals("OO")) {
-             MonsterCard strongestRivalAttacker = this.rival.getBoard().getMonsterByNumber(monsterCardWithLeaseAttackPointOnRivalBoard());
-             MonsterCard strongestPlayerAttacker = this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard());
--            if (strongestRivalAttacker != null && strongestPlayerAttacker != null) {
--                if (strongestPlayerAttacker.getAttack() > strongestRivalAttacker.getAttack()) {
--                    try {
--                        attackMonsterOO(monsterCardWithMostAttackPointOnRivalBoard());
--                    } catch (Exception exception) {
--                        exception.printStackTrace();
--                    }
--                }
--            } else if (monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard()) != 10) {
--                MonsterCard secondStrongestRivalAttacker = this.rival.getBoard().getMonsterByNumber(monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard()));
--                assert strongestPlayerAttacker != null;
--                if (strongestPlayerAttacker.getAttack() > secondStrongestRivalAttacker.getAttack()) {
--                    try {
--                        attackMonsterOO(monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithLeaseAttackPointOnRivalBoard()));
--                    } catch (Exception exception) {
--                        exception.printStackTrace();
--                    }
-+            if (strongestPlayerAttacker.getAttack() > strongestRivalAttacker.getAttack()) {
-+                //TODO exception already attacked
-+                try {
-+                    attackMonsterOO(monsterCardWithMostAttackPointOnRivalBoard());
-+                } catch (Exception exception) {
-+                    exception.printStackTrace();
-+                }
-+            }
-+            int indexOfSecondStrongestAttackerOnRival = monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnRivalBoard());
-+            MonsterCard secondStrongestRivalAttacker = this.rival.getBoard().getMonsterByNumber(indexOfSecondStrongestAttackerOnRival);
-+            if (secondStrongestRivalAttacker.getAttack() < strongestPlayerAttacker.getAttack())
-+            //fixme selectCard o in chiza ke alan vaghan halesho nadaram
-+            {
-+                try {
-+                    attackMonsterOO(indexOfSecondStrongestAttackerOnRival);
-+                } catch (Exception exception) {
-+                    exception.printStackTrace();
-                 }
-             }
-         }
-@@ -1233,17 +1270,15 @@
-     private void changePositionInAI() {
-         MonsterCard leastAttackerOnRival = this.rival.getBoard().getMonsterByNumber(monsterCardWithLeaseAttackPointOnRivalBoard());
-         MonsterCard strongestAttackerOnPlayer = this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard());
--        if (leastAttackerOnRival != null && strongestAttackerOnPlayer != null) {
--            if (leastAttackerOnRival.getAttack() > strongestAttackerOnPlayer.getAttack()) {
--                for (int i = 0; i < 5; i++) {
--                    MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);
--                    if (monsterCard != null)
--                        this.player.getBoard().changeMonsterPosition(i, "DO");
--                }
--            }
-+        if (leastAttackerOnRival.getAttack() > strongestAttackerOnPlayer.getAttack()) ;
-+        for (int i = 1; i < 6; i++) {
-+            MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);
-+            if (monsterCard != null)
-+                this.player.getBoard().changeMonsterPosition(i, "DO");
-         }
-     }
- 
-+    //varede nahie debug shodeye shaki mishavid
-     private MonsterCard monsterCardWithoutTributeWithMaxAttackPointInHand() {
-         int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();
-         int maxAttackPoint = 0;
-@@ -1326,7 +1361,7 @@
-     private int monsterCardWithLeaseAttackPointOnRivalBoard() {
-         int leastAttackPoint = 100000;
-         int indexOfMinAttacker = 10;
--        for (int i = 0; i < 5; i++) {
-+        for (int i = 1; i <= 5; i++) {
-             MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);
-             if (card != null)
-                 if (this.rival.getBoard().getSpellAndTrapConditionByNumber(i).equals("OO"))
-@@ -1341,7 +1376,7 @@
-     private int monsterCardWithLeaseAttackPointOnPlayerBoard() {
-         int leastAttackPoint = 100000;
-         int indexOfMinAttacker = 10;
--        for (int i = 0; i < 5; i++) {
-+        for (int i = 1; i <= 5; i++) {
-             MonsterCard card = this.player.getBoard().getMonsterByNumber(i);
-             if (card != null)
-                 if (this.player.getBoard().getSpellAndTrapConditionByNumber(i).equals("OO"))
-@@ -1353,12 +1388,12 @@
-         return indexOfMinAttacker;
-     }
- 
--
-     private int monsterCardWithSecondMostAttackPointOnRivalBoard(int indexOfStrongestAttacker) {
-         int indexOfSecondStrongestAttacker = 10;
-         int secondMostAttackPoint = 0;
-         if (numberOfMonstersOnPlayerBoard() > 1) {
--            for (int i = 0; i < 5; i++) {
-+            indexOfStrongestAttacker = monsterCardWithMostAttackPointOnRivalBoard();
-+            for (int i = 1; i <= 5; i++) {
-                 MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);
-                 if (card != null)
-                     if (i != indexOfStrongestAttacker && this.rival.getBoard().getMonsterConditionByNumber(i).equals("OO")) {
-@@ -1375,10 +1410,10 @@
-     private int monsterCardWithMostAttackPointOnPlayerBoard() {
-         int mostAttackPoint = 0;
-         int indexOfMaxAttacker = 10;
--        for (int i = 0; i < 5; i++) {
-+        for (int i = 1; i <= 5; i++) {
-             MonsterCard card = this.player.getBoard().getMonsterByNumber(i);
-             if (card != null)
--                if (this.player.getBoard().getMonsterConditionByNumber(i).equals("OO"))
-+                if (this.player.getBoard().getSpellAndTrapConditionByNumber(i).equals("OO"))
-                     if (mostAttackPoint < card.getAttack()) {
-                         indexOfMaxAttacker = i;
-                         mostAttackPoint = card.getAttack();
-@@ -1390,7 +1425,7 @@
-     private int monsterCardWithLeastDefencePointOnRivalBoard() {
-         int leastDefencePoint = 100000;
-         int indexOfMinDefender = 10;
--        for (int i = 0; i < 5; i++) {
-+        for (int i = 1; i <= 5; i++) {
-             MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);
-             if (card != null)
-                 if (this.rival.getBoard().getMonsterConditionByNumber(i).equals("DO"))
-@@ -1405,7 +1440,7 @@
-     private int monsterCardWithMostAttackPointOnRivalBoard() {
-         int mostAttackPoint = 0;
-         int indexOfMaxAttacker = 10;
--        for (int i = 0; i < 5; i++) {
-+        for (int i = 1; i <= 5; i++) {
-             MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);
-             if (card != null)
-                 if (this.rival.getBoard().getMonsterConditionByNumber(i).equals("OO"))
-@@ -1420,7 +1455,7 @@
-     private int monsterCardWithMostDefencePointOnRivalBoard() {
-         int mostDefencePoint = 0;
-         int indexOfMaxDefender = 10;
--        for (int i = 0; i < 5; i++) {
-+        for (int i = 1; i <= 5; i++) {
-             MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);
-             if (card != null)
-                 if (this.rival.getBoard().getMonsterConditionByNumber(i).equals("DO"))
-@@ -1431,10 +1466,12 @@
-         }
-         return indexOfMaxDefender;
-     }
-+    //payane nahie debug shode shaki
- 
-+    //varede nahie debug shode (be omide khoda) tazmin shode mishavid
-     private int numberOfMonstersOnPlayerBoard() {
-         int numberOfMonsters = 0;
--        for (int i = 0; i < 5; i++) {
-+        for (int i = 1; i <= 5; i++) {
-             MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);
-             if (monsterCard != null)
-                 numberOfMonsters++;
-@@ -1444,7 +1481,7 @@
- 
-     private int numberOfMonstersOnRivalBoard() {
-         int numberOfMonsters = 0;
--        for (int i = 0; i < 5; i++) {
-+        for (int i = 1; i <= 5; i++) {
-             MonsterCard monsterCard = this.rival.getBoard().getMonsterByNumber(i);
-             if (monsterCard != null)
-                 numberOfMonsters++;
-@@ -1452,10 +1489,9 @@
-         return numberOfMonsters;
-     }
- 
--
-     private int numberOfSpellsAndTrapsOnPlayerBoard() {
-         int numberOfSpellsAndTraps = 0;
--        for (int i = 0; i < 5; i++) {
-+        for (int i = 1; i <= 5; i++) {
-             Cardable card = this.player.getBoard().getSpellAndTrapByNumber(i);
-             if (card != null)
-                 numberOfSpellsAndTraps++;
-@@ -1498,9 +1534,12 @@
-         }
-         return numberOfWantedMonsters;
-     }
-+    //payane nahie debug shode
- 
-     public int minFinder(int firstNumber, int secondNumber) {
--        return Math.min(firstNumber, secondNumber);
-+        if (firstNumber >= secondNumber)
-+            return secondNumber;
-+        else return firstNumber;
-     }
- 
- 
-Index: src/main/java/model/Board.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package model;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Board {\r\n    /*private static final int[] playerGroundNumbers = {3,4,2,5,1};\r\n    private static final int[] opponentGroundNumbers = {3,2,4,1,5};*/\r\n    private static final int[] playerGroundNumbers = {2,3,1,4,0};\r\n    private static final int[] opponentGroundNumbers = {2,1,3,0,4};\r\n    private List<Cardable> cardsInHand;\r\n    private List<Cardable> cardsInGraveyard;\r\n    private MonsterCard[] monsters;\r\n    private String[] monstersCondition;\r\n    private Cardable[] spellsAndTraps;\r\n    private String[] spellsAndTrapsCondition;\r\n    private Cardable fieldZone;\r\n\r\n    public Board() {\r\n        this.cardsInHand = new ArrayList<>();\r\n        this.cardsInGraveyard = new ArrayList<>();\r\n        this.monsters = new MonsterCard[5];\r\n        this.monstersCondition = new String[5];\r\n        this.spellsAndTraps = new Cardable[5];\r\n        this.spellsAndTrapsCondition = new String[5];\r\n        this.fieldZone = null;\r\n    }\r\n\r\n    public List<Cardable> getCardsInHand() {\r\n        return this.cardsInHand;\r\n    }\r\n\r\n    public Cardable getFieldZone() {\r\n        if (this.fieldZone==null) {\r\n            return null;\r\n        } else return this.fieldZone;\r\n    }\r\n\r\n    public MonsterCard[] getMonsters() {\r\n        return this.monsters;\r\n    }\r\n\r\n    public Cardable[] getSpellsAndTraps() {\r\n        return this.spellsAndTraps;\r\n    }\r\n\r\n    public MonsterCard getMonsterByNumber(int number) {\r\n        return this.monsters[number];\r\n    }\r\n\r\n    public Cardable getSpellAndTrapByNumber(int number) {\r\n        return this.spellsAndTraps[number];\r\n    }\r\n\r\n    public String getMonsterConditionByNumber(int number) {\r\n        return this.monstersCondition[number];\r\n    }\r\n\r\n    public String getSpellAndTrapConditionByNumber(int number) {\r\n        return this.spellsAndTrapsCondition[number];\r\n    }\r\n\r\n    public List<Cardable> getCardsInGraveyard() {\r\n        return this.cardsInGraveyard;\r\n    }\r\n\r\n    public Cardable getCardInHandByNumber(int number) {\r\n        return this.cardsInHand.get(number);\r\n    }\r\n\r\n    public void removeCardFromHand(Cardable card) {\r\n        this.cardsInHand.remove(card);\r\n    }\r\n\r\n    public void addCardToHand(Cardable card) {\r\n        this.cardsInHand.add(card);\r\n    }\r\n\r\n    public int putMonster(MonsterCard monsterCard,String condition){\r\n        for(int i=0;i<5;i++){\r\n            if(this.monsters[playerGroundNumbers[i]] == null){\r\n                this.monsters[playerGroundNumbers[i]] =monsterCard;\r\n                this.monstersCondition[playerGroundNumbers[i]] =condition;\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public void removeMonster(int number) {\r\n        this.monsters[number] = null;\r\n        this.monstersCondition[number] = null;\r\n    }\r\n\r\n    public int putSpellOrTrap(Cardable card, String condition) {\r\n        for(int i=0;i<5;i++){\r\n            if(this.spellsAndTraps[playerGroundNumbers[i]] == null){\r\n                this.spellsAndTraps[playerGroundNumbers[i]] =card;\r\n                this.spellsAndTrapsCondition[playerGroundNumbers[i]] =condition;\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public void removeSpellOrTrap(int number) {\r\n        this.spellsAndTraps[number] = null;\r\n        this.spellsAndTrapsCondition[number] = null;\r\n    }\r\n\r\n    public boolean existsOnBoard(Cardable card) {\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.monsters[i].equals(card)) return true;\r\n            if (this.spellsAndTraps[i].equals(card)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void changeMonsterPosition(int index,String target){\r\n        this.monstersCondition[index] = target;\r\n    }\r\n\r\n    public boolean isFullSpellAndTrapZone(){\r\n        for (int i = 0; i < 5; i++){\r\n            if (this.spellsAndTraps[i] == null) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isFullMonsterZone() {\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.monsters[i] == null) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void putInFieldZone(Cardable card) {\r\n        this.fieldZone = card;\r\n    }\r\n\r\n    public void removeFromFieldZone() {\r\n        this.fieldZone = null;\r\n    }\r\n\r\n    public void putInGraveYard(Cardable card) {\r\n        this.cardsInGraveyard.add(card);\r\n    }\r\n\r\n    public void removeFromGraveYard(Cardable card) {\r\n        this.cardsInGraveyard.remove(card);\r\n    }\r\n\r\n    //TODO man ino ye kam avaz kardam bana be dalayeli ke tozih midam va dige in tabe lazem nabood-parmida\r\n    /*//TODO hamraz ino ezafe kard:\r\n    public boolean doesHaveMonsterInHand(){\r\n        int counterOfMonsters = 0;\r\n        for (Card card : cardsInHand) {\r\n            if (card instanceof MonsterCard)\r\n                counterOfMonsters ++;\r\n        }\r\n        return counterOfMonsters > 0;\r\n    }*/\r\n\r\n    /*public String toStringForPlayer() {\r\n        String toReturn = \"--------------------------\\n\" +\r\n                \"\\n\";\r\n        if (fieldZone.equals(null))\r\n            toReturn += \"E\";\r\n        else toReturn += \"O\";\r\n        toReturn += \"                     \" + this.cardsInGraveyard.size() + \"\\n\";\r\n        for (int index = 0; index < 5; index++) {\r\n            if (this.monsters[index].equals(null)) {\r\n                toReturn += \"   E\";\r\n            } else {\r\n                toReturn += \"   \" + this.monstersCondition[index];\r\n            }\r\n\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    public String toStringForRival(){\r\n        String toReturn = \"\";\r\n        for(int i=0;i<cardsInHand.size()-1;i++){\r\n            toReturn += \"c\\t\";\r\n        }\r\n        toReturn+=\"c\\n\";\r\n        toReturn+=this.\r\n    }*/\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- src/main/java/model/Board.java	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ src/main/java/model/Board.java	(date 1624635417914)
-@@ -1,5 +1,7 @@
- package model;
- 
-+import controller.DuelController;
-+
- import java.util.ArrayList;
- import java.util.List;
- 
-@@ -81,15 +83,23 @@
-             if(this.monsters[playerGroundNumbers[i]] == null){
-                 this.monsters[playerGroundNumbers[i]] =monsterCard;
-                 this.monstersCondition[playerGroundNumbers[i]] =condition;
--                return i;
-+                return playerGroundNumbers[i];
-             }
-         }
-         return 0;
-     }
- 
--    public void removeMonster(int number) {
-+    public void removeMonster(int number, DuelController duelController,User owner) {
-         this.monsters[number] = null;
-         this.monstersCondition[number] = null;
-+        if(owner.getUsername().equals(duelController.getPlayer().getUsername())){
-+            duelController.setMonsterAttackPlayer(number,null);
-+            duelController.setMonsterDefencePlayer(number,null);
-+        }
-+        else {
-+            duelController.setMonsterAttackRival(number,null);
-+            duelController.setMonsterDefenceRival(number,null);
-+        }
-     }
- 
-     public int putSpellOrTrap(Cardable card, String condition) {
-@@ -117,6 +127,7 @@
-     }
- 
-     public void changeMonsterPosition(int index,String target){
-+
-         this.monstersCondition[index] = target;
-     }
- 
-Index: src/main/java/view/DuelView.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package view;\r\n\r\nimport controller.DuelController;\r\nimport model.User;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class DuelView {\r\n    private DuelController duelController;\r\n\r\n    static public void printText(String output) {\r\n        System.out.println(output);\r\n    }\r\n\r\n    public static String scan() {\r\n        return ScannerClassForView.getScanner().nextLine();\r\n    }\r\n\r\n    public DuelView(User user, User rival, int roundNumber) {\r\n        duelController = new DuelController(user, rival, roundNumber);\r\n    }\r\n\r\n    public void getCommandForDuel() {\r\n        String command;\r\n        while (ScannerClassForView.getScanner().hasNext()) {\r\n            command = ScannerClassForView.getScanner().nextLine();\r\n            if (processCommand(command) ) break;\r\n            if(duelController.getShouldEndGameForView()) break;\r\n            duelController.manageEndGame();\r\n            if(duelController.getShouldEndGameForView()) break;\r\n        }\r\n    }\r\n\r\n    private boolean processCommand(String command) {\r\n        if (command.equals(\"select -d\")) {\r\n            try {\r\n                duelController.unselectCardFromCommand();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        Matcher matcher = getCommandMatcher(command, \"select ([\\\\w -]+)\");\r\n        if (matcher.matches()) {\r\n            Matcher isOpponent = getCommandMatcher(matcher.group(1), \"(--opponent|-o)\");\r\n            Matcher isMonster = getCommandMatcher(matcher.group(1), \"(--monster|-m)\");\r\n            Matcher isSpellAndTrap = getCommandMatcher(matcher.group(1), \"(--spell|-s)\");\r\n            Matcher isFieldZone = getCommandMatcher(matcher.group(1), \"(--field|-f)\");\r\n            Matcher isHand = getCommandMatcher(matcher.group(1), \"(--hand|-h)\");\r\n            Matcher numberMatcher = getCommandMatcher(matcher.group(1), \"[0-9]+\");\r\n            if (isMonster.find(0) && isOpponent.find(0) && numberMatcher.find(0)) {\r\n                try {\r\n                    duelController.selectCardOpponentMonsterZone(Integer.parseInt(numberMatcher.group()));\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isMonster.find(0) && numberMatcher.find(0)) {\r\n                try {\r\n                    duelController.selectCardPlayerMonsterZone(Integer.parseInt(numberMatcher.group()));\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isSpellAndTrap.find(0) && isOpponent.find(0) && numberMatcher.find(0)) {\r\n                try {\r\n                    duelController.selectCardOpponentTrapAndSpellZone(Integer.parseInt(numberMatcher.group()));\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isSpellAndTrap.find(0) && numberMatcher.find(0)) {\r\n                try {\r\n//                    System.out.println(\"kj\");\r\n                    duelController.selectCardPlayerTrapAndSpellZone(Integer.parseInt(numberMatcher.group()));\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isFieldZone.find(0) && isOpponent.find(0)) {\r\n                try {\r\n                    duelController.selectCardOpponentFieldZone();\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isFieldZone.find(0)) {\r\n                try {\r\n                    duelController.selectCardPlayerFieldZone();\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else if (isHand.find(0) && numberMatcher.find(0)) {\r\n                try {\r\n                    duelController.selectCardPlayerHand(Integer.parseInt(numberMatcher.group()));\r\n                } catch (Exception exception) {\r\n                    printText(exception.getMessage());\r\n                }\r\n            } else printText(\"invalid selection\");\r\n            return false;\r\n        }\r\n\r\n        if (command.equals(\"next phase\")) {\r\n            duelController.goNextPhase();\r\n            return false;\r\n        }\r\n        if (command.equals(\"summon\")) {\r\n            try {\r\n                duelController.summonMonster();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        matcher = getCommandMatcher(command, \"set (--position|-p) (DO|OO)\");\r\n        if (matcher.matches()) {\r\n            try {\r\n                duelController.changePosition(matcher.group(2));\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n\r\n            }\r\n            return false;\r\n        }\r\n        if (command.equals(\"set\")) {\r\n            try {\r\n                duelController.preSet();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        if (command.equals(\"flip-summon\")) {\r\n            try {\r\n                duelController.flipSummon();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n\r\n            }\r\n            return false;\r\n        }\r\n        matcher = getCommandMatcher(command, \"attack ([1-5])\");\r\n        if (matcher.matches()) {\r\n            try {\r\n                duelController.attackMonster(Integer.parseInt(matcher.group(1)));\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        if (command.equals(\"attack direct\")) {\r\n            try {\r\n                duelController.directAttack();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        if (command.equals(\"activate effect\")) {\r\n            try {\r\n                duelController.activateSpell();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        //TODO aya bayad un faal sazie spell tu nobate harif ro tu view bezanim?\r\n        if (command.equals(\"show graveyard\")) {\r\n            try {\r\n                duelController.showGraveyard();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        matcher = getCommandMatcher(command, \"card show (--selected|-s)\");\r\n        if (matcher.matches()) {\r\n            try {\r\n                duelController.showCard();\r\n            } catch (Exception exception) {\r\n                printText(exception.getMessage());\r\n            }\r\n            return false;\r\n        }\r\n        if (command.equals(\"surrender\")) {\r\n            duelController.surrender();\r\n            return true;\r\n        }\r\n        if (command.startsWith(\"menu enter \")) {\r\n            printText(\"menu navigation is not possible\");\r\n            return false;\r\n        }\r\n        matcher = getCommandMatcher(command,\"edoCtaehc tnioPefil ([\\\\w -]+) ([\\\\w -]+)\");\r\n        if (matcher.matches()){\r\n            Matcher isOpponent = getCommandMatcher(matcher.group(1),\"tnenoppo\");\r\n            Matcher isPlayer = getCommandMatcher(matcher.group(1),\"reyalp\");\r\n            Matcher lifePoint = getCommandMatcher(matcher.group(2),\"[0-9]+\");\r\n            if (isOpponent.find() && lifePoint.find())\r\n                duelController.cheatLifePoint(\"opponent\",Integer.parseInt(lifePoint.group()));\r\n            if (isPlayer.find() && lifePoint.find())\r\n                duelController.cheatLifePoint(\"player\",Integer.parseInt(lifePoint.group()));\r\n\r\n            return false;\r\n        }\r\n        matcher = getCommandMatcher(command, \"edoCtaehc yenom ([0-9]+)\");\r\n        if (matcher.matches()){\r\n            int amount = Integer.parseInt(matcher.group(1));\r\n            duelController.cheatMoney(amount);\r\n            return false;\r\n        }\r\n        if (command.equals(\"niw ot tnaw tsuj i tub od ot gniht dab yrev a si gnitaehc wonk i\")){\r\n            duelController.cheatToWinGame();\r\n            return false;\r\n        }\r\n        printText(\"invalid command\");\r\n        return false;\r\n    }\r\n\r\n    private Matcher getCommandMatcher(String command, String regex) {\r\n        Pattern pattern = Pattern.compile(regex);\r\n        return pattern.matcher(command);\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- src/main/java/view/DuelView.java	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ src/main/java/view/DuelView.java	(date 1624631320525)
-@@ -108,7 +108,7 @@
-             }
-             return false;
-         }
--        matcher = getCommandMatcher(command, "set (--position|-p) (DO|OO)");
-+        matcher = getCommandMatcher(command, "set (--position|-p) (attack|defence)");
-         if (matcher.matches()) {
-             try {
-                 duelController.changePosition(matcher.group(2));
-Index: allUsers.txt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- allUsers.txt	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ allUsers.txt	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-@@ -1,1 +0,0 @@
--hamraz
-Index: Users/hamraz.txt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- Users/hamraz.txt	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ Users/hamraz.txt	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-@@ -1,5 +0,0 @@
--hamraz
--123
--hamriouz
--0
--100000
-\ No newline at end of file
-Index: src/main/java/controller/ImportExportUserController.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package controller;\r\n\r\nimport controller.exeption.RepetitiveNickname;\r\nimport controller.exeption.RepetitiveUsername;\r\nimport model.Cardable;\r\nimport model.Deck;\r\nimport model.User;\r\n\r\nimport javax.smartcardio.Card;\r\nimport java.io.*;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class ImportExportUserController {\r\n    private static ImportExportUserController instance = null;\r\n\r\n    public static ImportExportUserController getInstance() {\r\n        if (instance == null) instance = new ImportExportUserController();\r\n        return instance;\r\n    }\r\n\r\n    public void exportNewUser(User user) {\r\n        if (user != null) {\r\n            String username = user.getUsername();\r\n            String password = user.getPassword();\r\n            String nickname = user.getNickname();\r\n            int highScore = user.getScore();\r\n            int balance = user.getMoney();\r\n            try {\r\n                FileWriter writer = new FileWriter(\"Users/\" + username + \".txt\");\r\n                writer.write(username + \"\\n\" + password + \"\\n\" + nickname + \"\\n\" + highScore + \"\\n\" + balance);\r\n                writer.close();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public void exportAllUsers(List<User> allUsers) {\r\n        try {\r\n            FileWriter writer = new FileWriter(\"allUsers.txt\");\r\n            for (User user : allUsers) {\r\n                String username = user.getUsername();\r\n                writer.write(username + \"\\n\");\r\n            }\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void importAllUsers() {\r\n        String username = \"\";\r\n        String password = \"\";\r\n        String nickname = \"\";\r\n        String highScore = \"\";\r\n        String balance = \"\";\r\n        File file = new File(\"allUsers.txt\");\r\n\r\n        try {\r\n            if (file.exists()) {\r\n                Scanner scanner = new Scanner(file);\r\n                while (scanner.hasNextLine()) {\r\n                    username = scanner.nextLine();\r\n                    File userFile = new File(\"Users/\" + username + \".txt\");\r\n                    if (userFile.exists()) {\r\n                        Scanner userScanner = new Scanner(userFile);\r\n                        int counter = 5;\r\n                        while (userScanner.hasNextLine()) {\r\n                            if (counter == 5)\r\n                                username = userScanner.nextLine();\r\n                            if (counter == 4)\r\n                                password = userScanner.nextLine();\r\n                            if (counter == 3)\r\n                                nickname = userScanner.nextLine();\r\n                            if (counter == 2)\r\n                                highScore = userScanner.nextLine();\r\n                            if (counter == 1)\r\n                                balance = userScanner.nextLine();\r\n                            if (counter == 0)\r\n                                break;\r\n                            counter--;\r\n                        }\r\n                        User user = new User(username, nickname, password);\r\n                        if (balance.matches(\"\\\\d+\") && highScore.matches(\"\\\\d+\")) {\r\n                            user.setMoney(Integer.parseInt(balance));\r\n                            user.setScore(Integer.parseInt(highScore));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void exportAllDecksName(List<Deck> allDecks, User user) {\r\n        String username = user.getUsername();\r\n        try {\r\n            FileWriter fileWriter = new FileWriter(\"UsersDecks/\" + username + \"AllDecks.txt\");\r\n            for (Deck deck : allDecks) {\r\n                String deckName = deck.getDeckName();\r\n                fileWriter.write(deckName + \"\\n\");\r\n            }\r\n            fileWriter.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void exportCardsInMainDeck(User user, String deckName) {\r\n        String username = user.getUsername();\r\n        try {\r\n            FileWriter writer = new FileWriter(\"Deck/\" + username + deckName + \"MainDeck.txt\");\r\n            Deck toBeExportedDeck = user.getDeckByName(deckName);\r\n            for (Cardable card : toBeExportedDeck.getMainDeck()) {\r\n                String cardName = card.getNamePascalCase();\r\n                writer.write(cardName + \"\\n\");\r\n            }\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void exportCardsInSideDeck(User user, String deckName) {\r\n        String username = user.getUsername();\r\n        try {\r\n            FileWriter writer = new FileWriter(\"Deck/\" + username + deckName + \"SideDeck.txt\");\r\n            Deck toBeExportedDeck = user.getDeckByName(deckName);\r\n            for (Cardable card : toBeExportedDeck.getSideDeck()) {\r\n                String cardName = card.getNamePascalCase();\r\n                writer.write(cardName + \"\\n\");\r\n            }\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void importAllDecks() {\r\n        if (User.getAllUsers() != null) {\r\n            for (User user : User.getAllUsers()) {\r\n                String username = user.getUsername();\r\n                File file = new File(\"UsersDecks/\" + username + \"AllDecks.txt\");\r\n                String deckName;\r\n                try {\r\n                    if (file.exists()) {\r\n                        Scanner scanner = new Scanner(file);\r\n                        while (scanner.hasNextLine()) {\r\n                            deckName = scanner.nextLine();\r\n                            Deck deck = new Deck(deckName);\r\n                            File mainDeckFile = new File(\"Deck/\" + user.getUsername() + deckName + \"MainDeck.txt\");\r\n                            File sideDeckFile = new File(\"Deck/\" + user.getUsername() + deckName + \"SideDeck.txt\");\r\n                            if (mainDeckFile.exists()) {\r\n                                Scanner mainDeckScanner = new Scanner(mainDeckFile);\r\n\r\n                                while (mainDeckScanner.hasNextLine()) {\r\n                                    String cardName = mainDeckScanner.nextLine();\r\n                                    deck.addCardToMainDeck(DeckController.getInstance(user).getCardByName(cardName));\r\n                                }\r\n                            }\r\n                            if (sideDeckFile.exists()) {\r\n                                Scanner sideDeckScanner = new Scanner(sideDeckFile);\r\n                                while (sideDeckScanner.hasNextLine()) {\r\n                                    String cardName = sideDeckScanner.nextLine();\r\n                                    deck.addCardToSideDeck(DeckController.getInstance(user).getCardByName(cardName));\r\n                                }\r\n                            }\r\n                            user.addDeck(deck);\r\n                        }\r\n                    }\r\n                } catch (FileNotFoundException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void exportAllCards(User user) {\r\n        try {\r\n            FileWriter writer = new FileWriter(\"Cards/\" + user.getUsername() + \".txt\");\r\n            for (Cardable card : user.getAllCards()) {\r\n                String cardName = card.getNamePascalCase();\r\n                writer.write(cardName + \"\\n\");\r\n            }\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void importAllCards() {\r\n        if (User.getAllUsers() != null) {\r\n            for (User user : User.getAllUsers()) {\r\n                String username = user.getUsername();\r\n                File file = new File(\"Cards/\" + username + \".txt\");\r\n                if (file.exists()) {\r\n                    try {\r\n                        Scanner scanner = new Scanner(file);\r\n                        while (scanner.hasNextLine()) {\r\n                            String cardName = scanner.nextLine();\r\n                            user.addCardToUsersAllCards(DeckController.getInstance(user).getCardByName(cardName));\r\n                        }\r\n                    } catch (FileNotFoundException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- src/main/java/controller/ImportExportUserController.java	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ src/main/java/controller/ImportExportUserController.java	(date 1624628110890)
-@@ -1,3 +1,4 @@
-+/*
- package controller;
- 
- import controller.exeption.RepetitiveNickname;
-@@ -214,3 +215,4 @@
-         }
-     }
- }
-+*/
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0b1707ad-3e75-4310-9619-956ec670ae1a\" name=\"Default Changelist\" comment=\"hamraz\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Users/hamraz.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Users/hamraz.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/allUsers.txt\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/controller/DeckController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/controller/DeckController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/controller/DuelController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/controller/DuelController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/controller/ImportExportUserController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/controller/ImportExportUserController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/controller/ShopController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/controller/ShopController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/model/Board.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/model/Board.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/model/Deck.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/model/Deck.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/model/User.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/model/User.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/view/DeckView.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/view/DeckView.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/view/DuelView.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/view/DuelView.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/view/MainView.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/view/MainView.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1tf7blqKJ2Y0dLvEX2lrUssvKzj\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../project_team_17_3/src\" />\r\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"project.structure.last.edited\" value=\"SDKs\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"reference.projectsettings.compiler.javacompiler\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"controller.exeption\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Main\">\r\n    <configuration default=\"true\" type=\"ArquillianTestNG\" factoryName=\"\" nameIsGenerated=\"true\">\r\n      <option name=\"arquillianRunConfiguration\">\r\n        <value>\r\n          <option name=\"containerStateName\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"TEST_OBJECT\" value=\"CLASS\" />\r\n      <properties />\r\n      <listeners />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"1.8\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"project_team_17_2\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.MainViewGraphic\" />\r\n      <module name=\"project_team_17\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ScoreBoardViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.ScoreBoardViewGraphic\" />\r\n      <module name=\"project_team_17_2\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"SignUpViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.SignUpViewGraphic\" />\r\n      <module name=\"project_team_17_2\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"test.testForMinFinder\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"project_team_17_2\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"test\" />\r\n      <option name=\"METHOD_NAME\" value=\"testForMinFinder\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"JUnit.test.testForMinFinder\" />\r\n        <item itemvalue=\"Application.MainViewGraphic\" />\r\n        <item itemvalue=\"Application.SignUpViewGraphic\" />\r\n        <item itemvalue=\"Application.ScoreBoardViewGraphic\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0b1707ad-3e75-4310-9619-956ec670ae1a\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1623148364579</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1623148364579</updated>\r\n      <workItem from=\"1624545878199\" duration=\"3232000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"ScoreBoardViewGraphic.java\">\r\n      <created>1623149665559</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623149665559</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"ScoreBoardViewGraphic.java\">\r\n      <created>1623149688409</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623149688409</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Error sign up\">\r\n      <created>1623151044078</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623151044078</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"model.SpellCard.java&#10;Monster Reborn + Terraforming\">\r\n      <created>1623868346229</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623868346229</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"model.SpellCard.java&#10;RAIGEKI + POT_OF_GREED\">\r\n      <created>1623946393997</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623946393997</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Yami SpellCard.java\">\r\n      <created>1624002906129</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624002906129</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Forest &amp; Closed Forest&#10;SpellCard.java\">\r\n      <created>1624012207305</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624012207305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"debug import user\">\r\n      <created>1624093680512</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624093680512</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"debug import user o baghie import ha\">\r\n      <created>1624099929742</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624099929742</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"kiana test error fix\">\r\n      <created>1624533248061</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624533248061</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"show all cards debug\">\r\n      <created>1624546002241</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624546002241</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"jabejayie cheat money\">\r\n      <created>1624547044985</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624547044985</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"draw phase automatic\">\r\n      <created>1624556390073</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624556390073</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"14\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"ScoreBoardViewGraphic.java\" />\r\n    <MESSAGE value=\"Error sign up\" />\r\n    <MESSAGE value=\"model.SpellCard.java&#10;Monster Reborn + Terraforming\" />\r\n    <MESSAGE value=\"model.SpellCard.java&#10;RAIGEKI + POT_OF_GREED\" />\r\n    <MESSAGE value=\"Yami SpellCard.java\" />\r\n    <MESSAGE value=\"Forest &amp; Closed Forest&#10;SpellCard.java\" />\r\n    <MESSAGE value=\"debug import user\" />\r\n    <MESSAGE value=\"debug import user o baghie import ha\" />\r\n    <MESSAGE value=\"kiana test error fix\" />\r\n    <MESSAGE value=\"show all cards debug\" />\r\n    <MESSAGE value=\"jabejayie cheat money\" />\r\n    <MESSAGE value=\"draw phase automatic\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"draw phase automatic\" />\r\n  </component>\r\n  <component name=\"WindowStateProjectService\">\r\n    <state width=\"1237\" height=\"338\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1624624526434\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"338\" key=\"GridCell.Tab.0.bottom/0.0.1280.680@0.0.1280.680\" timestamp=\"1624624526434\" />\r\n    <state width=\"1237\" height=\"338\" key=\"GridCell.Tab.0.center\" timestamp=\"1624624526434\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"338\" key=\"GridCell.Tab.0.center/0.0.1280.680@0.0.1280.680\" timestamp=\"1624624526434\" />\r\n    <state width=\"1237\" height=\"338\" key=\"GridCell.Tab.0.left\" timestamp=\"1624624526434\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"338\" key=\"GridCell.Tab.0.left/0.0.1280.680@0.0.1280.680\" timestamp=\"1624624526434\" />\r\n    <state width=\"1237\" height=\"338\" key=\"GridCell.Tab.0.right\" timestamp=\"1624624526434\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"338\" key=\"GridCell.Tab.0.right/0.0.1280.680@0.0.1280.680\" timestamp=\"1624624526434\" />\r\n    <state x=\"233\" y=\"74\" key=\"Vcs.Push.Dialog.v2\" timestamp=\"1624556391883\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state x=\"233\" y=\"74\" key=\"Vcs.Push.Dialog.v2/0.0.1280.680@0.0.1280.680\" timestamp=\"1624556391883\" />\r\n    <state x=\"297\" y=\"151\" key=\"run.anything.popup\" timestamp=\"1624560055229\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state x=\"297\" y=\"151\" key=\"run.anything.popup/0.0.1280.680@0.0.1280.680\" timestamp=\"1624560055229\" />\r\n    <state x=\"303\" y=\"1\" width=\"672\" height=\"678\" key=\"search.everywhere.popup\" timestamp=\"1624623432354\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state x=\"303\" y=\"1\" width=\"672\" height=\"678\" key=\"search.everywhere.popup/0.0.1280.680@0.0.1280.680\" timestamp=\"1624623432354\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/workspace.xml	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ .idea/workspace.xml	(date 1624636404677)
-@@ -22,21 +22,19 @@
-     <select />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="0b1707ad-3e75-4310-9619-956ec670ae1a" name="Default Changelist" comment="hamraz">
-+    <list default="true" id="0b1707ad-3e75-4310-9619-956ec670ae1a" name="Default Changelist" comment="debug1">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/Users/hamraz.txt" beforeDir="false" afterPath="$PROJECT_DIR$/Users/hamraz.txt" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/Users/hamraz.txt" beforeDir="false" />
-       <change beforePath="$PROJECT_DIR$/allUsers.txt" beforeDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Main.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/controller/DeckController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controller/DeckController.java" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/controller/DuelController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controller/DuelController.java" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/controller/ImportExportUserController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controller/ImportExportUserController.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/controller/ShopController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controller/ShopController.java" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/model/Board.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/Board.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/model/Deck.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/Deck.java" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/src/main/java/model/MonsterAction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/MonsterAction.java" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/src/main/java/model/MonsterCard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/MonsterCard.java" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/src/main/java/model/SpellCard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/SpellCard.java" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/model/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/User.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/view/DeckView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/DeckView.java" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/main/java/view/DuelView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/DuelView.java" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/main/java/view/MainView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/MainView.java" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-@@ -95,7 +93,7 @@
-       <option name="ALTERNATIVE_JRE_PATH" value="1.8" />
-       <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
-       <option name="MAIN_CLASS_NAME" value="Main" />
--      <module name="project_team_17_2" />
-+      <module name="project_team_17" />
-       <method v="2">
-         <option name="Make" enabled="true" />
-       </method>
-@@ -160,6 +158,12 @@
-     </recent_temporary>
-   </component>
-   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
-+  <component name="StructuralSearchPlugin">
-+    <searchConfiguration name="Unnamed" created="1624627910553" text="/* $CommentContent$ */" recursive="false" caseInsensitive="false" type="JAVA" pattern_context="default" scope_type="PROJECT" scope_descriptor="" history="1">
-+      <constraint name="__context__" within="" contains="" />
-+      <constraint name="CommentContent" within="" contains="" />
-+    </searchConfiguration>
-+  </component>
-   <component name="TaskManager">
-     <task active="true" id="Default" summary="Default task">
-       <changelist id="0b1707ad-3e75-4310-9619-956ec670ae1a" name="Default Changelist" comment="" />
-@@ -260,7 +264,14 @@
-       <option name="project" value="LOCAL" />
-       <updated>1624556390073</updated>
-     </task>
--    <option name="localTasksCounter" value="14" />
-+    <task id="LOCAL-00014" summary="debug1">
-+      <created>1624625286861</created>
-+      <option name="number" value="00014" />
-+      <option name="presentableId" value="LOCAL-00014" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1624625286861</updated>
-+    </task>
-+    <option name="localTasksCounter" value="15" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -291,29 +302,46 @@
-     <MESSAGE value="show all cards debug" />
-     <MESSAGE value="jabejayie cheat money" />
-     <MESSAGE value="draw phase automatic" />
--    <option name="LAST_COMMIT_MESSAGE" value="draw phase automatic" />
-+    <MESSAGE value="debug1" />
-+    <option name="LAST_COMMIT_MESSAGE" value="debug1" />
-   </component>
-   <component name="WindowStateProjectService">
--    <state width="1237" height="338" key="GridCell.Tab.0.bottom" timestamp="1624624526434">
-+    <state x="446" y="42" key="#com.intellij.ide.util.MemberChooser" timestamp="1624635190568">
-       <screen x="0" y="0" width="1280" height="680" />
-     </state>
--    <state width="1237" height="338" key="GridCell.Tab.0.bottom/0.0.1280.680@0.0.1280.680" timestamp="1624624526434" />
--    <state width="1237" height="338" key="GridCell.Tab.0.center" timestamp="1624624526434">
-+    <state x="446" y="42" key="#com.intellij.ide.util.MemberChooser/0.0.1280.680@0.0.1280.680" timestamp="1624635190568" />
-+    <state x="170" y="166" width="942" height="348" key="#com.intellij.structuralsearch.plugin.ui.StructuralSearchDialog" timestamp="1624627910544">
-       <screen x="0" y="0" width="1280" height="680" />
-     </state>
--    <state width="1237" height="338" key="GridCell.Tab.0.center/0.0.1280.680@0.0.1280.680" timestamp="1624624526434" />
--    <state width="1237" height="338" key="GridCell.Tab.0.left" timestamp="1624624526434">
-+    <state x="170" y="166" width="942" height="348" key="#com.intellij.structuralsearch.plugin.ui.StructuralSearchDialog/0.0.1280.680@0.0.1280.680" timestamp="1624627910544" />
-+    <state width="1237" height="234" key="GridCell.Tab.0.bottom" timestamp="1624636032484">
-       <screen x="0" y="0" width="1280" height="680" />
-     </state>
--    <state width="1237" height="338" key="GridCell.Tab.0.left/0.0.1280.680@0.0.1280.680" timestamp="1624624526434" />
--    <state width="1237" height="338" key="GridCell.Tab.0.right" timestamp="1624624526434">
-+    <state width="1237" height="234" key="GridCell.Tab.0.bottom/0.0.1280.680@0.0.1280.680" timestamp="1624636032484" />
-+    <state width="1237" height="234" key="GridCell.Tab.0.center" timestamp="1624636032484">
-       <screen x="0" y="0" width="1280" height="680" />
-     </state>
--    <state width="1237" height="338" key="GridCell.Tab.0.right/0.0.1280.680@0.0.1280.680" timestamp="1624624526434" />
--    <state x="233" y="74" key="Vcs.Push.Dialog.v2" timestamp="1624556391883">
-+    <state width="1237" height="234" key="GridCell.Tab.0.center/0.0.1280.680@0.0.1280.680" timestamp="1624636032484" />
-+    <state width="1237" height="234" key="GridCell.Tab.0.left" timestamp="1624636032484">
-       <screen x="0" y="0" width="1280" height="680" />
-     </state>
--    <state x="233" y="74" key="Vcs.Push.Dialog.v2/0.0.1280.680@0.0.1280.680" timestamp="1624556391883" />
-+    <state width="1237" height="234" key="GridCell.Tab.0.left/0.0.1280.680@0.0.1280.680" timestamp="1624636032484" />
-+    <state width="1237" height="234" key="GridCell.Tab.0.right" timestamp="1624636032484">
-+      <screen x="0" y="0" width="1280" height="680" />
-+    </state>
-+    <state width="1237" height="234" key="GridCell.Tab.0.right/0.0.1280.680@0.0.1280.680" timestamp="1624636032484" />
-+    <state x="121" y="51" key="MergeDialog" timestamp="1624625355990">
-+      <screen x="0" y="0" width="1280" height="680" />
-+    </state>
-+    <state x="121" y="51" key="MergeDialog/0.0.1280.680@0.0.1280.680" timestamp="1624625355990" />
-+    <state x="280" y="102" key="MultipleFileMergeDialog" timestamp="1624625366881">
-+      <screen x="0" y="0" width="1280" height="680" />
-+    </state>
-+    <state x="280" y="102" key="MultipleFileMergeDialog/0.0.1280.680@0.0.1280.680" timestamp="1624625366881" />
-+    <state x="233" y="74" key="Vcs.Push.Dialog.v2" timestamp="1624625379373">
-+      <screen x="0" y="0" width="1280" height="680" />
-+    </state>
-+    <state x="233" y="74" key="Vcs.Push.Dialog.v2/0.0.1280.680@0.0.1280.680" timestamp="1624625379373" />
-     <state x="297" y="151" key="run.anything.popup" timestamp="1624560055229">
-       <screen x="0" y="0" width="1280" height="680" />
-     </state>
-Index: src/main/java/model/User.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package model;\r\n\r\n//import controller.ImportExportUserController;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class User {\r\n\r\n    private static List<User> allUsers;\r\n    private String username;\r\n    private String password;\r\n    private String nickname;\r\n    private int score;\r\n    private List<Cardable> allCards;\r\n    private List<Deck> allDecks;\r\n    private Deck currentActiveDeck;\r\n    private Deck currentGameDeck;\r\n    private int lifePoint;\r\n    private Board board;\r\n    private int money;\r\n\r\n    public User(String username, String nickname, String password) {\r\n        if (allUsers == null)\r\n            allUsers = new ArrayList<>();\r\n        this.allCards = new ArrayList<>();\r\n        this.allDecks = new ArrayList<>();\r\n        this.username = username;\r\n        this.nickname = nickname;\r\n        this.password = password;\r\n        this.currentActiveDeck = null;\r\n        setScore(0);\r\n        setMoney(100000);\r\n        allUsers.add(this);\r\n//        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n//        importExportUserController.exportNewUser(User.getUserByUsername(username));\r\n//        importExportUserController.exportAllUsers(User.getAllUsers());\r\n    }\r\n\r\n    public Deck getGameDeck() {\r\n        return this.currentGameDeck;\r\n    }\r\n\r\n    public void setGameDeck(Deck currentGameDeck) {\r\n        this.currentGameDeck = currentGameDeck;\r\n    }\r\n\r\n    public static User getUserByUsername(String username) {\r\n        if (allUsers != null) {\r\n            for (User user : allUsers) {\r\n                if (user.getUsername().equals(username))\r\n                    return user;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static User getUserByNickname(String nickname) {\r\n        for (User allUser : allUsers) {\r\n            if (allUser.getNickname().equals(nickname))\r\n                return allUser;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void removeDeck(Deck deck){\r\n        this.allDecks.remove(deck);\r\n    }\r\n\r\n    public void increaseScore(int amount) {\r\n        this.score += amount;\r\n    }\r\n\r\n    public void decreaseScore(int amount) {\r\n        this.score -= amount;\r\n    }\r\n\r\n    public void increaseLifePoint(int amount) {\r\n        this.lifePoint += amount;\r\n    }\r\n\r\n    public void decreaseLifePoint(int amount) {\r\n        this.lifePoint -= amount;\r\n    }\r\n\r\n    public void increaseMoney(int amount) {\r\n        this.money += amount;\r\n//        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n//        importExportUserController.exportNewUser(User.getUserByUsername(this.getUsername()));\r\n    }\r\n\r\n    public void decreaseMoney(int amount) {\r\n        //TODO put back\r\n//        this.money -= amount;\r\n//        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n//        importExportUserController.exportNewUser(User.getUserByUsername(this.getUsername()));\r\n    }\r\n\r\n    public static List<User> getAllUsers() {\r\n        return allUsers;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return this.username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return this.password;\r\n    }\r\n\r\n    public String getNickname() {\r\n        return this.nickname;\r\n    }\r\n\r\n    public int getScore() {\r\n        return this.score;\r\n    }\r\n\r\n    public Deck getActiveDeck() {\r\n        return this.currentActiveDeck;\r\n    }\r\n\r\n    public Board getBoard() {\r\n        return this.board;\r\n    }\r\n\r\n    public void setNewBoard() {\r\n        this.board = new Board();\r\n    }\r\n\r\n    public int getLifePoint() {\r\n        return this.lifePoint;\r\n    }\r\n\r\n    public void setLifePoint(int lifePoint) {\r\n        this.lifePoint = lifePoint;\r\n    }\r\n\r\n    public void setScore(int score) {\r\n        this.score = score;\r\n    }\r\n    //TODO put back\r\n    public void setMoney(int money) {\r\n//        this.money = money;\r\n    }\r\n\r\n    public int getMoney() {\r\n        return this.money;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n//        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n//        importExportUserController.exportNewUser(User.getUserByUsername(this.getUsername()));\r\n    }\r\n\r\n    public void setNickname(String nickname) {\r\n        this.nickname = nickname;\r\n//        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n//        importExportUserController.exportNewUser(User.getUserByNickname(nickname));\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n//        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();\r\n//        importExportUserController.exportNewUser(User.getUserByUsername(username));\r\n//        importExportUserController.exportAllUsers(User.getAllUsers());\r\n    }\r\n\r\n    public void setActiveDeck(Deck deck) {\r\n        this.currentActiveDeck = deck;\r\n    }\r\n\r\n    //TODO age lazem bood jaye pascalcase aadish kon\r\n    public Cardable getCardByName(String name) {\r\n        for (Cardable card : allCards) {\r\n            if (card.getNamePascalCase().equals(name)) {\r\n                return card;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public List<Deck> getAllDecks() {\r\n        return this.allDecks;\r\n    }\r\n\r\n    public List<Cardable> getAllCards() {\r\n        return this.allCards;\r\n    }\r\n\r\n    public void deleteDeck(String name) {\r\n        this.allDecks.remove(getDeckByName(name));\r\n    }\r\n\r\n    public void deleteCard(String name) {\r\n        this.allCards.remove(getCardByName(name));\r\n    }\r\n\r\n    public void addDeck(Deck deck) {\r\n        this.allDecks.add(deck);\r\n    }\r\n\r\n    public void addCardToUsersAllCards(Cardable card) {\r\n        this.allCards.add(card);\r\n    }\r\n\r\n    public Deck getDeckByName(String name) {\r\n        for (Deck deck : allDecks) {\r\n            if (deck.getDeckName().equals(name)) {\r\n                return deck;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o){\r\n        User user = (User) o;\r\n        return  (this.username.equals(user.username));\r\n    }\r\n\r\n//    @Override\r\n//    public boolean equals(Object o) {\r\n//        if (this == o) return true;\r\n//        if (o == null || getClass() != o.getClass()) return false;\r\n//        User user = (User) o;\r\n//        return Objects.equals(this.username, user.username);\r\n//    }\r\n\r\n\r\n//    @Override\r\n//    public boolean equals(Object o) {\r\n//        if (this == o) return true;\r\n//        if (o == null || getClass() != o.getClass()) return false;\r\n//        User user = (User) o;\r\n//        return Objects.equals(username, user.username);\r\n//    }\r\n//\r\n//    @Override\r\n//    public int hashCode() {\r\n//        return Objects.hash(username);\r\n//    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- src/main/java/model/User.java	(revision 311771c64a829ccbedbd05d5c21a2de1b11f26b3)
-+++ src/main/java/model/User.java	(date 1624629620466)
-@@ -92,7 +92,7 @@
- 
-     public void decreaseMoney(int amount) {
-         //TODO put back
--//        this.money -= amount;
-+        this.money -= amount;
- //        ImportExportUserController importExportUserController = ImportExportUserController.getInstance();
- //        importExportUserController.exportNewUser(User.getUserByUsername(this.getUsername()));
-     }
-@@ -140,9 +140,10 @@
-     public void setScore(int score) {
-         this.score = score;
-     }
-+
-     //TODO put back
-     public void setMoney(int money) {
--//        this.money = money;
-+        this.money = money;
-     }
- 
-     public int getMoney() {
Index: target/classes/ScoreBoard.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.image.Image?>\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.text.Font?>\r\n\r\n<AnchorPane prefHeight=\"600.0\" prefWidth=\"900.0\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"view.ScoreBoardViewGraphic\">\r\n    <ImageView fitHeight=\"600.0\" fitWidth=\"900.0\">\r\n        <Image url=\"@21.jpg\" />\r\n    </ImageView>\r\n    <Label fx:id=\"label\" alignment=\"CENTER\" contentDisplay=\"CENTER\" layoutX=\"10.0\" layoutY=\"6.0\" prefHeight=\"532.0\" prefWidth=\"343.0\" textFill=\"#3db7d9\">\r\n        <font>\r\n           <Font name=\"Agency FB\" size=\"22.0\" />\r\n        </font>\r\n    </Label>\r\n   <Button layoutX=\"156.0\" layoutY=\"552.0\" mnemonicParsing=\"false\" onMouseClicked=\"#goBack\" text=\"Back\">\r\n      <font>\r\n         <Font name=\"Agency FB\" size=\"18.0\" />\r\n      </font>\r\n   </Button>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/ScoreBoard.fxml	(revision 56827a4ccc997c0e855261394b5db5502c6f9dbb)
+++ target/classes/ScoreBoard.fxml	(date 1625251397622)
@@ -11,14 +11,14 @@
     <ImageView fitHeight="600.0" fitWidth="900.0">
         <Image url="@21.jpg" />
     </ImageView>
-    <Label fx:id="label" alignment="CENTER" contentDisplay="CENTER" layoutX="10.0" layoutY="6.0" prefHeight="532.0" prefWidth="343.0" textFill="#3db7d9">
+    <Label fx:id="label" alignment="CENTER" contentDisplay="CENTER" layoutX="10.0" layoutY="6.0" prefHeight="532.0" prefWidth="343.0" textFill="#2088a5">
         <font>
            <Font name="Agency FB" size="22.0" />
         </font>
     </Label>
-   <Button layoutX="156.0" layoutY="552.0" mnemonicParsing="false" onMouseClicked="#goBack" text="Back">
+   <Button layoutX="156.0" layoutY="552.0" mnemonicParsing="false" onMouseClicked="#goBack" text="Back" textFill="#2088a5">
       <font>
-         <Font name="Agency FB" size="18.0" />
+         <Font name="Agency FB Bold" size="18.0" />
       </font>
    </Button>
 </AnchorPane>
Index: target/classes/ChangeNickname.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.TextField?>\r\n<?import javafx.scene.image.Image?>\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.text.Font?>\r\n<?import javafx.scene.text.Text?>\r\n\r\n\r\n<AnchorPane prefHeight=\"600.0\" prefWidth=\"900.0\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"view.ChangeNicknameViewGraphic\">\r\n   <children>\r\n      <ImageView fitHeight=\"600.0\" fitWidth=\"900.0\">\r\n         <image>\r\n            <Image url=\"@28.jpg\" />\r\n         </image>\r\n      </ImageView>\r\n      <Button layoutX=\"389.0\" layoutY=\"111.0\" mnemonicParsing=\"false\" prefHeight=\"34.0\" prefWidth=\"62.0\" onMouseClicked=\"#changeNickname\" text=\"Save\">\r\n         <font>\r\n            <Font name=\"Agency FB\" size=\"18.0\" />\r\n         </font>\r\n      </Button>\r\n      <Text layoutX=\"371.0\" layoutY=\"50.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"New Nickname:\">\r\n         <font>\r\n            <Font name=\"Agency FB\" size=\"21.0\" />\r\n         </font>\r\n      </Text>\r\n      <TextField layoutX=\"329.0\" layoutY=\"65.0\" prefHeight=\"25.0\" prefWidth=\"192.0\" fx:id=\"nickname\" promptText=\"Please Enter Your New Nickname\">\r\n         <font>\r\n            <Font name=\"Agency FB\" size=\"16.0\" />\r\n         </font>\r\n      </TextField>\r\n      <Button layoutX=\"389.0\" layoutY=\"169.0\" mnemonicParsing=\"false\" onMouseClicked=\"#goBack\" text=\"Cancel\">\r\n         <font>\r\n            <Font name=\"Agency FB\" size=\"18.0\" />\r\n         </font>\r\n      </Button>\r\n   </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/ChangeNickname.fxml	(revision 56827a4ccc997c0e855261394b5db5502c6f9dbb)
+++ target/classes/ChangeNickname.fxml	(date 1625251397569)
@@ -8,7 +8,6 @@
 <?import javafx.scene.text.Font?>
 <?import javafx.scene.text.Text?>
 
-
 <AnchorPane prefHeight="600.0" prefWidth="900.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="view.ChangeNicknameViewGraphic">
    <children>
       <ImageView fitHeight="600.0" fitWidth="900.0">
@@ -16,24 +15,24 @@
             <Image url="@28.jpg" />
          </image>
       </ImageView>
-      <Button layoutX="389.0" layoutY="111.0" mnemonicParsing="false" prefHeight="34.0" prefWidth="62.0" onMouseClicked="#changeNickname" text="Save">
+      <Button layoutX="389.0" layoutY="111.0" mnemonicParsing="false" onMouseClicked="#changeNickname" prefHeight="34.0" prefWidth="62.0" text="Save">
          <font>
-            <Font name="Agency FB" size="18.0" />
+            <Font name="Agency FB Bold" size="17.0" />
          </font>
       </Button>
-      <Text layoutX="371.0" layoutY="50.0" strokeType="OUTSIDE" strokeWidth="0.0" text="New Nickname:">
+      <Text layoutX="367.0" layoutY="52.0" strokeType="OUTSIDE" strokeWidth="0.0" text="New Nickname:">
          <font>
-            <Font name="Agency FB" size="21.0" />
+            <Font name="Agency FB Bold" size="21.0" />
          </font>
       </Text>
-      <TextField layoutX="329.0" layoutY="65.0" prefHeight="25.0" prefWidth="192.0" fx:id="nickname" promptText="Please Enter Your New Nickname">
+      <TextField fx:id="nickname" layoutX="329.0" layoutY="65.0" prefHeight="25.0" prefWidth="192.0" promptText="Please Enter Your New Nickname">
          <font>
             <Font name="Agency FB" size="16.0" />
          </font>
       </TextField>
       <Button layoutX="389.0" layoutY="169.0" mnemonicParsing="false" onMouseClicked="#goBack" text="Cancel">
          <font>
-            <Font name="Agency FB" size="18.0" />
+            <Font name="Agency FB Bold" size="17.0" />
          </font>
       </Button>
    </children>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0b1707ad-3e75-4310-9619-956ec670ae1a\" name=\"Default Changelist\" comment=\"profile and scoreboard edited\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/model/SpellCard.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/model/SpellCard.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/model/TrapCard.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/model/TrapCard.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeStyleSettingsInfer\">\r\n    <option name=\"done\" value=\"true\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1tf7blqKJ2Y0dLvEX2lrUssvKzj\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"project.structure.last.edited\" value=\"SDKs\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"reference.settings.project.statistic.project.settings\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"controller.exeption\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.SignUpViewGraphic\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"1.8\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"project_team_17\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.MainViewGraphic\" />\r\n      <module name=\"project_team_17\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"SignUpViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"1.8\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.SignUpViewGraphic\" />\r\n      <module name=\"project_team_17\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"test\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"project_team_17\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"test\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"test.testForMinFinder\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"project_team_17_2\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"test\" />\r\n      <option name=\"METHOD_NAME\" value=\"testForMinFinder\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.SignUpViewGraphic\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"JUnit.test\" />\r\n        <item itemvalue=\"JUnit.test.testForMinFinder\" />\r\n        <item itemvalue=\"Application.MainViewGraphic\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"StructuralSearchPlugin\">\r\n    <searchConfiguration name=\"Unnamed\" created=\"1624744011824\" text=\"/* $CommentContent$ */\" recursive=\"false\" caseInsensitive=\"false\" type=\"JAVA\" pattern_context=\"default\" scope_type=\"PROJECT\" scope_descriptor=\"\" history=\"1\">\r\n      <constraint name=\"__context__\" within=\"\" contains=\"\" />\r\n      <constraint name=\"CommentContent\" within=\"\" contains=\"\" />\r\n    </searchConfiguration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0b1707ad-3e75-4310-9619-956ec670ae1a\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1623148364579</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1623148364579</updated>\r\n      <workItem from=\"1624545878199\" duration=\"3232000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"ScoreBoardViewGraphic.java\">\r\n      <created>1623149665559</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623149665559</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"ScoreBoardViewGraphic.java\">\r\n      <created>1623149688409</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623149688409</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Error sign up\">\r\n      <created>1623151044078</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623151044078</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"model.SpellCard.java&#10;Monster Reborn + Terraforming\">\r\n      <created>1623868346229</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623868346229</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"model.SpellCard.java&#10;RAIGEKI + POT_OF_GREED\">\r\n      <created>1623946393997</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623946393997</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Yami SpellCard.java\">\r\n      <created>1624002906129</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624002906129</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Forest &amp; Closed Forest&#10;SpellCard.java\">\r\n      <created>1624012207305</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624012207305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"debug import user\">\r\n      <created>1624093680512</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624093680512</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"debug import user o baghie import ha\">\r\n      <created>1624099929742</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624099929742</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"kiana test error fix\">\r\n      <created>1624533248061</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624533248061</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"show all cards debug\">\r\n      <created>1624546002241</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624546002241</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"jabejayie cheat money\">\r\n      <created>1624547044985</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624547044985</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"draw phase automatic\">\r\n      <created>1624556390073</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624556390073</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"debug1\">\r\n      <created>1624625286861</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624625286861</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"debug2\">\r\n      <created>1624639165113</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624639165113</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"ai\">\r\n      <created>1624641323564</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624641323564</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"debug attack1\">\r\n      <created>1624643600247</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624643600247</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"debug attack2\">\r\n      <created>1624645817335</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624645817335</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"debug attack3\">\r\n      <created>1624646566864</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624646566864</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"debug attack4\">\r\n      <created>1624650239704</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624650239704</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"debug show card\">\r\n      <created>1624653667478</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624653667478</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"debug show card2\">\r\n      <created>1624654145122</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624654145122</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"debug takeAction1\">\r\n      <created>1624702088038</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624702088038</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"debug command knight2\">\r\n      <created>1624703733833</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624703733833</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"nothing\">\r\n      <created>1624704514853</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624704514853</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"GATE_GUARDIAN\">\r\n      <created>1624709705904</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624709705904</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"SPELL_ABSORPTION debug1\">\r\n      <created>1624710730390</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624710730390</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"tributeForSummon debug\">\r\n      <created>1624712073940</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624712073940</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Full spell and trap zone\">\r\n      <created>1624713959005</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624713959005</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"continuous spell card\">\r\n      <created>1624715726136</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624715726136</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"suijin debug 1\">\r\n      <created>1624717829951</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624717829951</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"suijin debug 2\">\r\n      <created>1624719651615</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624719651615</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"gate gaurdian debug\">\r\n      <created>1624721450582</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624721450582</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"activate spell debug 1\">\r\n      <created>1624725085666</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624725085666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"AIFullDebug + monster reborn\">\r\n      <created>1624729177752</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624729177752</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"twin twister + spell absorption\">\r\n      <created>1624737729186</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624737729186</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"mystical space typhoon&#10;twin twisters\">\r\n      <created>1624739906446</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624739906446</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۳۸\" summary=\":|\">\r\n      <created>1625245993391</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۳۸\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۳۸\" />\r\n      <updated>1625245993391</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۳۹\" summary=\"profile and scoreboard edited\">\r\n      <created>1625252163631</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۳۹\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۳۹\" />\r\n      <updated>1625252163631</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"40\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"jabejayie cheat money\" />\r\n    <MESSAGE value=\"draw phase automatic\" />\r\n    <MESSAGE value=\"debug1\" />\r\n    <MESSAGE value=\"debug2\" />\r\n    <MESSAGE value=\"ai\" />\r\n    <MESSAGE value=\"debug attack1\" />\r\n    <MESSAGE value=\"debug attack2\" />\r\n    <MESSAGE value=\"debug attack3\" />\r\n    <MESSAGE value=\"debug attack4\" />\r\n    <MESSAGE value=\"debug show card\" />\r\n    <MESSAGE value=\"debug show card2\" />\r\n    <MESSAGE value=\"debug takeAction1\" />\r\n    <MESSAGE value=\"debug command knight2\" />\r\n    <MESSAGE value=\"nothing\" />\r\n    <MESSAGE value=\"GATE_GUARDIAN\" />\r\n    <MESSAGE value=\"SPELL_ABSORPTION debug1\" />\r\n    <MESSAGE value=\"tributeForSummon debug\" />\r\n    <MESSAGE value=\"Full spell and trap zone\" />\r\n    <MESSAGE value=\"continuous spell card\" />\r\n    <MESSAGE value=\"suijin debug 1\" />\r\n    <MESSAGE value=\"suijin debug 2\" />\r\n    <MESSAGE value=\"gate gaurdian debug\" />\r\n    <MESSAGE value=\"activate spell debug 1\" />\r\n    <MESSAGE value=\"AIFullDebug + monster reborn\" />\r\n    <MESSAGE value=\"twin twister + spell absorption\" />\r\n    <MESSAGE value=\"mystical space typhoon&#10;twin twisters\" />\r\n    <MESSAGE value=\":|\" />\r\n    <MESSAGE value=\"profile and scoreboard edited\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"profile and scoreboard edited\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision 56827a4ccc997c0e855261394b5db5502c6f9dbb)
+++ .idea/workspace.xml	(date 1625296663722)
@@ -22,10 +22,82 @@
     <select />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="0b1707ad-3e75-4310-9619-956ec670ae1a" name="Default Changelist" comment="profile and scoreboard edited">
+    <list default="true" id="0b1707ad-3e75-4310-9619-956ec670ae1a" name="Default Changelist" comment="ShopGraphic2">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_5_18_PM_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_5_18_PM__Default_Changelist_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_9_08_PM_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_25_2021_9_08_PM__Default_Changelist_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/model/SpellCard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/SpellCard.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/model/TrapCard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/TrapCard.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/ChangeNickname.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/ChangeNickname.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/ScoreBoard.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/ScoreBoard.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/controller/ShopController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/controller/ShopController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$10.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$10.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$11.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$11.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$12.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$12.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$13.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$13.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$14.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$14.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$15.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$15.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$16.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$16.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$17.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$17.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$18.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$18.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$19.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$19.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$2.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$2.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$20.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$20.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$21.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$21.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$22.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$22.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$23.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$23.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$24.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$24.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$25.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$25.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$26.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$26.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$27.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$27.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$28.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$28.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$29.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$29.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$3.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$3.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$30.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$30.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$31.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$31.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$32.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$32.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$33.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$33.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$34.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$34.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$35.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$35.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$36.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$36.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$37.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$37.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$38.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$38.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$39.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$39.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$4.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$4.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$40.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$40.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$41.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$41.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$5.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$5.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$6.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$6.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$7.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$7.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$8.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$8.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard$9.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard$9.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/MonsterCard.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/MonsterCard.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$10.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$10.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$11.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$11.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$12.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$12.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$13.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$13.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$14.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$14.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$15.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$15.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$16.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$16.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$17.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$17.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$18.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$18.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$19.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$19.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$2.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$2.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$20.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$20.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$21.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$21.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$22.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$22.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$23.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$23.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$3.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$3.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$4.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$4.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$5.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$5.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$6.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$6.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$7.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$7.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$8.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$8.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard$9.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard$9.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/SpellCard.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/SpellCard.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/model/TrapCard.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/model/TrapCard.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -76,7 +148,7 @@
       <recent name="controller.exeption" />
     </key>
   </component>
-  <component name="RunManager" selected="Application.SignUpViewGraphic">
+  <component name="RunManager" selected="Application.ShopViewGraphic">
     <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="ALTERNATIVE_JRE_PATH" value="1.8" />
       <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
@@ -86,8 +158,8 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="MainViewGraphic" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="view.MainViewGraphic" />
+    <configuration name="ShopViewGraphic" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="view.ShopViewGraphic" />
       <module name="project_team_17" />
       <extension name="coverage">
         <pattern>
@@ -135,11 +207,11 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Application.ShopViewGraphic" />
         <item itemvalue="Application.SignUpViewGraphic" />
         <item itemvalue="Application.Main" />
         <item itemvalue="JUnit.test" />
         <item itemvalue="JUnit.test.testForMinFinder" />
-        <item itemvalue="Application.MainViewGraphic" />
       </list>
     </recent_temporary>
   </component>
@@ -424,11 +496,12 @@
       <option name="presentableId" value="LOCAL‎۰۰۰۳۸" />
       <updated>1625245993391</updated>
     </task>
-    <task id="LOCAL‎۰۰۰۳۹" summary="profile and scoreboard edited">
-      <created>1625252163631</created>
-      <option name="number" value="LOCAL‎۰۰۰۳۹" />
-      <option name="presentableId" value="LOCAL‎۰۰۰۳۹" />
-      <updated>1625252163631</updated>
+    <task id="LOCAL-00039" summary="ShopGraphic2">
+      <created>1625255699618</created>
+      <option name="number" value="00039" />
+      <option name="presentableId" value="LOCAL-00039" />
+      <option name="project" value="LOCAL" />
+      <updated>1625255699618</updated>
     </task>
     <option name="localTasksCounter" value="40" />
     <servers />
@@ -477,8 +550,34 @@
     <MESSAGE value="twin twister + spell absorption" />
     <MESSAGE value="mystical space typhoon&#10;twin twisters" />
     <MESSAGE value=":|" />
-    <MESSAGE value="profile and scoreboard edited" />
-    <option name="LAST_COMMIT_MESSAGE" value="profile and scoreboard edited" />
+    <MESSAGE value="ShopGraphic2" />
+    <option name="LAST_COMMIT_MESSAGE" value="ShopGraphic2" />
+  </component>
+  <component name="WindowStateProjectService">
+    <state width="1237" height="195" key="GridCell.Tab.0.bottom" timestamp="1625255636859">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state width="1237" height="195" key="GridCell.Tab.0.bottom/0.0.1280.680@0.0.1280.680" timestamp="1625255636859" />
+    <state width="1237" height="195" key="GridCell.Tab.0.center" timestamp="1625255636859">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state width="1237" height="195" key="GridCell.Tab.0.center/0.0.1280.680@0.0.1280.680" timestamp="1625255636859" />
+    <state width="1237" height="195" key="GridCell.Tab.0.left" timestamp="1625255636858">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state width="1237" height="195" key="GridCell.Tab.0.left/0.0.1280.680@0.0.1280.680" timestamp="1625255636858" />
+    <state width="1237" height="195" key="GridCell.Tab.0.right" timestamp="1625255636859">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state width="1237" height="195" key="GridCell.Tab.0.right/0.0.1280.680@0.0.1280.680" timestamp="1625255636859" />
+    <state x="233" y="74" key="Vcs.Push.Dialog.v2" timestamp="1625255704433">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state x="233" y="74" key="Vcs.Push.Dialog.v2/0.0.1280.680@0.0.1280.680" timestamp="1625255704433" />
+    <state x="458" y="255" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1625296663102">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state x="458" y="255" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1280.680@0.0.1280.680" timestamp="1625296663102" />
   </component>
   <component name="XSLT-Support.FileAssociations.UIState">
     <expand />
