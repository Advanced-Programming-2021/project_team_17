Index: src/main/java/view/GameViewGraphic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.DuelController;\r\nimport controller.SoundController;\r\nimport javafx.application.Application;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.effect.BlurType;\r\nimport javafx.scene.effect.DropShadow;\r\nimport javafx.scene.effect.Effect;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseButton;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.Paint;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Popup;\r\nimport javafx.stage.Stage;\r\nimport model.*;\r\nimport model.Card;\r\nimport model.MonsterCard;\r\nimport model.User;\r\nimport org.w3c.dom.events.Event;\r\n\r\nimport java.io.File;\r\nimport java.lang.reflect.Method;\r\nimport java.net.FileNameMap;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class GameViewGraphic extends Application implements Initializable {\r\n    private static DuelController duelController;\r\n    private static Stage stage;\r\n    public static User player;\r\n    public static User rival;\r\n    private static GameViewGraphic instance = null;\r\n    public Label chatBox;\r\n    public int numberOfRounds;\r\n    private Phase phase;\r\n    private static ArrayList<Image> images = new ArrayList<>();\r\n    private static ArrayList<Card> cards = new ArrayList<>();\r\n    private static ArrayList<Boolean> conditions = new ArrayList<>();\r\n    private static AnchorPane root;\r\n    public static ImageView directAttackArea = new ImageView();\r\n    public static ImageView imageView1Monster1 = new ImageView(), imageView1Monster2 = new ImageView(), imageView1Monster3 = new ImageView(), imageView1Monster4 = new ImageView(), imageView1Monster5 = new ImageView();\r\n    public static ImageView imageView2Monster1 = new ImageView(), imageView2Monster2 = new ImageView(), imageView2Monster3 = new ImageView(), imageView2Monster4 = new ImageView(), imageView2Monster5 = new ImageView();\r\n    public static ImageView imageView1SpellAndTrap1 = new ImageView(), imageView1SpellAndTrap2 = new ImageView(), imageView1SpellAndTrap3 = new ImageView(), imageView1SpellAndTrap4 = new ImageView(), imageView1SpellAndTrap5 = new ImageView();\r\n    public static ImageView imageView2SpellAndTrap1 = new ImageView(), imageView2SpellAndTrap2 = new ImageView(), imageView2SpellAndTrap3 = new ImageView(), imageView2SpellAndTrap4 = new ImageView(), imageView2SpellAndTrap5 = new ImageView();\r\n    public static ImageView imageView1hand1 = new ImageView(), imageView1hand2 = new ImageView(), imageView1hand3 = new ImageView(), imageView1hand4 = new ImageView(), imageView1hand5 = new ImageView(), imageView1hand6 = new ImageView();\r\n    public static ImageView imageView2hand1 = new ImageView(), imageView2hand2 = new ImageView(), imageView2hand3 = new ImageView(), imageView2hand4 = new ImageView(), imageView2hand5 = new ImageView(), imageView2hand6 = new ImageView();\r\n    public static ImageView imageView1FieldZone = new ImageView(), imageView2FieldZone = new ImageView(), imageView1Graveyard = new ImageView(), imageView2Graveyard = new ImageView();\r\n    private static Card card1Monster1, card1Monster2, card1Monster3, card1Monster4, card1Monster5;\r\n    private static Card card2Monster1, card2Monster2, card2Monster3, card2Monster4, card2Monster5;\r\n    private static Card card1SpellAndTrap1, card1SpellAndTrap2, card1SpellAndTrap3, card1SpellAndTrap4, card1SpellAndTrap5;\r\n    private static Card card2SpellAndTrap1, card2SpellAndTrap2, card2SpellAndTrap3, card2SpellAndTrap4, card2SpellAndTrap5;\r\n    public static Card card1Hand1, card1Hand2, card1Hand3, card1Hand4, card1Hand5, card1Hand6;\r\n    public static Card card2Hand1, card2Hand2, card2Hand3, card2Hand4, card2Hand5, card2Hand6;\r\n    public static Card card1FieldZone, card2FieldZone, card1Graveyard, card2Graveyard;\r\n    public static ImageView rivalProfile = new ImageView();\r\n    public static ImageView playerProfile = new ImageView();\r\n    private ImageView graveyardFirstCard = new ImageView();\r\n    private ImageView graveyardSecondCard = new ImageView();\r\n    private ImageView graveyardThirdCard = new ImageView();\r\n    public ImageView selectedCard;\r\n    @FXML\r\n    public Label playerUsername, playerNickname, playerLifePoint, rivalUsername, rivalNickname, rivalLifePoint;\r\n    private static Label playerUsername1, playerNickname1, playerLifePoint1, rivalUsername1, rivalNickname1, rivalLifePoint1;\r\n    @FXML\r\n    private ProgressBar rivalProgressBar, playerProgressBar;\r\n    private static ProgressBar rivalProgressBar1, playerProgressBar1;\r\n    @FXML\r\n    public Rectangle drawPhase, standByPhase, mainPhase1, battlePhase, mainPhase2, endPhase;\r\n    private static Rectangle drawPhase1, standByPhase1, mainPhase11, battlePhase1, mainPhase21, endPhase1;\r\n    private static final Label description = new Label(), attack = new Label(), defence = new Label();\r\n    private static final ImageView selectedCardImageView = new ImageView();\r\n    public Popup popUpGraveyard;\r\n    public static final Image unknown = new Image(\"images/Cards/Unknown.jpg\");\r\n\r\n\r\n    /*public GameViewGraphic(User player,User rival,int numberOfRounds){\r\n        GameViewGraphic.player = player;\r\n        GameViewGraphic.rival = rival;\r\n        this.numberOfRounds = numberOfRounds;\r\n        duelController = new DuelController(player,rival,numberOfRounds);\r\n    }*/\r\n    public void setPlayer(User player) {\r\n        GameViewGraphic.player = player;\r\n    }\r\n\r\n    public void setRival(User rival) {\r\n        GameViewGraphic.rival = rival;\r\n    }\r\n\r\n    public void setNumberOfRounds(int numberOfRounds) {\r\n        this.numberOfRounds = numberOfRounds;\r\n    }\r\n\r\n    public void setDuelController() {\r\n        duelController = new DuelController(player, rival, numberOfRounds, this);\r\n    }\r\n\r\n    /*public static GameViewGraphic getInstance() {\r\n        if (instance == null) instance = new GameViewGraphic();\r\n        return instance;\r\n    }*/\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        GameViewGraphic.stage = stage;\r\n        URL url = getClass().getResource(\"/GameMenu.fxml\");\r\n//        FXMLLoader loader = new FXMLLoader(url);\r\n//        loader.setController(this);\r\n        root = FXMLLoader.load(url);\r\n//        root = FXMLLoader.load(url);\r\n        setImagesAndCards();\r\n        setBar();\r\n        setImageViewForProfile();\r\n        addAllImages();\r\n        Scene scene = new Scene(root);\r\n        stage.setScene(scene);\r\n        setFXMLs();\r\n        duelController.setDuelView(this);\r\n        setPhaseRectangleColors();\r\n        duelController.goNextPhase();\r\n//        startMainNoCardSelected();\r\n        //showPlayerPopUp();\r\n        stage.show();\r\n        help();\r\n    }\r\n\r\n    private void setFXMLs() {\r\n        if (root != null) {\r\n            for (Node child : root.getChildren()) {\r\n                if (child.getId() == null) continue;\r\n                if (child instanceof Rectangle) {\r\n                    if (child.getId().equals(\"drawPhase\"))\r\n                        drawPhase = drawPhase1;\r\n                    else if (child.getId().equals(\"standByPhase\"))\r\n                        standByPhase = standByPhase1;\r\n                    else if (child.getId().equals(\"mainPhase1\"))\r\n                        mainPhase1 = mainPhase11;\r\n                    else if (child.getId().equals(\"battlePhase\"))\r\n                        battlePhase = battlePhase1;\r\n                    else if (child.getId().equals(\"mainPhase2\"))\r\n                        mainPhase2 = mainPhase21;\r\n                    else if (child.getId().equals(\"endPhase\"))\r\n                        endPhase = endPhase1;\r\n                } else if (child instanceof Label) {\r\n                    if (child.getId().equals(\"playerUsername\"))\r\n                        playerUsername = playerUsername1;\r\n                    else if (child.getId().equals(\"playerNickname\"))\r\n                        playerNickname = playerNickname1;\r\n                    else if (child.getId().equals(\"playerLifePoint\"))\r\n                        playerLifePoint = playerLifePoint1;\r\n                    else if (child.getId().equals(\"rivalUsername\"))\r\n                        rivalUsername = rivalUsername1;\r\n                    else if (child.getId().equals(\"rivalNickname\"))\r\n                        rivalNickname = rivalNickname1;\r\n                    else if (child.getId().equals(\"rivalLifePoint\"))\r\n                        rivalLifePoint = rivalLifePoint1;\r\n                } else if (child instanceof ProgressBar) {\r\n                    if (child.getId().equals(\"playerProgressBar1\"))\r\n                        playerProgressBar = playerProgressBar1;\r\n                    else if (child.getId().equals(\"rivalProgressBar1\"))\r\n                        rivalProgressBar = rivalProgressBar1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void updateLifePoint(){\r\n        playerLifePoint.setText(String.valueOf(player.getLifePoint()));\r\n        rivalLifePoint.setText(String.valueOf(rival.getLifePoint()));\r\n        setBar();\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        setBar();\r\n        setImageViewForProfile();\r\n        if (player != null && rival != null) {\r\n            if (playerLifePoint == null) return;\r\n            playerLifePoint.setText(String.valueOf(player.getLifePoint()));\r\n            if (rivalLifePoint != null) rivalLifePoint.setText(String.valueOf(rival.getLifePoint()));\r\n            if (playerNickname != null) playerNickname.setText(player.getNickname());\r\n            if (rivalNickname != null) rivalNickname.setText(rival.getNickname());\r\n            if (playerUsername != null) playerUsername.setText(player.getUsername());\r\n            if (rivalUsername != null) rivalUsername.setText(rival.getUsername());\r\n            playerUsername1 = playerUsername;\r\n            playerNickname1 = playerNickname;\r\n            playerLifePoint1 = playerLifePoint;\r\n            rivalUsername1 = rivalUsername;\r\n            rivalNickname1 = rivalNickname;\r\n            rivalLifePoint1 = rivalLifePoint;\r\n            playerProgressBar1 = playerProgressBar;\r\n            rivalProgressBar1 = rivalProgressBar;\r\n            drawPhase1 = drawPhase;\r\n            standByPhase1 = standByPhase;\r\n            mainPhase11 = mainPhase1;\r\n            battlePhase1 = battlePhase;\r\n            mainPhase21 = mainPhase2;\r\n            endPhase1 = endPhase;\r\n\r\n        }\r\n        if (duelController != null) {\r\n            setImagesAndCards();\r\n            addAllImages();\r\n            duelController.setDuelView(this);\r\n        }\r\n        /*try {\r\n            if (drawPhase != null)\r\n                setPhaseRectangleColors();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }*/\r\n    }\r\n\r\n    public void setDirectAttackArea(){\r\n        directAttackArea.setImage(new Image(\"images/profiles/profile.jpg\"));\r\n        directAttackArea.setFitWidth(423);\r\n        directAttackArea.setFitHeight(72);\r\n        directAttackArea.setX(300);\r\n        directAttackArea.setY(0);\r\n    }\r\n\r\n    public void setImagesAndCards() {\r\n        if (duelController == null) return;\r\n        images = duelController.getBoard();\r\n        cards = duelController.getCards();\r\n        conditions = duelController.getConditions();\r\n        setDirectAttackArea();\r\n        setImageView(imageView1Monster1, images.get(0), 324, 329, conditions.get(0));\r\n        setImageView(imageView1Monster2, images.get(1), 403, 329, conditions.get(1));\r\n        setImageView(imageView1Monster3, images.get(2), 486, 329, conditions.get(2));\r\n        setImageView(imageView1Monster4, images.get(3), 569, 329, conditions.get(3));\r\n        setImageView(imageView1Monster5, images.get(4), 652, 329, conditions.get(4));\r\n        setImageView(imageView2Monster1, images.get(5), 324, 206, conditions.get(5));\r\n        setImageView(imageView2Monster2, images.get(6), 403, 206, conditions.get(6));\r\n        setImageView(imageView2Monster3, images.get(7), 486, 206, conditions.get(7));\r\n        setImageView(imageView2Monster4, images.get(8), 569, 206, conditions.get(8));\r\n        setImageView(imageView2Monster5, images.get(9), 652, 206, conditions.get(9));\r\n        setImageView(imageView1SpellAndTrap1, images.get(10), 324, 432, conditions.get(10));\r\n        setImageView(imageView1SpellAndTrap2, images.get(11), 403, 432, conditions.get(11));\r\n        setImageView(imageView1SpellAndTrap3, images.get(12), 486, 432, conditions.get(12));\r\n        setImageView(imageView1SpellAndTrap4, images.get(13), 569, 432, conditions.get(13));\r\n        setImageView(imageView1SpellAndTrap5, images.get(14), 652, 432, conditions.get(14));\r\n        setImageView(imageView2SpellAndTrap1, images.get(15), 324, 104, conditions.get(15));\r\n        setImageView(imageView2SpellAndTrap2, images.get(16), 403, 104, conditions.get(16));\r\n        setImageView(imageView2SpellAndTrap3, images.get(17), 486, 104, conditions.get(17));\r\n        setImageView(imageView2SpellAndTrap4, images.get(18), 569, 104, conditions.get(18));\r\n        setImageView(imageView2SpellAndTrap5, images.get(19), 652, 104, conditions.get(19));\r\n        setImageView(imageView1hand1, images.get(20), 331, 538, conditions.get(20));\r\n        setImageView(imageView1hand2, images.get(21), 387, 538, conditions.get(21));\r\n        setImageView(imageView1hand3, images.get(22), 443, 538, conditions.get(22));\r\n        setImageView(imageView1hand4, images.get(23), 499, 538, conditions.get(23));\r\n        setImageView(imageView1hand5, images.get(24), 555, 538, conditions.get(24));\r\n        setImageView(imageView1hand6, images.get(25), 611, 538, conditions.get(25));\r\n        setImageView(imageView2hand1, images.get(26), 331, -16, conditions.get(26));\r\n        setImageView(imageView2hand2, images.get(27), 387, -16, conditions.get(27));\r\n        setImageView(imageView2hand3, images.get(28), 443, -16, conditions.get(28));\r\n        setImageView(imageView2hand4, images.get(29), 499, -16, conditions.get(29));\r\n        setImageView(imageView2hand5, images.get(30), 555, -16, conditions.get(30));\r\n        setImageView(imageView2hand6, images.get(31), 611, -16, conditions.get(31));\r\n        setImageView(imageView1FieldZone, images.get(32), 232, 324, conditions.get(32));\r\n        setImageView(imageView2FieldZone, images.get(33), 740, 205, conditions.get(33));\r\n        setImageView(imageView1Graveyard, images.get(34), 740, 328, conditions.get(34));\r\n        setImageView(imageView2Graveyard, images.get(35), 245, 213, conditions.get(35));\r\n        card1Monster1 = cards.get(0);\r\n        card1Monster2 = cards.get(1);\r\n        card1Monster3 = cards.get(2);\r\n        card1Monster4 = cards.get(3);\r\n        card1Monster5 = cards.get(4);\r\n        card2Monster1 = cards.get(5);\r\n        card2Monster2 = cards.get(6);\r\n        card2Monster3 = cards.get(7);\r\n        card2Monster4 = cards.get(8);\r\n        card2Monster5 = cards.get(9);\r\n        card1SpellAndTrap1 = cards.get(10);\r\n        card1SpellAndTrap2 = cards.get(11);\r\n        card1SpellAndTrap3 = cards.get(12);\r\n        card1SpellAndTrap4 = cards.get(13);\r\n        card1SpellAndTrap5 = cards.get(14);\r\n        card2SpellAndTrap1 = cards.get(15);\r\n        card2SpellAndTrap2 = cards.get(16);\r\n        card2SpellAndTrap3 = cards.get(17);\r\n        card2SpellAndTrap4 = cards.get(18);\r\n        card2SpellAndTrap5 = cards.get(19);\r\n        card1Hand1 = cards.get(20);\r\n        card1Hand2 = cards.get(21);\r\n        card1Hand3 = cards.get(22);\r\n        card1Hand4 = cards.get(23);\r\n        card1Hand5 = cards.get(24);\r\n        card1Hand6 = cards.get(25);\r\n        card2Hand1 = cards.get(26);\r\n        card2Hand2 = cards.get(27);\r\n        card2Hand3 = cards.get(28);\r\n        card2Hand4 = cards.get(29);\r\n        card2Hand5 = cards.get(30);\r\n        card2Hand6 = cards.get(31);\r\n        card1FieldZone = cards.get(32);\r\n        card2FieldZone = cards.get(33);\r\n        card1Graveyard = cards.get(34);\r\n        card2Graveyard = cards.get(35);\r\n        setCardDetailsPart();\r\n    }\r\n\r\n    private void setImageView(ImageView imageView, Image image, int x, int y, Boolean condition) {\r\n        imageView.setImage(image);\r\n        imageView.setFitWidth(49);\r\n        imageView.setFitHeight(71);\r\n        imageView.setX(x);\r\n        imageView.setY(y);\r\n        if (condition != null && condition.equals(true))\r\n            imageView.setRotate(90);\r\n        else\r\n            imageView.setRotate(0);\r\n    }\r\n\r\n//    private ImageView setImageView(Image image, int x, int y, Boolean condition) {\r\n//        ImageView imageView = new ImageView(image);\r\n//        imageView.setFitWidth(49);\r\n//        imageView.setFitHeight(71);\r\n//        imageView.setX(x);\r\n//        imageView.setY(y);\r\n//        if (condition != null && condition.equals(true))\r\n//            imageView.setRotate(90);\r\n//        else\r\n//            imageView.setRotate(0);\r\n//        return imageView;\r\n//    }\r\n\r\n    private void setImageViewForProfile() {\r\n        Image image;\r\n        if (player.getProfileImage() == null) {\r\n            URL url = getClass().getResource(\"/images/profiles/profile (\" + player.getProfileNumber() + \").png\");\r\n            image = new Image(String.valueOf(url));\r\n        } else {\r\n            image = player.getProfileImage();\r\n        }\r\n        playerProfile = new ImageView(image);\r\n        playerProfile.setFitWidth(50);\r\n        playerProfile.setFitHeight(50);\r\n        playerProfile.setX(228);\r\n        playerProfile.setY(442);\r\n        playerProfile.setImage(image);\r\n        if (root != null && !root.getChildren().contains(playerProfile))\r\n            root.getChildren().add(playerProfile);\r\n//        url = getClass().getResource(\"/images/profiles/profile (\" + rival.getProfileNumber() + \").png\");\r\n//        image = new Image(String.valueOf(url));\r\n        if (rival.getProfileImage() == null) {\r\n            URL url = getClass().getResource(\"/images/profiles/profile (\" + rival.getProfileNumber() + \").png\");\r\n            image = new Image(String.valueOf(url));\r\n        } else {\r\n            image = rival.getProfileImage();\r\n        }\r\n        rivalProfile = new ImageView(image);\r\n        rivalProfile.setFitWidth(50);\r\n        rivalProfile.setFitHeight(50);\r\n        rivalProfile.setX(737);\r\n        rivalProfile.setY(112);\r\n        rivalProfile.setImage(image);\r\n        if (root != null && !root.getChildren().contains(rivalProfile))\r\n            root.getChildren().add(rivalProfile);\r\n    }\r\n\r\n    private void addAllImages() {\r\n        addImagesView(imageView1hand1);\r\n        addImagesView(imageView1hand2);\r\n        addImagesView(imageView1hand3);\r\n        addImagesView(imageView1hand4);\r\n        addImagesView(imageView1hand5);\r\n        addImagesView(imageView1hand6);\r\n        addImagesView(imageView2hand1);\r\n        addImagesView(imageView2hand2);\r\n        addImagesView(imageView2hand3);\r\n        addImagesView(imageView2hand4);\r\n        addImagesView(imageView2hand5);\r\n        addImagesView(imageView2hand6);\r\n        addImagesView(imageView1Monster1);\r\n        addImagesView(imageView1Monster2);\r\n        addImagesView(imageView1Monster3);\r\n        addImagesView(imageView1Monster4);\r\n        addImagesView(imageView1Monster5);\r\n        addImagesView(imageView2Monster1);\r\n        addImagesView(imageView2Monster2);\r\n        addImagesView(imageView2Monster3);\r\n        addImagesView(imageView2Monster4);\r\n        addImagesView(imageView2Monster5);\r\n        addImagesView(imageView1SpellAndTrap1);\r\n        addImagesView(imageView1SpellAndTrap2);\r\n        addImagesView(imageView1SpellAndTrap3);\r\n        addImagesView(imageView1SpellAndTrap4);\r\n        addImagesView(imageView1SpellAndTrap5);\r\n        addImagesView(imageView2SpellAndTrap1);\r\n        addImagesView(imageView2SpellAndTrap2);\r\n        addImagesView(imageView2SpellAndTrap3);\r\n        addImagesView(imageView2SpellAndTrap4);\r\n        addImagesView(imageView2SpellAndTrap5);\r\n        addImagesView(imageView1FieldZone);\r\n        addImagesView(imageView2FieldZone);\r\n        addImagesView(imageView1Graveyard);\r\n        addImagesView(imageView2Graveyard);\r\n        addLabel(description);\r\n        addLabel(attack);\r\n        addLabel(defence);\r\n        addImagesView(selectedCardImageView);\r\n        addImagesView(directAttackArea);\r\n    }\r\n\r\n    private void addImagesView(ImageView imageView) {\r\n        if (root != null) {\r\n            if (imageView != null && !root.getChildren().contains(imageView))\r\n                root.getChildren().add(imageView);\r\n        }\r\n    }\r\n\r\n    private void addLabel(Label label) {\r\n        if (root != null) {\r\n            if (label != null && !root.getChildren().contains(label))\r\n                root.getChildren().add(label);\r\n        }\r\n    }\r\n\r\n\r\n    public void pauseMenu() {\r\n        Popup pausePopup = new Popup();\r\n\r\n        AnchorPane anchorPane = new AnchorPane();\r\n        Button resumeButton = new Button(\"Resume\");\r\n        Button muteUnmuteButton = new Button(\"Mute/Unmute\");\r\n        Button endGame = new Button(\"EndGame\");\r\n\r\n        pausePopup = new Popup();\r\n        URL url = getClass().getResource(\"/images/backgrounds/19.jpg\");\r\n        Image image = new Image(String.valueOf(url));\r\n        ImageView imageView = new ImageView(image);\r\n        imageView.setFitWidth(1010);\r\n        imageView.setFitHeight(645);\r\n        pausePopup.setX(0);\r\n        pausePopup.setY(20);\r\n        imageView.setImage(image);\r\n        anchorPane.getChildren().add(imageView);\r\n        //anchorPane.setBackground(\"/images/backgrounds/19.jpg\");\r\n\r\n        //anchorPane.setStyle(\" -fx-background-color: #ac7339;\");\r\n        pausePopup.setX(0);\r\n        pausePopup.setY(0);\r\n        pausePopup.setWidth(900);\r\n        pausePopup.setHeight(600);\r\n        anchorPane.setPrefWidth(1010);\r\n        anchorPane.setPrefHeight(645);\r\n        anchorPane.setLayoutX(185);\r\n        anchorPane.setLayoutY(14);\r\n\r\n        resumeButton.setLayoutX(450);\r\n        resumeButton.setLayoutY(200);\r\n        Font font = Font.font(\"Agency FB\", 24);\r\n        resumeButton.setFont(font);\r\n        resumeButton.setTextFill(Paint.valueOf(\"#007a99\"));\r\n        if (!anchorPane.getChildren().contains(resumeButton)) {\r\n            anchorPane.getChildren().add(resumeButton);\r\n        }\r\n\r\n\r\n        muteUnmuteButton.setLayoutX(430);\r\n        muteUnmuteButton.setLayoutY(300);\r\n        muteUnmuteButton.setFont(font);\r\n        muteUnmuteButton.setTextFill(Paint.valueOf(\"#007a99\"));\r\n        if (!anchorPane.getChildren().contains(muteUnmuteButton)) {\r\n            anchorPane.getChildren().add(muteUnmuteButton);\r\n        }\r\n\r\n\r\n        endGame.setLayoutX(450);\r\n        endGame.setLayoutY(400);\r\n        endGame.setFont(font);\r\n        endGame.setTextFill(Paint.valueOf(\"#007a99\"));\r\n\r\n        if (!anchorPane.getChildren().contains(endGame)) {\r\n            anchorPane.getChildren().add(endGame);\r\n        }\r\n\r\n        pausePopup.getContent().add(anchorPane);\r\n\r\n\r\n        if (!pausePopup.isShowing()) {\r\n            pausePopup.show(stage);\r\n        }\r\n\r\n\r\n//        Popup finalPausePopup = pausePopup;\r\n        Popup finalPausePopup = pausePopup;\r\n        EventHandler<ActionEvent> eventForResumeButton =\r\n                new EventHandler<ActionEvent>() {\r\n                    public void handle(ActionEvent e) {\r\n                        finalPausePopup.hide();\r\n                    }\r\n                };\r\n        resumeButton.setOnAction(eventForResumeButton);\r\n\r\n        EventHandler<ActionEvent> eventForMuteUnmuteButton =\r\n                new EventHandler<ActionEvent>() {\r\n                    public void handle(ActionEvent e) {\r\n                        SoundController.muteAndUnmute();\r\n                        //fillPopUp(i,anchorPane,previousButton,nextButton,backButton,images);\r\n                    }\r\n                };\r\n        muteUnmuteButton.setOnAction(eventForMuteUnmuteButton);\r\n        //nextButton.setOnAction(eventForNextButton);\r\n//\r\n        //Popup finalPausePopup1 = pausePopup;\r\n        EventHandler<ActionEvent> eventForEndButton =\r\n                new EventHandler<ActionEvent>() {\r\n                    public void handle(ActionEvent e) {\r\n                        try {\r\n                            MainViewGraphic.getInstance().start(stage);\r\n                            finalPausePopup.hide();\r\n                        } catch (Exception exception) {\r\n                            exception.printStackTrace();\r\n                        }\r\n                    }\r\n                };\r\n        endGame.setOnAction(eventForEndButton);\r\n    }\r\n\r\n    public void fillPopUp(int[] i, AnchorPane anchorPane, Button previousButton, Button nextButton, Button backButton, ArrayList<Image> images) {\r\n        popUpGraveyard = new Popup();\r\n        anchorPane.setStyle(\" -fx-background-color: #174761;\");\r\n        popUpGraveyard.setX(0);\r\n        popUpGraveyard.setY(0);\r\n        popUpGraveyard.setWidth(900);\r\n        popUpGraveyard.setHeight(600);\r\n        anchorPane.setPrefWidth(388);\r\n        anchorPane.setPrefHeight(293);\r\n        anchorPane.setLayoutX(506);\r\n        anchorPane.setLayoutY(206);\r\n        if (i[0] < images.size()) {\r\n            graveyardFirstCard.setImage(images.get(i[0]));\r\n            graveyardFirstCard.setFitWidth(110);\r\n            graveyardFirstCard.setFitHeight(160);\r\n            graveyardFirstCard.setX(12);\r\n            graveyardFirstCard.setY(70);\r\n            if (graveyardFirstCard != null && !anchorPane.getChildren().contains(graveyardFirstCard))\r\n                anchorPane.getChildren().add(graveyardFirstCard);\r\n        }\r\n        if (i[0] + 1 < images.size()) {\r\n            graveyardSecondCard.setImage(images.get(i[0] + 1));\r\n            graveyardSecondCard.setFitWidth(110);\r\n            graveyardSecondCard.setFitHeight(160);\r\n            graveyardSecondCard.setX(138);\r\n            graveyardSecondCard.setY(70);\r\n            if (graveyardSecondCard != null && !anchorPane.getChildren().contains(graveyardSecondCard))\r\n                anchorPane.getChildren().add(graveyardSecondCard);\r\n        }\r\n        if (i[0] + 2 < images.size()) {\r\n            graveyardThirdCard.setImage(images.get(i[0] + 2));\r\n            graveyardThirdCard.setFitWidth(110);\r\n            graveyardThirdCard.setFitHeight(160);\r\n            graveyardThirdCard.setX(264);\r\n            graveyardThirdCard.setY(70);\r\n            if (graveyardThirdCard != null && !anchorPane.getChildren().contains(graveyardThirdCard))\r\n                anchorPane.getChildren().add(graveyardThirdCard);\r\n        }\r\n        previousButton.setLayoutX(160);\r\n        previousButton.setLayoutY(20);\r\n        Font font = Font.font(\"Agency FB\", 18);\r\n        previousButton.setFont(font);\r\n        previousButton.setTextFill(Paint.valueOf(\"#174761\"));\r\n        if (!anchorPane.getChildren().contains(previousButton)) {\r\n            anchorPane.getChildren().add(previousButton);\r\n        }\r\n        nextButton.setLayoutX(170);\r\n        nextButton.setLayoutY(242);\r\n        nextButton.setFont(font);\r\n        nextButton.setTextFill(Paint.valueOf(\"#174761\"));\r\n        if (!anchorPane.getChildren().contains(nextButton)) {\r\n            anchorPane.getChildren().add(nextButton);\r\n        }\r\n        backButton.setLayoutX(320);\r\n        backButton.setLayoutY(242);\r\n        backButton.setFont(font);\r\n        backButton.setTextFill(Paint.valueOf(\"#174761\"));\r\n        if (!anchorPane.getChildren().contains(backButton)) {\r\n            anchorPane.getChildren().add(backButton);\r\n        }\r\n        popUpGraveyard.getContent().add(anchorPane);\r\n        if (!popUpGraveyard.isShowing()) {\r\n            popUpGraveyard.show(stage);\r\n        }\r\n        EventHandler<ActionEvent> eventForBackButton =\r\n                new EventHandler<ActionEvent>() {\r\n                    public void handle(ActionEvent e) {\r\n                        popUpGraveyard.hide();\r\n                        System.out.println(\"hide graveyard\");\r\n                    }\r\n                };\r\n        backButton.setOnAction(eventForBackButton);\r\n        EventHandler<ActionEvent> eventForNextButton =\r\n                new EventHandler<ActionEvent>() {\r\n                    public void handle(ActionEvent e) {\r\n                        if (i[0] + 1 < images.size()) {\r\n                            i[0]++;\r\n                            fillPopUp(i, anchorPane, previousButton, nextButton, backButton, images);\r\n                        }\r\n                    }\r\n                };\r\n        nextButton.setOnAction(eventForNextButton);\r\n        EventHandler<ActionEvent> eventForPreviousButton =\r\n                new EventHandler<ActionEvent>() {\r\n                    public void handle(ActionEvent e) {\r\n                        if (i[0] - 1 >= 0) {\r\n                            i[0]--;\r\n                            fillPopUp(i, anchorPane, previousButton, nextButton, backButton, images);\r\n                        }\r\n                    }\r\n                };\r\n        previousButton.setOnAction(eventForPreviousButton);\r\n\r\n\r\n    }\r\n\r\n    public void updateBoard() {\r\n        setImagesAndCards();\r\n        addAllImages();\r\n    }\r\n\r\n    public void startMainNoCardSelected() throws Exception {\r\n        setMouseEventsMainPhase(imageView1hand1, player, 1, 20, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n        setMouseEventsMainPhase(imageView1hand2, player, 2, 21, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n        setMouseEventsMainPhase(imageView1hand3, player, 3, 22, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n        setMouseEventsMainPhase(imageView1hand4, player, 4, 23, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n        setMouseEventsMainPhase(imageView1hand5, player, 5, 24, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n        setMouseEventsMainPhase(imageView1hand6, player, 6, 25, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"summonMonster\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"preSet\"));\r\n        setMouseEventsMainPhase(imageView1Monster1, player, 5, 0, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"flipSummon\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"changePosition\"));\r\n        setMouseEventsMainPhase(imageView1Monster2, player, 3, 1, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"flipSummon\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"changePosition\"));\r\n        setMouseEventsMainPhase(imageView1Monster3, player, 1, 2, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"flipSummon\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"changePosition\"));\r\n        setMouseEventsMainPhase(imageView1Monster4, player, 2, 3, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"flipSummon\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"changePosition\"));\r\n        setMouseEventsMainPhase(imageView1Monster5, player, 4, 4, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"flipSummon\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"changePosition\"));\r\n        setMouseEventsMainPhase(imageView2Monster1, rival, 4, 5, DuelController.class.getMethod(\"selectCardOpponentMonsterZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView2Monster2, rival, 2, 6, DuelController.class.getMethod(\"selectCardOpponentMonsterZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView2Monster3, rival, 1, 7, DuelController.class.getMethod(\"selectCardOpponentMonsterZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView2Monster4, rival, 3, 8, DuelController.class.getMethod(\"selectCardOpponentMonsterZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView2Monster5, rival, 5, 9, DuelController.class.getMethod(\"selectCardOpponentMonsterZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView1SpellAndTrap1, player, 5, 10, DuelController.class.getMethod(\"selectCardPlayerTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView1SpellAndTrap2, player, 3, 11, DuelController.class.getMethod(\"selectCardPlayerTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView1SpellAndTrap3, player, 1, 12, DuelController.class.getMethod(\"selectCardPlayerTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView1SpellAndTrap4, player, 2, 13, DuelController.class.getMethod(\"selectCardPlayerTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView1SpellAndTrap5, player, 4, 14, DuelController.class.getMethod(\"selectCardPlayerTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"activateSpell\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView2SpellAndTrap1, rival, 4, 15, DuelController.class.getMethod(\"selectCardOpponentTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView2SpellAndTrap2, rival, 2, 16, DuelController.class.getMethod(\"selectCardOpponentTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView2SpellAndTrap3, rival, 1, 17, DuelController.class.getMethod(\"selectCardOpponentTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView2SpellAndTrap4, rival, 3, 18, DuelController.class.getMethod(\"selectCardOpponentTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView2SpellAndTrap5, rival, 5, 19, DuelController.class.getMethod(\"selectCardOpponentTrapAndSpellZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView1FieldZone, player, 1, 32, DuelController.class.getMethod(\"selectCardPlayerFieldZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView2FieldZone, rival, 1, 33, DuelController.class.getMethod(\"selectCardOpponentFieldZone\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView1Graveyard, player, 1, 34, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"showPlayerGraveyard\"), DuelController.class.getMethod(\"showPlayerGraveyard\"), DuelController.class.getMethod(\"doNothing\"));\r\n        setMouseEventsMainPhase(imageView2Graveyard, rival, 1, 35, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"startMainNoCardSelected\"), DuelController.class.getMethod(\"showRivalGraveyard\"), DuelController.class.getMethod(\"showRivalGraveyard\"), DuelController.class.getMethod(\"doNothing\"));\r\n    }\r\n\r\n\r\n    public void startBattleNoCardSelected() throws Exception {\r\n        setMouseEventsBattlePhase(imageView1hand1, player, 1, 20, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1hand2, player, 2, 21, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1hand3, player, 3, 22, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1hand4, player, 4, 23, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1hand5, player, 5, 24, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1hand6, player, 6, 25, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1Monster1, player, 5, 0, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class));\r\n        setMouseEventsBattlePhase(imageView1Monster2, player, 3, 1, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class));\r\n        setMouseEventsBattlePhase(imageView1Monster3, player, 1, 2, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class));\r\n        setMouseEventsBattlePhase(imageView1Monster4, player, 2, 3, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class));\r\n        setMouseEventsBattlePhase(imageView1Monster5, player, 4, 4, DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"selectCardPlayerMonsterZone\", int.class));\r\n        setMouseEventsBattlePhase(imageView2Monster1, rival, 4, 5, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"attackMonster\", int.class));\r\n        setMouseEventsBattlePhase(imageView2Monster2, rival, 2, 6, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"attackMonster\", int.class));\r\n        setMouseEventsBattlePhase(imageView2Monster3, rival, 1, 7, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"attackMonster\", int.class));\r\n        setMouseEventsBattlePhase(imageView2Monster4, rival, 3, 8, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"attackMonster\", int.class));\r\n        setMouseEventsBattlePhase(imageView2Monster5, rival, 5, 9, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"attackMonster\", int.class));\r\n        setMouseEventsBattlePhase(imageView1SpellAndTrap1, player, 5, 10, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1SpellAndTrap2, player, 3, 11, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1SpellAndTrap3, player, 1, 12, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1SpellAndTrap4, player, 2, 13, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1SpellAndTrap5, player, 4, 14, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView2SpellAndTrap1, rival, 4, 15, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView2SpellAndTrap2, rival, 2, 16, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView2SpellAndTrap3, rival, 1, 17, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView2SpellAndTrap4, rival, 3, 18, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView2SpellAndTrap5, rival, 5, 19, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1FieldZone, player, 1, 32, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView2FieldZone, rival, 1, 33, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView1Graveyard, player, 1, 34, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(imageView2Graveyard, rival, 1, 35, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"doNothing\", int.class));\r\n        setMouseEventsBattlePhase(directAttackArea, rival, 1, 35, DuelController.class.getMethod(\"doNothing\", int.class), this.getClass().getMethod(\"doNothing\"), DuelController.class.getMethod(\"directAttack\", int.class));\r\n        // todo owner? / direct attack vorodi nakhast chon ostad pull nakard\r\n    }\r\n\r\n\r\n    private void setMouseEventsMainPhase(ImageView imageView, User owner, int number1, int numberForGet, Method onMouseEnteredMethod, Method nextMethod, Method onMouseClickedMethodMonster, Method onMouseClickedMethodSpell, Method onMouseRightClickedMethod) {\r\n        imageView.setOnMouseEntered(event -> {\r\n            if (imageView.getImage() == null) return;\r\n            if (!imageView.getImage().equals(unknown) || owner.equals(player))\r\n                showCardDetails(cards.get(numberForGet));\r\n            else if (imageView.getImage().equals(unknown))\r\n                showUnknownCard();\r\n            if (selectedCard != null && selectedCard.getEffect() != null)\r\n                selectedCard.setEffect(null);\r\n            DropShadow dropShadow = new DropShadow(0, Color.BLACK);\r\n            dropShadow.setHeight(40);\r\n            dropShadow.setWidth(40);\r\n            imageView.setEffect(dropShadow);\r\n            try {\r\n                onMouseEnteredMethod.invoke(duelController, number1);\r\n                selectedCard = imageView;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n        imageView.setOnMouseExited(event -> {\r\n            if (imageView.getImage() == null) return;\r\n            if (!imageView.getImage().equals(unknown) || owner.equals(player))\r\n                clearCardDetails();\r\n            else if (imageView.getImage().equals(unknown))\r\n                clearCardDetails();\r\n            imageView.setEffect(null);\r\n            try {\r\n                if (selectedCard != null)\r\n                    DuelController.class.getMethod(\"unselectCard\").invoke(duelController);\r\n                selectedCard = null;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n        imageView.setOnMouseClicked(event -> {\r\n            if (imageView.getImage() == null) return;\r\n            if (event.getButton().equals(MouseButton.PRIMARY)) {\r\n                try {\r\n                    if (cards.get(numberForGet) instanceof MonsterCard)\r\n                        onMouseClickedMethodMonster.invoke(duelController);\r\n                    else\r\n                        onMouseClickedMethodSpell.invoke(duelController);\r\n                    if (!imageView.getImage().equals(unknown)) {\r\n                        clearCardDetails();\r\n                    }\r\n                    imageView.setEffect(null);\r\n                    selectedCard = null;\r\n                    updateBoard();\r\n                    startMainNoCardSelected();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else if (event.getButton().equals(MouseButton.SECONDARY)) {\r\n                try {\r\n                    onMouseRightClickedMethod.invoke(duelController);\r\n                    if (!imageView.getImage().equals(unknown)) {\r\n                        clearCardDetails();\r\n                    }\r\n                    imageView.setEffect(null);\r\n                    selectedCard = null;\r\n                    updateBoard();\r\n                    startMainNoCardSelected();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setMouseEventsBattlePhase(ImageView imageView, User owner, int number1, int numberForGet, Method onMouseEnteredMethod, Method nextMethod, Method onMouseClickedMethodMonster) {\r\n        imageView.setOnMouseEntered(event -> {\r\n            if (imageView.getImage() == null) return;\r\n            clearCardDetails();\r\n            if (!imageView.getImage().equals(unknown) || owner.equals(player))\r\n                showCardDetails(cards.get(numberForGet));\r\n            else if (imageView.getImage().equals(unknown))\r\n                showUnknownCard();\r\n            if (selectedCard != null && selectedCard.getEffect() != null && selectedCard.equals(imageView))\r\n                selectedCard.setEffect(null);\r\n            DropShadow dropShadow = new DropShadow(0, Color.BLACK);\r\n            dropShadow.setHeight(40);\r\n            dropShadow.setWidth(40);\r\n            imageView.setEffect(dropShadow);\r\n            try {\r\n                if (selectedCard == null) {\r\n                    onMouseEnteredMethod.invoke(duelController, number1);\r\n                    selectedCard = imageView;\r\n                }\r\n                updateBoard();\r\n            } catch (Exception e) {\r\n                System.out.println(e.getMessage());\r\n            }\r\n        });\r\n        imageView.setOnMouseExited(event -> {\r\n            if(imageView.getImage()==null) return;\r\n            if (selectedCard != null && selectedCard.getEffect() != null && selectedCard.getEffect() instanceof DropShadow) {\r\n                if (((DropShadow) imageView.getEffect()).getColor().equals(Color.BLACK)) {\r\n                    if (imageView.getImage() == null) return;\r\n                    clearCardDetails();\r\n                    imageView.setEffect(null);\r\n                    try {\r\n                        if (selectedCard.equals(imageView)) {\r\n                            DuelController.class.getMethod(\"unselectCard\").invoke(duelController);\r\n                            selectedCard = null;\r\n                        }\r\n                        updateBoard();\r\n                    } catch (Exception e) {\r\n                        System.out.println(e.getMessage());\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        imageView.setOnMouseClicked(event -> {\r\n            if (imageView.getImage() == null && !imageView.equals(directAttackArea)) {\r\n                System.out.println(\"returned because of null image\");\r\n                return;\r\n            }\r\n            if (event.getButton().equals(MouseButton.PRIMARY)) {\r\n                if(imageView.equals(directAttackArea)){\r\n                    try {\r\n                        onMouseClickedMethodMonster.invoke(duelController,number1);\r\n                        selectedCard.setEffect(null);\r\n                        selectedCard=null;\r\n                    }catch (Exception e){\r\n                        e.printStackTrace();\r\n                    }\r\n                    return;\r\n                }\r\n                if (!imageView.getImage().equals(unknown) || owner.equals(player))\r\n                    showCardDetails(cards.get(numberForGet));\r\n                else if (imageView.getImage().equals(unknown))\r\n                    showUnknownCard();\r\n                if (selectedCard != null && selectedCard.getEffect() != null/*l && selectedCard.equals(imageView)*/)\r\n                    selectedCard.setEffect(null);\r\n                try {\r\n                    onMouseClickedMethodMonster.invoke(duelController, number1);\r\n                    if(selectedCard!=null) selectedCard.setEffect(null);\r\n                    selectedCard=null;\r\n                    if (owner.equals(player)) {\r\n                        selectedCard = imageView;\r\n                        DropShadow dropShadow = new DropShadow(0, Color.DARKRED);\r\n                        dropShadow.setHeight(45);\r\n                        dropShadow.setWidth(45);\r\n                        imageView.setEffect(dropShadow);\r\n                    }\r\n                    updateBoard();\r\n                } catch (Exception e) {\r\n                    System.out.println(e.getMessage());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void showCardDetails(Card card) {\r\n        selectedCardImageView.setImage(card.getImage());\r\n        description.setText(\"Description:\\n\" + card.getDescription());\r\n        if (card instanceof MonsterCard) {\r\n            MonsterCard monsterCard = (MonsterCard) card;\r\n            attack.setText(\"Attack: \" + monsterCard.getAttack());\r\n            defence.setText(\"Defence: \" + monsterCard.getDefence());\r\n        }\r\n    }\r\n\r\n    public void showUnknownCard() {\r\n        selectedCardImageView.setImage(unknown);\r\n    }\r\n\r\n    public void startMainAHandSelected(ImageView imageView) throws Exception {\r\n//        setOnClickSelected(imageView1hand2, 1, DuelController.class.getMethod(\"selectCardPlayerHand\", int.class), this.getClass().getMethod(\"startMainAHandSelected\", ImageView.class));\r\n\r\n    }\r\n\r\n    public void startMainAPlayerMonsterSelected(ImageView imageView) {\r\n\r\n    }\r\n\r\n    public void doNothing() {\r\n\r\n    }\r\n\r\n    public void startMainAPlayerSpellOrTrapSelected(ImageView imageView) {\r\n\r\n    }\r\n\r\n    public void startMainPlayerFieldZoneSelected(ImageView imageView) {\r\n\r\n    }\r\n\r\n    public void startMainOpponentFieldZoneSelected(ImageView imageView) {\r\n\r\n    }\r\n\r\n    public void setBar() { //todo harja lifepoint taghyir kard bayad update beshe\r\n        if (rivalProgressBar != null && rival != null)\r\n            rivalProgressBar.setProgress((double) rival.getLifePoint() / 8000);\r\n        if (playerProgressBar != null && player != null)\r\n            playerProgressBar.setProgress((double) player.getLifePoint() / 8000);\r\n    }\r\n\r\n    private void setCardDetailsPart() {\r\n        description.setLayoutX(12);\r\n        description.setLayoutY(338);\r\n        description.setPrefWidth(167);\r\n        description.setPrefHeight(120);\r\n        description.setTextFill(Color.WHITE);\r\n        description.setAlignment(Pos.TOP_LEFT);\r\n        description.setFont(Font.font(\"Agency FB\", 14));\r\n        description.setWrapText(true);\r\n        attack.setLayoutX(12);\r\n        attack.setLayoutY(457);\r\n        attack.setPrefWidth(149);\r\n        attack.setPrefHeight(15);\r\n        attack.setTextFill(Color.WHITE);\r\n        attack.setFont(Font.font(\"Agency FB\", 14));\r\n        defence.setLayoutX(12);\r\n        defence.setLayoutY(471);\r\n        defence.setPrefWidth(149);\r\n        defence.setPrefHeight(15);\r\n        defence.setTextFill(Color.WHITE);\r\n        defence.setFont(Font.font(\"Agency FB\", 14));\r\n        selectedCardImageView.setY(128);\r\n        selectedCardImageView.setX(29);\r\n        selectedCardImageView.setFitHeight(202);\r\n        selectedCardImageView.setFitWidth(184);\r\n        selectedCardImageView.setPickOnBounds(true);\r\n        selectedCardImageView.setPreserveRatio(true);\r\n    }\r\n\r\n    private void clearCardDetails() {\r\n        selectedCardImageView.setImage(null);\r\n        description.setText(\"\");\r\n        attack.setText(\"\");\r\n        defence.setText(\"\");\r\n    }\r\n\r\n    //TODO RANGE MOSTATILE PPHASE AVAZ SHE VAGHTI TUSHE\r\n    public void goToMainPhase1() {\r\n        if (duelController.getPhase().equals(Phase.STANDBY_PHASE)) {\r\n            duelController.goNextPhase();\r\n        } else showErrorNotProperPhaseNavigation(\"Main_PHASE1\");\r\n    }\r\n\r\n    public void goToBattlePhase() {\r\n        if (duelController.getPhase().equals(Phase.STANDBY_PHASE)) {\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n        } else if (duelController.getPhase().equals(Phase.MAIN_PHASE1)) {\r\n            duelController.goNextPhase();\r\n        } else showErrorNotProperPhaseNavigation(\"BATTLE_PHASE\");\r\n    }\r\n\r\n    public void goToMainPhase2() {\r\n        if (duelController.getPhase().equals(Phase.BATTLE_PHASE)) {\r\n            duelController.goNextPhase();\r\n        } else if (duelController.getPhase().equals(Phase.STANDBY_PHASE)) {\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n        } else if (duelController.getPhase().equals(Phase.MAIN_PHASE1) && duelController.isStartTurn) {\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n        } else\r\n            showErrorNotProperPhaseNavigation(\"Main_Phase2\");\r\n    }\r\n\r\n    public void goToEndPhase() {\r\n        if (duelController.getPhase().equals(Phase.STANDBY_PHASE)) {\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n        } else if (duelController.getPhase().equals(Phase.MAIN_PHASE1)) {\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n        } else if (duelController.getPhase().equals(Phase.BATTLE_PHASE)) {\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n        } else if (duelController.getPhase().equals(Phase.MAIN_PHASE2)) {\r\n            duelController.goNextPhase();\r\n            duelController.goNextPhase();\r\n        }\r\n    }\r\n\r\n    public void showErrorNotProperPhaseNavigation(String phaseNameToEnter) {\r\n        Alert error = new Alert(Alert.AlertType.WARNING);\r\n        error.setHeaderText(\"Error\");\r\n        error.setContentText(\"You cant go to \" + phaseNameToEnter + \"from \" + duelController.getPhase());\r\n        error.showAndWait();\r\n    }\r\n\r\n\r\n    public static void printInformation(String input) {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setHeaderText(\"\");\r\n        alert.setContentText(input);\r\n        alert.showAndWait();\r\n    }\r\n\r\n\r\n    private void showPlayerPopUp() {\r\n//        System.out.println(popUpPlayerGraveyard);\r\n//\r\n//        //ArrayList<Card> playerGraveyard =\r\n//        ArrayList<Image> images = duelController.getBoard();\r\n//        ArrayList<Card> playerGraveyard = duelController.getCards();\r\n////        ArrayList<Card> playerGraveyard = (ArrayList<Card>) player.getBoard().getCardsInGraveyard();\r\n//        //todo image haye card haro az parmida begir\r\n////        ScrollPane scrollPane = new ScrollPane();\r\n//\r\n//        //scrollPane.set(100);\r\n//        //scrollPane.setLayoutX(500);\r\n//        //scrollPane.setLayoutX(200);\r\n//        popUpPlayerGraveyard = new Popup();\r\n//        System.out.println(popUpPlayerGraveyard);\r\n//        AnchorPane anchorPane = new AnchorPane();\r\n//        popUpPlayerGraveyard.setX(500);\r\n//        popUpPlayerGraveyard.setY(200);\r\n//        popUpPlayerGraveyard.setWidth(300);\r\n//        popUpPlayerGraveyard.setHeight(300);\r\n//        for (int i = 0; i < 6; i++) {\r\n//            ImageView imageView = new ImageView(images.get(i));\r\n//            imageView.setFitWidth(70);\r\n//            imageView.setFitHeight(102);\r\n//            imageView.setX(220);\r\n//            imageView.setY(20 * i + 102 * (i - 1));\r\n//            anchorPane.getChildren().add(imageView);\r\n//        }\r\n//        popUpPlayerGraveyard.getContent().add(anchorPane);\r\n//        System.out.println(anchorPane.getChildren());\r\n//        System.out.println(popUpPlayerGraveyard.getContent());;\r\n//\r\n//\r\n//        popUpPlayerGraveyard.show(stage);\r\n//        System.out.println(popUpPlayerGraveyard.isShowing());\r\n\r\n\r\n//        for (Card card : playerGraveyard) {\r\n//            ImageView imageView = new ImageView();\r\n//            imageView.setFitWidth(49);\r\n//            imageView.setFitHeight(71);\r\n//            imageView.setX(x);\r\n//            imageView.setY(y);\r\n//            scrollPane.getChildrenUnmodifiable().add(imageView);\r\n//        }\r\n\r\n\r\n    }\r\n\r\n\r\n    public void setPhaseRectangleColors() {\r\n        if (drawPhase == null)\r\n            return;\r\n        drawPhase.setFill(Color.DARKBLUE);\r\n        standByPhase.setFill(Color.DARKBLUE);\r\n        mainPhase1.setFill(Color.DARKBLUE);\r\n        battlePhase.setFill(Color.DARKBLUE);\r\n        mainPhase2.setFill(Color.DARKBLUE);\r\n        endPhase.setFill(Color.DARKBLUE);\r\n        switch (duelController.getPhase()) {\r\n            case DRAW_PHASE:\r\n                drawPhase.setFill(Color.LIGHTBLUE);\r\n                break;\r\n            case STANDBY_PHASE:\r\n                standByPhase.setFill(Color.LIGHTBLUE);\r\n                break;\r\n            case MAIN_PHASE1:\r\n                mainPhase1.setFill(Color.LIGHTBLUE);\r\n                break;\r\n            case BATTLE_PHASE:\r\n                battlePhase.setFill(Color.LIGHTBLUE);\r\n                break;\r\n            case MAIN_PHASE2:\r\n                mainPhase2.setFill(Color.LIGHTBLUE);\r\n                break;\r\n            case END_PHASE:\r\n                endPhase.setFill(Color.LIGHTBLUE);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public void changeTurn() {\r\n        User temp = player;\r\n        player = rival;\r\n        rival = temp;\r\n        playerUsername.setText(player.getUsername());\r\n        playerNickname.setText(player.getNickname());\r\n        rivalUsername.setText(rival.getUsername());\r\n        rivalNickname.setText(rival.getNickname());\r\n        playerLifePoint.setText(String.valueOf(player.getLifePoint()));\r\n        rivalLifePoint.setText(String.valueOf(rival.getLifePoint()));\r\n        Image tempImage = playerProfile.getImage();\r\n        playerProfile.setImage(rivalProfile.getImage());\r\n        rivalProfile.setImage(tempImage);\r\n    }\r\n\r\n    public void resetSelectedCard() {\r\n        if (duelController.getSelectedCard() == null) return;\r\n        selectedCard.setEffect(null);\r\n        selectedCard = null;\r\n        /*if(duelController.getSelectedCard().getOwner().equals(player)){\r\n            imageView1Monster1.setEffect(null);\r\n            imageView1Monster2.setEffect(null);\r\n            imageView1Monster3.setEffect(null);\r\n            imageView1Monster4.setEffect(null);\r\n            imageView1Monster5.setEffect(null);\r\n        }\r\n        else {\r\n            imageView2Monster1.setEffect(null);\r\n            imageView2Monster2.setEffect(null);\r\n            imageView2Monster3.setEffect(null);\r\n            imageView2Monster4.setEffect(null);\r\n            imageView2Monster5.setEffect(null);\r\n        }\r\n        duelController.setSelectedCard(null);*/\r\n    }\r\n\r\n\r\n    public void help() {\r\n\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setHeaderText(\"How to see card information?\");\r\n        alert.setContentText(\"You can move cursor on any card to see its information on the\\nleft side!\");\r\n        alert.showAndWait();\r\n        alert.setHeaderText(\"How to summon a monster?\");\r\n        alert.setContentText(\"You can click on any monster card from your hand to summon\\n it!\");\r\n        alert.showAndWait();\r\n        alert.setHeaderText(\"How to activate a spell?\");\r\n        alert.setContentText(\"You can right click on any spell card from your hand or in your\\n spell and trap zone to activate it's effect!\");\r\n        alert.showAndWait();\r\n        alert.setHeaderText(\"How to set a card?\");\r\n        alert.setContentText(\"You can right click on any card from your hand to set it!\");\r\n        alert.showAndWait();\r\n        alert.setHeaderText(\"How to flip summon a card?\");\r\n        alert.setContentText(\"You can click on any face-down monster card from your\\nmonster zone to flip summon it!\");\r\n        alert.showAndWait();\r\n        alert.setHeaderText(\"How to change a card's position?\");\r\n        alert.setContentText(\"You can click on any face-up monster card from your\\nmonster zone to change it's position!\");\r\n        alert.showAndWait();\r\n        alert.setHeaderText(\"How to mute all sounds\");\r\n        alert.setContentText(\"You can pause the game by clicking on the pause button and\\nthen Mute/UnMute all sounds!\");\r\n        alert.showAndWait();\r\n//        alert.setHeaderText(\"How to mute/unmute?\");\r\n//        alert.setContentText(\"You can click on each trap/spell card to summon it!\");\r\n//        alert.showAndWait();\r\n\r\n\r\n    }\r\n\r\n    public void explode(ImageView imageView) {\r\n        ExplosionController animation = new ExplosionController(imageView);\r\n        animation.setOnFinished(new EventHandler<ActionEvent>() {\r\n            @Override\r\n            public void handle(ActionEvent actionEvent) {\r\n                imageView.setImage(null);\r\n            }\r\n        });\r\n        animation.play();\r\n    }\r\n\r\n    public void setLifePoints(){\r\n        playerLifePoint.setText(String.valueOf(player.getLifePoint()));\r\n        rivalLifePoint.setText(String.valueOf(rival.getLifePoint()));\r\n        setBar();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/view/GameViewGraphic.java	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ src/main/java/view/GameViewGraphic.java	(date 1625828369935)
@@ -12,9 +12,7 @@
 import javafx.scene.Node;
 import javafx.scene.Scene;
 import javafx.scene.control.*;
-import javafx.scene.effect.BlurType;
 import javafx.scene.effect.DropShadow;
-import javafx.scene.effect.Effect;
 import javafx.scene.image.Image;
 import javafx.scene.image.ImageView;
 import javafx.scene.input.MouseButton;
@@ -29,11 +27,8 @@
 import model.Card;
 import model.MonsterCard;
 import model.User;
-import org.w3c.dom.events.Event;
 
-import java.io.File;
 import java.lang.reflect.Method;
-import java.net.FileNameMap;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.ResourceBundle;
@@ -85,6 +80,7 @@
     private static final ImageView selectedCardImageView = new ImageView();
     public Popup popUpGraveyard;
     public static final Image unknown = new Image("images/Cards/Unknown.jpg");
+    public ImageView cardToExplode = new ImageView();
 
 
     /*public GameViewGraphic(User player,User rival,int numberOfRounds){
@@ -169,9 +165,9 @@
                     else if (child.getId().equals("rivalLifePoint"))
                         rivalLifePoint = rivalLifePoint1;
                 } else if (child instanceof ProgressBar) {
-                    if (child.getId().equals("playerProgressBar1"))
+                    if (child.getId().equals("playerProgressBar"))
                         playerProgressBar = playerProgressBar1;
-                    else if (child.getId().equals("rivalProgressBar1"))
+                    else if (child.getId().equals("rivalProgressBar"))
                         rivalProgressBar = rivalProgressBar1;
                 }
             }
@@ -226,9 +222,9 @@
     }
 
     public void setDirectAttackArea(){
-        directAttackArea.setImage(new Image("images/profiles/profile.jpg"));
+//        directAttackArea.setImage(new Image("images/profiles/profile.jpg"));
         directAttackArea.setFitWidth(423);
-        directAttackArea.setFitHeight(72);
+        directAttackArea.setFitHeight(150);
         directAttackArea.setX(300);
         directAttackArea.setY(0);
     }
@@ -601,7 +597,6 @@
                 new EventHandler<ActionEvent>() {
                     public void handle(ActionEvent e) {
                         popUpGraveyard.hide();
-                        System.out.println("hide graveyard");
                     }
                 };
         backButton.setOnAction(eventForBackButton);
@@ -817,13 +812,17 @@
                 }
             }
         });
+        if(imageView.equals(directAttackArea))
+            System.out.println("directAttackArea");
         imageView.setOnMouseClicked(event -> {
+            System.out.println("ok");
             if (imageView.getImage() == null && !imageView.equals(directAttackArea)) {
                 System.out.println("returned because of null image");
                 return;
             }
             if (event.getButton().equals(MouseButton.PRIMARY)) {
                 if(imageView.equals(directAttackArea)){
+                    System.out.println("entered direct attack area");
                     try {
                         onMouseClickedMethodMonster.invoke(duelController,number1);
                         selectedCard.setEffect(null);
@@ -897,11 +896,11 @@
 
     }
 
-    public void setBar() { //todo harja lifepoint taghyir kard bayad update beshe
-        if (rivalProgressBar != null && rival != null)
-            rivalProgressBar.setProgress((double) rival.getLifePoint() / 8000);
-        if (playerProgressBar != null && player != null)
-            playerProgressBar.setProgress((double) player.getLifePoint() / 8000);
+    public void setBar() {
+        if (rivalProgressBar != null)
+            rivalProgressBar.setProgress((double) Integer.parseInt(rivalLifePoint.getText()) / 8000);
+        if (playerProgressBar != null)
+            playerProgressBar.setProgress((double) Integer.parseInt(playerLifePoint.getText()) / 8000);
     }
 
     private void setCardDetailsPart() {
Index: src/main/java/controller/DuelController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport controller.exeption.*;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport model.*;\r\nimport view.DuelView;\r\nimport view.GameViewGraphic;\r\n\r\nimport java.lang.reflect.Method;\r\nimport java.util.*;\r\n\r\npublic class DuelController {\r\n\r\n    public static final int[] playerGroundNumbers = {3, 4, 2, 5, 1};\r\n    private GameViewGraphic gameViewGraphic = null;\r\n    private User player;\r\n    private User rival;\r\n    private Round[] rounds;\r\n    private final int roundNumber;\r\n    private SelectedCard selectedCard;\r\n    private int roundCounter;\r\n    private Phase phase;\r\n    private boolean hasSummonedOrSetInThisTurn;\r\n    private ArrayList<ArrayList<ActionsDoneInTurn>> actionsOnThisCardPlayer = new ArrayList<>(5);\r\n    private ArrayList<ArrayList<ActionsDoneInTurn>> actionsOnThisCardRival = new ArrayList<>(5);\r\n    private Integer[] playerAttackPoints = new Integer[5];\r\n    private Integer[] rivalAttackPoints = new Integer[5];\r\n    private Integer[] playerDefencePoints = new Integer[5];\r\n    private Integer[] rivalDefencePoints = new Integer[5];\r\n    public boolean isStartTurn;\r\n    private boolean shouldEndGameForView;\r\n\r\n    public DuelController(User player, User rival, int roundNumber, GameViewGraphic gameViewGraphic) {\r\n        this.player = player;\r\n        this.rival = rival;\r\n        this.gameViewGraphic = gameViewGraphic;\r\n        setGameDeck(this.player);\r\n        setGameDeck(this.rival);\r\n        this.rounds = new Round[roundNumber];\r\n        this.roundNumber = roundNumber;\r\n        this.roundCounter = 0;\r\n        startNewGame(null);\r\n    }\r\n\r\n    public Phase getPhase() {\r\n        return this.phase;\r\n    }\r\n\r\n    public void setPhase(Phase phase) {\r\n        this.phase = phase;\r\n    }\r\n\r\n    public ArrayList<ActionsDoneInTurn> getActionsOnThisCardPlayer(int i) {\r\n        return actionsOnThisCardPlayer.get(i);\r\n    }\r\n\r\n    public ArrayList<ActionsDoneInTurn> getActionsOnThisCardRival(int i) {\r\n        return actionsOnThisCardRival.get(i);\r\n    }\r\n\r\n    public void setDuelView(GameViewGraphic gameViewGraphic) {\r\n        this.gameViewGraphic = gameViewGraphic;\r\n    }\r\n\r\n    private void setGameDeck(User user) {\r\n        Deck deck;\r\n        if (user.getDeckByName(\"@\" + user.getActiveDeck().getDeckName()) == null) {\r\n            deck = new Deck(\"@\" + user.getActiveDeck().getDeckName());\r\n        } else {\r\n            deck = user.getDeckByName(\"@\" + user.getActiveDeck().getDeckName());\r\n            user.removeDeck(deck);\r\n        }\r\n        ArrayList<Card> mainCards = new ArrayList<>(user.getActiveDeck().getMainDeck());\r\n        ArrayList<Card> sideCards = new ArrayList<>(user.getActiveDeck().getSideDeck());\r\n        deck.setDeck(mainCards, sideCards);\r\n        user.addDeck(deck);\r\n        user.setGameDeck(deck);\r\n    }\r\n\r\n    public User getPlayer() {\r\n        return this.player;\r\n    }\r\n\r\n    public User getRival() {\r\n        return this.rival;\r\n    }\r\n\r\n    public void setPlayer(User player) {\r\n        this.player = player;\r\n    }\r\n\r\n    public void setRival(User rival) {\r\n        this.rival = rival;\r\n    }\r\n\r\n    public boolean getHasEnabledSuijin(int i) {\r\n        return actionsOnThisCardRival.get(i).contains(ActionsDoneInTurn.ENABLE_SUIJIN);\r\n    }\r\n\r\n    public void setHasEnabledSuijinTrue(int i) {\r\n        actionsOnThisCardRival.get(i).add(ActionsDoneInTurn.ENABLE_SUIJIN);\r\n    }\r\n\r\n    public void setMonsterAttackPlayer(int i, Integer number) {\r\n        this.playerAttackPoints[i] = number;\r\n    }\r\n\r\n    public void setMonsterAttackRival(int i, Integer number) {\r\n        this.rivalAttackPoints[i] = number;\r\n    }\r\n\r\n    public void setMonsterDefencePlayer(int i, Integer number) {\r\n        this.playerDefencePoints[i] = number;\r\n    }\r\n\r\n    public void setMonsterDefenceRival(int i, Integer number) {\r\n        this.rivalDefencePoints[i] = number;\r\n    }\r\n\r\n    public SelectedCard getSelectedCard() {\r\n        return this.selectedCard;\r\n    }\r\n\r\n    public boolean getShouldEndGameForView() {\r\n        return this.shouldEndGameForView;\r\n    }\r\n\r\n    public static int[] getPlayerGroundNumbers() {\r\n        return playerGroundNumbers;\r\n    }\r\n\r\n    public void setSelectedCard(SelectedCard selectedCard) {\r\n        this.selectedCard = selectedCard;\r\n    }\r\n\r\n    private void newActionsOnThisCardPlayer() {\r\n        ArrayList<ActionsDoneInTurn> arrayList = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            this.actionsOnThisCardPlayer.add(arrayList);\r\n        }\r\n    }\r\n\r\n    private void newActionsOnThisCardRival() {\r\n        ArrayList<ActionsDoneInTurn> arrayList = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            this.actionsOnThisCardRival.add(arrayList);\r\n        }\r\n    }\r\n\r\n    public void changeAllAttackPoints(int increaseOrDecrease, int amount) {\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.playerAttackPoints[i] != null)\r\n                this.playerAttackPoints[i] = this.playerAttackPoints[i] + increaseOrDecrease * amount;\r\n            if (this.rivalAttackPoints[i] != null)\r\n                this.rivalAttackPoints[i] = this.rivalAttackPoints[i] + increaseOrDecrease * amount;\r\n        }\r\n    }\r\n\r\n    public void changePlayerAttackPoint(int address, int amount) {\r\n        this.playerAttackPoints[address] += amount;\r\n    }\r\n\r\n    public void changeRivalAttackPoint(int address, int amount) {\r\n        this.rivalAttackPoints[address] += amount;\r\n    }\r\n\r\n    public void changePlayerDefencePoint(int address, int amount) {\r\n        this.playerDefencePoints[address] += amount;\r\n    }\r\n\r\n    public void changeRivalDefencePoint(int address, int amount) {\r\n        this.rivalDefencePoints[address] += amount;\r\n    }\r\n\r\n    public void startNewGame(User winner) {\r\n        if (winner != null) {\r\n            User loser;\r\n            if (winner.equals(this.player)) {\r\n                loser = this.rival;\r\n            } else {\r\n                loser = this.player;\r\n            }\r\n            this.player = loser;\r\n            this.rival = winner;\r\n        } else this.isStartTurn = true;\r\n        this.player.setLifePoint(8000);\r\n        this.rival.setLifePoint(8000);\r\n        this.player.setNewBoard();\r\n        this.rival.setNewBoard();\r\n        clearLastTurn();\r\n        startDrawPhase(true);\r\n    }\r\n\r\n    public void selectCardPlayerMonsterZone(int address) throws Exception {\r\n        MonsterCard[] monsters = this.player.getBoard().getMonsters();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (monsters[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(address), BoardZone.MONSTERZONE, address, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentMonsterZone(int address) throws Exception {\r\n        MonsterCard[] monsters = this.rival.getBoard().getMonsters();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (monsters[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getMonsterByNumber(address), BoardZone.MONSTERZONE, address, this.rival);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerTrapAndSpellZone(int address) throws Exception {\r\n        Card[] spellAndTrap = this.player.getBoard().getSpellsAndTraps();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (spellAndTrap[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getSpellAndTrapByNumber(address), BoardZone.SPELLANDTRAPZONE, address, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentTrapAndSpellZone(int address) throws Exception {\r\n        Card[] spellAndTrap = this.rival.getBoard().getSpellsAndTraps();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (spellAndTrap[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getSpellAndTrapByNumber(address), BoardZone.SPELLANDTRAPZONE, address, this.rival);\r\n\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerFieldZone(int number) throws Exception {\r\n        Card fieldZone = this.player.getBoard().getFieldZone();\r\n        if (fieldZone == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getFieldZone(), BoardZone.FIELDZONE, 1, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentFieldZone(int number) throws Exception {\r\n        Card fieldZone = this.rival.getBoard().getFieldZone();\r\n        if (fieldZone == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getFieldZone(), BoardZone.FIELDZONE, 1, this.rival);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerHand(int address) throws Exception {\r\n        List<Card> cardsInHand = this.player.getBoard().getCardsInHand();\r\n        if ((address > cardsInHand.size()) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        } else if (cardsInHand.get(address - 1) == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        }\r\n        this.selectedCard = new SelectedCard(this.player.getBoard().getCardInHandByNumber(address - 1), BoardZone.HAND, address - 1, this.player);\r\n        DuelView.printText(\"card selected\");\r\n    }\r\n\r\n    public void unselectCard() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else {\r\n            this.selectedCard = null;\r\n        }\r\n    }\r\n\r\n    public void unselectCardFromCommand() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else {\r\n            this.selectedCard = null;\r\n            DuelView.printText(\"card deselected\");\r\n        }\r\n    }\r\n\r\n    public int getCountOfMonsterCardsInGround(User user) {\r\n        MonsterCard[] monsterCards = user.getBoard().getMonsters();\r\n        int countOfMonsterCardsInGround = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            if (monsterCards[i] != null) {\r\n                countOfMonsterCardsInGround++;\r\n            }\r\n        }\r\n        return countOfMonsterCardsInGround;\r\n    }\r\n\r\n    private void addToAttackDefenceOfPutCard(int place, User owner) {\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.player.getBoard().getMonsterByNumber(i) != null)\r\n                this.player.getBoard().getMonsterByNumber(i).takeAction(this, TakeActionCase.ANY_MONSTER_PUT_IN_MONSTERZONE, owner, place);\r\n            if (this.rival.getBoard().getMonsterByNumber(i) != null)\r\n                this.rival.getBoard().getMonsterByNumber(i).takeAction(this, TakeActionCase.ANY_MONSTER_PUT_IN_MONSTERZONE, owner, place);\r\n        }\r\n        if (this.player.getBoard().getFieldZone() != null)\r\n            ((SpellCard) this.player.getBoard().getFieldZone()).takeAction(this, TakeActionCase.ANY_MONSTER_PUT_IN_MONSTERZONE, owner, place);\r\n        if (this.rival.getBoard().getFieldZone() != null)\r\n            ((SpellCard) this.rival.getBoard().getFieldZone()).takeAction(this, TakeActionCase.ANY_MONSTER_PUT_IN_MONSTERZONE, owner, place);\r\n    }\r\n\r\n    public void summonMonster() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        }\r\n        if (!(this.selectedCard.getCard() instanceof MonsterCard && this.selectedCard.getBoardZone().equals(BoardZone.HAND) && !((MonsterCard) this.selectedCard.getCard()).getCardType().equals(CardType.RITUAL))) {\r\n            throw new CanNotSummon();\r\n        }\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2)))) {\r\n            throw new ActionNotAllowedInThisPhase();\r\n        }\r\n        if (this.player.getBoard().isFullMonsterZone()) {\r\n            throw new FullMonsterZone();\r\n        }\r\n        if (((MonsterCard) this.selectedCard.getCard()).getCanBeNormalSummoned()) {\r\n            if (hasSummonedOrSetInThisTurn) {\r\n                throw new AlreadySummoned();\r\n            }\r\n            MonsterCard monsterCard = (MonsterCard) selectedCard.getCard();\r\n            if (monsterCard.getLevel() <= 4) {\r\n                int place = this.player.getBoard().putMonster(monsterCard, \"OO\");\r\n                setMonsterAttackPlayer(place, monsterCard.getAttack());\r\n                this.playerDefencePoints[place] = monsterCard.getAttack();\r\n                monsterCard.takeAction(this, TakeActionCase.SUMMONED, this.player, place);\r\n                addToAttackDefenceOfPutCard(place, this.player);\r\n                this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n                unselectCard();\r\n                DuelView.printText(\"summoned successfully\");\r\n                getBoard();\r\n                hasSummonedOrSetInThisTurn = true;\r\n                return;\r\n            }\r\n            if (monsterCard.getLevel() < 7) {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 1) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeOneMonsterForSummon();\r\n                }\r\n            } else {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 2) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeTwoMonstersForSummon();\r\n                }\r\n            }\r\n        } else if (!((MonsterCard) this.selectedCard.getCard()).getCardType().equals(CardType.RITUAL)) {\r\n            specialSummonNormal();\r\n        }\r\n    }\r\n\r\n    private void tributeOneMonsterForSummon() throws Exception {\r\n        DuelView.printText(\"select a monster by number to tribute\");\r\n        String input = DuelView.scan();\r\n        if (input.equals(\"cancel\")) return;\r\n        while (!input.matches(\"[\\\\d]+\") && Integer.parseInt(input) < 6) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input = DuelView.scan();\r\n            if (input.equals(\"cancel\")) return;\r\n        }\r\n        int address = Integer.parseInt(input);\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address) == null) throw new NoMonsterHere();\r\n        this.player.getBoard().removeMonster(address, this, player);\r\n        removeMonsterPlayer(address);\r\n        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"OO\");\r\n        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());\r\n        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.SUMMONED, this.player, place);\r\n        addToAttackDefenceOfPutCard(place, this.player);\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"summoned successfully\");\r\n        getBoard();\r\n        hasSummonedOrSetInThisTurn = true;\r\n    }\r\n\r\n    private void tributeTwoMonstersForSummon() throws Exception {\r\n        DuelView.printText(\"select two monsters by number to tribute\");\r\n        String input1 = DuelView.scan();\r\n        if (input1.equals(\"cancel\")) return;\r\n        while (!input1.matches(\"[\\\\d]+\") && Integer.parseInt(input1) < 6) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input1 = DuelView.scan();\r\n            if (input1.equals(\"cancel\")) return;\r\n        }\r\n        int address1 = Integer.parseInt(input1) - 1;\r\n        address1 = playerGroundNumbers[address1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address1) == null) throw new NoMonsterHere();\r\n        String input2 = DuelView.scan();\r\n        if (input2.equals(\"cancel\")) return;\r\n        while (!input2.matches(\"[\\\\d]+\") && Integer.parseInt(input2) < 6) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input2 = DuelView.scan();\r\n            if (input2.equals(\"cancel\")) return;\r\n        }\r\n        int address2 = Integer.parseInt(input2) - 1;\r\n        address2 = playerGroundNumbers[address2] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address2) == null) throw new NoMonsterHere();\r\n        if (address1 == address2) throw new sameAddresses();\r\n        this.player.getBoard().removeMonster(address1, this, player);\r\n        this.player.getBoard().removeMonster(address2, this, player);\r\n        removeMonsterPlayer(address1);\r\n        removeMonsterPlayer(address2);\r\n        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"OO\");\r\n        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());\r\n        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.SUMMONED, this.player, place);\r\n        addToAttackDefenceOfPutCard(place, this.player);\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"summoned successfully\");\r\n        getBoard();\r\n        hasSummonedOrSetInThisTurn = true;\r\n    }\r\n\r\n    public void specialSummonNormal() {\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.SPECIAL_SUMMONED, this.player, this.selectedCard.getNumber());\r\n\r\n    }\r\n\r\n    public void preSet() throws Exception {\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!(this.selectedCard.getBoardZone().equals(BoardZone.HAND))) throw new CanNotSet();\r\n        if (this.selectedCard.getCard() instanceof MonsterCard) setMonster();\r\n        else if (this.selectedCard.getCard() instanceof SpellCard) setSpell();\r\n        else if (this.selectedCard.getCard() instanceof TrapCard) setTrap();\r\n    }\r\n\r\n    public void setMonster() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2)))) {\r\n            throw new ImproperPhase();\r\n        }\r\n        if (this.player.getBoard().isFullMonsterZone()) {\r\n            throw new FullMonsterZone();\r\n        }\r\n        if (hasSummonedOrSetInThisTurn) {\r\n            throw new AlreadySummoned();\r\n        }\r\n        MonsterCard monsterCard = (MonsterCard) this.selectedCard.getCard();\r\n        if (monsterCard.getCanBeNormalSummoned()) {\r\n            if (monsterCard.getLevel() <= 4) {\r\n                int place = this.player.getBoard().putMonster(monsterCard, \"DH\");\r\n                setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());\r\n                this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();\r\n                addToAttackDefenceOfPutCard(place, this.player);\r\n                this.actionsOnThisCardPlayer.get(place).add(ActionsDoneInTurn.SET);\r\n                this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n                unselectCard();\r\n                DuelView.printText(\"set successfully\");\r\n                hasSummonedOrSetInThisTurn = true;\r\n                getBoard();\r\n                return;\r\n            }\r\n            if (monsterCard.getLevel() < 7) {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 1) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeOneMonsterForSet();\r\n                }\r\n            } else {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 2) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeTwoMonstersForSet();\r\n                }\r\n            }\r\n        } else if (!((MonsterCard) this.selectedCard.getCard()).getCardType().equals(CardType.RITUAL)) {\r\n            specialSummonNormal();\r\n        }\r\n    }\r\n\r\n    private void tributeOneMonsterForSet() throws Exception {\r\n        DuelView.printText(\"select a monster by number to tribute\");\r\n        String input = DuelView.scan();\r\n        if (input.equals(\"cancel\")) return;\r\n        while (!(input.matches(\"[\\\\d]+\") && Integer.parseInt(input) < 6)) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input = DuelView.scan();\r\n            if (input.equals(\"cancel\")) return;\r\n        }\r\n        int address = Integer.parseInt(input);\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address) == null) throw new NoMonsterHere();\r\n        this.player.getBoard().removeMonster(address, this, player);\r\n        removeMonsterPlayer(address);\r\n        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\");\r\n        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());\r\n        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();\r\n        addToAttackDefenceOfPutCard(place, this.player);\r\n        this.actionsOnThisCardPlayer.get(place).add(ActionsDoneInTurn.SET);\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        hasSummonedOrSetInThisTurn = true;\r\n        getBoard();\r\n    }\r\n\r\n    private void tributeTwoMonstersForSet() throws Exception {\r\n        DuelView.printText(\"select two monsters by number to tribute\");\r\n        String input1 = DuelView.scan();\r\n        if (input1.equals(\"cancel\")) return;\r\n        while (!input1.matches(\"[\\\\d]+\")) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input1 = DuelView.scan();\r\n            if (input1.equals(\"cancel\")) return;\r\n        }\r\n        int address1 = Integer.parseInt(input1);\r\n        address1 = playerGroundNumbers[address1 - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address1) == null) throw new NoMonsterHere();\r\n        String input2 = DuelView.scan();\r\n        if (input2.equals(\"cancel\")) return;\r\n        while (!input2.matches(\"[\\\\d]+\")) {\r\n            DuelView.printText(\"please enter a valid number!\");\r\n            input2 = DuelView.scan();\r\n            if (input2.equals(\"cancel\")) return;\r\n        }\r\n        int address2 = Integer.parseInt(input2);\r\n        address2 = playerGroundNumbers[address2 - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address2) == null) throw new NoMonsterHere();\r\n        if (address1 == address2) throw new sameAddresses();\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        this.player.getBoard().removeMonster(address1, this, player);\r\n        this.player.getBoard().removeMonster(address2, this, player);\r\n        removeMonsterPlayer(address1);\r\n        removeMonsterPlayer(address2);\r\n        int place = this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\");\r\n        setMonsterAttackPlayer(place, ((MonsterCard) selectedCard.getCard()).getAttack());\r\n        this.playerDefencePoints[place] = ((MonsterCard) selectedCard.getCard()).getAttack();\r\n        addToAttackDefenceOfPutCard(place, this.player);\r\n        this.actionsOnThisCardPlayer.get(place).add(ActionsDoneInTurn.SET);\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        hasSummonedOrSetInThisTurn = true;\r\n        getBoard();\r\n    }\r\n\r\n    private void setSpell() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new ImproperPhase();\r\n        SpellCard spellCard = (SpellCard) this.selectedCard.getCard();\r\n        if (!spellCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().isFullSpellAndTrapZone())\r\n                throw new FullSpellZone();\r\n            this.player.getBoard().putSpellOrTrap(spellCard, \"H\");\r\n        } else {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            this.player.getBoard().putInFieldZone(spellCard);\r\n        }\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        getBoard();\r\n    }\r\n\r\n    private void setTrap() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new ImproperPhase();\r\n        TrapCard trapCard = (TrapCard) this.selectedCard.getCard();\r\n        if (!trapCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().isFullSpellAndTrapZone()) {\r\n                throw new FullSpellZone();\r\n            }\r\n            this.player.getBoard().putSpellOrTrap(trapCard, \"H\");\r\n        } else {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            this.player.getBoard().putInFieldZone(trapCard);\r\n        }\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        getBoard();\r\n    }\r\n\r\n    public void changePosition() throws Exception {\r\n        String targetPositionInShort = \"\";\r\n        switch (this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber())) {\r\n            case \"DO\":\r\n                targetPositionInShort = \"OO\";\r\n                break;\r\n            case \"OO\":\r\n                targetPositionInShort = \"DO\";\r\n                break;\r\n        }\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!this.selectedCard.getOwner().getUsername().equals(player.getUsername()) || !this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) || this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\"))\r\n            throw new CanNotChangePosition();\r\n        if (!(this.phase.equals(Phase.MAIN_PHASE1) || (this.phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new CantDoActionInThisPhase();\r\n        if (this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(targetPositionInShort) || this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\"))\r\n            throw new AlreadyInWantedPosition();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.CHANGE_POSITION))\r\n            throw new AlreadyChangedPosition();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.ATTACK) && this.phase.equals(Phase.MAIN_PHASE2))\r\n            throw new HasAttackedInBattle();\r\n        this.player.getBoard().changeMonsterPosition(this.selectedCard.getNumber(), targetPositionInShort);\r\n        actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.CHANGE_POSITION);\r\n        DuelView.printText(\"monster card position changed successfully\");\r\n        getBoard();\r\n    }\r\n\r\n    public void flipSummon() throws Exception {\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) || !this.selectedCard.getOwner().getUsername().equals(player.getUsername()))\r\n            throw new CanNotChangePosition();\r\n        if (!(this.phase.equals(Phase.MAIN_PHASE1) || this.phase.equals(Phase.MAIN_PHASE2)))\r\n            throw new CantDoActionInThisPhase();\r\n        if (!this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\") || actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.SET))\r\n            throw new CanNotFlipSummon();\r\n        this.player.getBoard().changeMonsterPosition(this.selectedCard.getNumber(), \"OO\");\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.FLIP_SUMMONED, this.player, this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"flip summoned successfully\");\r\n        getBoard();\r\n    }\r\n\r\n    public void attackMonster(int monsterNumber) throws Exception {\r\n        monsterNumber = playerGroundNumbers[monsterNumber - 1] - 1;\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!(this.selectedCard.getOwner().getUsername().equals(player.getUsername()) && this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) && (this.selectedCard.getCard() instanceof MonsterCard) && (this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"OO\"))))\r\n            throw new CanNotAttack();\r\n        if (!(this.phase.equals(Phase.BATTLE_PHASE)))\r\n            throw new CantDoActionInThisPhase();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.ATTACK))\r\n            throw new AlreadyAttacked();\r\n        if (getCountOfMonsterCardsInGround(this.rival) == 0)\r\n            throw new NoCardToAttack();\r\n        if (rival.getBoard().getMonsterByNumber(monsterNumber) == null)\r\n            throw new NoCardFoundInThisPosition();\r\n        findWayAttack(monsterNumber);\r\n        manageEndGame();\r\n    }\r\n\r\n    private void findWayAttack(int monsterNumber) throws Exception {\r\n        String targetPosition = this.rival.getBoard().getMonsterConditionByNumber(monsterNumber);\r\n        if (this.rival.getBoard().getMonsterByNumber(monsterNumber).canBeAttacked(this, monsterNumber)) {\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.ATTACKED, this.rival, monsterNumber);\r\n            switch (targetPosition) {\r\n                case \"OO\":\r\n                    attackMonsterOO(monsterNumber);\r\n                    break;\r\n                case \"DO\":\r\n                    attackMonsterDO(monsterNumber);\r\n                    break;\r\n                case \"DH\":\r\n                    attackMonsterDH(monsterNumber);\r\n                    break;\r\n            }\r\n        } else throw new CanNotAttackThisCard();\r\n    }\r\n\r\n    private void attackMonsterOO(int monsterNumber) throws Exception {\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        int targetAttack = this.rivalAttackPoints[monsterNumber];\r\n        if (attackerAttack > targetAttack) {\r\n            int damage = attackerAttack - targetAttack;\r\n            if (!this.rival.getBoard().getMonsterByNumber(monsterNumber).equals(MonsterCard.EXPLODER_DRAGON))\r\n                this.rival.decreaseLifePoint(damage);\r\n            this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber, this, rival);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"your opponent’s monster is destroyed and your opponent receives \" + damage + \" battle damage\");\r\n        } else if (attackerAttack == targetAttack) {\r\n            this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber, this, rival);\r\n            if (this.player.getBoard().getMonsterByNumber(this.selectedCard.getNumber()) != null) {\r\n                this.player.getBoard().putInGraveYard(this.selectedCard.getCard());\r\n                this.player.getBoard().removeMonster(this.selectedCard.getNumber(), this, player);\r\n                removeMonsterPlayer(this.selectedCard.getNumber());\r\n            }\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"both you and your opponent monster cards are destroyed and no one receives damage\");\r\n        } else {\r\n            int damage = targetAttack - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.REMOVE_FROM_MONSTERZONE, this.player, this.selectedCard.getNumber());\r\n            this.player.getBoard().putInGraveYard(this.selectedCard.getCard());\r\n            this.player.getBoard().removeMonster(this.selectedCard.getNumber(), this, player);\r\n            removeMonsterPlayer(this.selectedCard.getNumber());\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"Your monster card is destroyed and you received \" + damage + \" battle damage\");\r\n        }\r\n        SoundController.getInstance().playWhenAttacks();\r\n        unselectCard();\r\n        gameViewGraphic.resetSelectedCard();\r\n        gameViewGraphic.setLifePoints();\r\n    }\r\n\r\n    private void attackMonsterDO(int monsterNumber) throws Exception {\r\n        MonsterCard target = this.rival.getBoard().getMonsterByNumber(monsterNumber);\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        if (attackerAttack > target.getDefence()) {\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber, this, rival);\r\n            this.rival.getBoard().putInGraveYard(target);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"the defense position monster is destroyed\");\r\n        } else if (attackerAttack == target.getDefence()) {\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"no card is destroyed\");\r\n        } else {\r\n            int damage = this.rivalDefencePoints[monsterNumber] - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"no card is destroyed and you received \" + damage + \" battle damage\");\r\n        }\r\n        SoundController.getInstance().playWhenAttacks();\r\n        unselectCard();\r\n        gameViewGraphic.resetSelectedCard();\r\n        gameViewGraphic.setLifePoints();\r\n    }\r\n\r\n    private void attackMonsterDH(int monsterNumber) throws Exception {\r\n        MonsterCard target = this.rival.getBoard().getMonsterByNumber(monsterNumber);\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        String targetName = this.rival.getBoard().getMonsterByNumber(monsterNumber).getNamePascalCase();\r\n        this.rival.getBoard().changeMonsterPosition(monsterNumber, \"DO\");\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.FLIP_SUMMONED, this.rival, this.selectedCard.getNumber());\r\n        if (attackerAttack > target.getDefence()) {\r\n            this.rival.getBoard().putInGraveYard(target);\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber, this, rival);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and the defense position monster is destroyed\");\r\n        } else if (attackerAttack == target.getDefence()) {\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and no card is destroyed\");\r\n        } else {\r\n            int damage = this.rivalDefencePoints[monsterNumber] - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and no card is destroyed and you received \" + damage + \" battle damage\");\r\n        }\r\n        SoundController.getInstance().playWhenAttacks();\r\n        unselectCard();\r\n        gameViewGraphic.resetSelectedCard();\r\n        gameViewGraphic.setLifePoints();\r\n    }\r\n\r\n    public void directAttack(int number) throws Exception {\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE)) throw new CanNotAttack();\r\n        if (!this.phase.equals(Phase.BATTLE_PHASE)) throw new ImproperPhase();\r\n        int countOfMonsterCardsInGround = getCountOfMonsterCardsInGround(this.rival);\r\n        if (countOfMonsterCardsInGround == 0) {\r\n            rival.decreaseLifePoint(((MonsterCard) this.selectedCard.getCard()).getAttack());\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            unselectCard();\r\n            System.out.println(\"1\");\r\n            gameViewGraphic.setLifePoints();\r\n        } else throw new CanNotAttackDirectly();\r\n    }\r\n\r\n    public void activateSpell() throws Exception {\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!(this.selectedCard.getCard() instanceof SpellCard))\r\n            throw new IsNotSpell();\r\n        if (!((this.phase.equals(Phase.MAIN_PHASE1)) || (this.phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new CanNotActivateEffectInThisPhase();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.HAND) && this.player.getBoard().getSpellAndTrapConditionByNumber(this.selectedCard.getNumber()).equals(\"O\"))\r\n            throw new AlreadyActivated();\r\n        SpellCard spellCard = (SpellCard) this.selectedCard.getCard();\r\n        if (this.player.getBoard().isFullSpellAndTrapZone() && !spellCard.getIcon().equals(Icon.FIELD) && selectedCard.getBoardZone().equals(BoardZone.HAND))\r\n            throw new FullSpellZone();\r\n        if ((((SpellCard) this.selectedCard.getCard()).getIcon().equals(Icon.QUICK_PLAY)\r\n                && actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.SET)))\r\n            throw new UndonePreparationOfSpell();\r\n        if (spellCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                if (((SpellCard) this.player.getBoard().getFieldZone()).takeAction(this, TakeActionCase.REMOVE_FROM_FIELDZONE_FACE_UP, this.player, 1))\r\n                    this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            if (((SpellCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.PUT_IN_FIELDZONE_FACE_UP, this.player, 1))\r\n                this.player.getBoard().putInFieldZone(spellCard);\r\n            this.player.getBoard().getCardsInHand().remove((int) selectedCard.getNumber());\r\n        } else {\r\n            if (selectedCard.getBoardZone().equals(BoardZone.SPELLANDTRAPZONE)) {\r\n                this.player.getBoard().changeSpellAndTrapPosition(selectedCard.getNumber(), \"O\");\r\n                boolean wasSuccessful = ((SpellCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.PUT_IN_SPELLTRAPZONE, this.player, selectedCard.getNumber());\r\n                if (!wasSuccessful) {\r\n                    this.player.getBoard().removeSpellOrTrap(selectedCard.getNumber());\r\n                }\r\n            } else if (selectedCard.getBoardZone().equals(BoardZone.HAND)) {\r\n                int number = this.player.getBoard().putSpellOrTrap(selectedCard.getCard(), \"O\");\r\n                boolean wasSuccessful = ((SpellCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.PUT_IN_SPELLTRAPZONE, this.player, number);\r\n                if (!wasSuccessful) {\r\n                    this.player.getBoard().removeSpellOrTrap(selectedCard.getNumber());\r\n                }\r\n                this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n            }\r\n        }\r\n        unselectCard();\r\n        DuelView.printText(\"spell activated\");\r\n        getBoard();\r\n    }\r\n\r\n    public void cheatLifePoint(String target, int lifePoint) {\r\n        if (lifePoint < 2000) {\r\n            if (target.equals(\"player\"))\r\n                this.player.increaseLifePoint(lifePoint);\r\n            if (target.equals(\"opponent\"))\r\n                this.rival.decreaseLifePoint(lifePoint);\r\n            DuelView.printText(\"shame on you for cheating!!!!\");\r\n        }\r\n    }\r\n\r\n    public void cheatMoney(int amount) {\r\n        if (amount <= 5000)\r\n            this.player.increaseMoney(amount);\r\n        DuelView.printText(\"shame on you for cheating!!!!\");\r\n    }\r\n\r\n    public void cheatToWinGame() {\r\n        DuelView.printText(\"this is not a good way to win the game, but ok. Shame on you!\");\r\n        endGame(this.rival);\r\n    }\r\n\r\n    public void surrender() {\r\n        endGame(this.player);\r\n    }\r\n\r\n    public void manageEndGame() {\r\n        List<Card> playersCardInHand = player.getBoard().getCardsInHand();\r\n        List<Card> rivalsCardInHand = rival.getBoard().getCardsInHand();\r\n        if (player.getLifePoint() <= 0) {\r\n            endGame(player);\r\n        } else if (rival.getLifePoint() <= 0) {\r\n            endGame(rival);\r\n        } else if (playersCardInHand.isEmpty()) {\r\n            endGame(player);\r\n        } else if (rivalsCardInHand.isEmpty()) {\r\n            endGame(rival);\r\n        }\r\n    }\r\n\r\n    private void endGame(User loser) {\r\n        User winner;\r\n        if (loser.equals(rival)) {\r\n            winner = player;\r\n        } else {\r\n            winner = rival;\r\n        }\r\n        if (player.getLifePoint() < 0) player.setLifePoint(0);\r\n        if (rival.getLifePoint() < 0) rival.setLifePoint(0);\r\n        roundCounter++;\r\n        if (roundNumber == 1) {\r\n            winner.increaseScore(1000);\r\n            winner.increaseMoney(1000 + winner.getLifePoint());\r\n            loser.increaseMoney(100);\r\n            shouldEndGameForView = true;\r\n            DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n        }\r\n        if (roundNumber == 3) {\r\n            this.rounds[this.roundCounter - 1] = new Round(winner, loser, winner.getLifePoint(), loser.getLifePoint());\r\n            if (this.roundCounter == 2 && this.rounds[0].getWinner().equals(this.rounds[1].getWinner())) {\r\n                int winnerLP1 = this.rounds[0].getLifePointByUser(winner);\r\n                int winnerLP2 = this.rounds[1].getLifePointByUser(winner);\r\n                int maxLP = Math.max(winnerLP1, winnerLP2);\r\n                winner.increaseScore(3000);\r\n                winner.increaseMoney(3000 + (3 * maxLP));\r\n                loser.increaseMoney(300);\r\n                shouldEndGameForView = true;\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                DuelView.printText(winner.getUsername() + \" won the whole match with score: \" + winner.getScore() + \"-\" + loser.getScore());\r\n            } else if (roundCounter == 3) {\r\n                int winnerLP1 = this.rounds[0].getLifePointByUser(winner);\r\n                int winnerLP2 = this.rounds[1].getLifePointByUser(winner);\r\n                int winnerLP3 = this.rounds[2].getLifePointByUser(winner);\r\n                int maxLP = Math.max(winnerLP1, winnerLP2);\r\n                maxLP = Math.max(maxLP, winnerLP3);\r\n                winner.increaseScore(3000);\r\n                winner.increaseMoney(3000 + (3 * maxLP));\r\n                loser.increaseMoney(300);\r\n                shouldEndGameForView = true;\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                DuelView.printText(winner.getUsername() + \" won the whole match with score: \" + winner.getScore() + \"-\" + loser.getScore());\r\n            } else {\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                exchangeCardBetweenMainAndSide(this.player);\r\n                exchangeCardBetweenMainAndSide(this.rival);\r\n                startNewGame(winner);\r\n                //TODO connect this\r\n//                gameViewGraphic.getCommandForDuel();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void exchangeCardBetweenMainAndSide(User user) {\r\n        DuelView.printText(\"Do you want to exchange a card between main and side deck \" + user.getNickname() + \"?\");\r\n        String answer = DuelView.scan().toLowerCase();\r\n        if (answer.equals(\"yes\")) {\r\n            DuelView.printText(\"enter card name from main and side\");\r\n            String main = DuelView.scan();\r\n            Card mainCard = user.getCardByName(main);\r\n            while (mainCard == null || !user.getGameDeck().getMainDeck().contains(mainCard)) {\r\n                DuelView.printText(\"Please enter a card you have in your main deck!\");\r\n                main = DuelView.scan();\r\n                mainCard = user.getCardByName(main);\r\n            }\r\n            String side = DuelView.scan();\r\n            Card sideCard = user.getCardByName(side);\r\n            while (sideCard == null || !user.getGameDeck().getSideDeck().contains(sideCard)) {\r\n                DuelView.printText(\"Please enter a card you have in your side deck!\");\r\n                side = DuelView.scan();\r\n                sideCard = user.getCardByName(side);\r\n            }\r\n            user.getGameDeck().getSideDeck().remove(sideCard);\r\n            user.getGameDeck().getMainDeck().remove(mainCard);\r\n            user.getGameDeck().getSideDeck().add(mainCard);\r\n            user.getGameDeck().getMainDeck().add(sideCard);\r\n        }\r\n    }\r\n\r\n    public void goNextPhase() {\r\n        if (this.phase.equals(Phase.DRAW_PHASE)) {\r\n            this.phase = Phase.STANDBY_PHASE;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n            try {\r\n                gameViewGraphic.startMainNoCardSelected();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else if (phase.equals(Phase.STANDBY_PHASE)) {\r\n            this.phase = Phase.MAIN_PHASE1;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (phase.equals(Phase.MAIN_PHASE1)) {\r\n            if (!isStartTurn) {\r\n                this.phase = Phase.BATTLE_PHASE;\r\n                try {\r\n                    gameViewGraphic.startBattleNoCardSelected();\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            } else\r\n                this.phase = Phase.MAIN_PHASE2;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (this.phase.equals(Phase.BATTLE_PHASE)) {\r\n            this.phase = Phase.MAIN_PHASE2;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n            try {\r\n                gameViewGraphic.startMainNoCardSelected();\r\n            } catch (Exception exception) {\r\n                exception.printStackTrace();\r\n            }\r\n        } else if (this.phase.equals(Phase.MAIN_PHASE2)) {\r\n            this.phase = Phase.END_PHASE;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (this.phase.equals(Phase.END_PHASE)) {\r\n            GameViewGraphic.printInformation(\"its \" + rival.getNickname() + \"’s turn\");\r\n            changeTurn();\r\n            startDrawPhase(false);\r\n            if (this.player.getUsername().equals(\"@AI@\"))\r\n                handleAITurn();\r\n        }\r\n        SoundController.getInstance().playWhenEnterNextPhase();\r\n        gameViewGraphic.setPhaseRectangleColors();\r\n        gameViewGraphic.updateBoard();\r\n    }\r\n\r\n    private void startDrawPhase(boolean isFirst) {\r\n        manageEndGame();\r\n        this.phase = Phase.DRAW_PHASE;\r\n        DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        ArrayList<Card> playerMainCards = (ArrayList<Card>) this.player.getGameDeck().getMainDeck();\r\n        ArrayList<Card> rivalMainCards = (ArrayList<Card>) this.rival.getGameDeck().getMainDeck();\r\n        if (playerMainCards.size() == 0) endGame(this.player);\r\n        else {\r\n            Collections.shuffle(this.player.getGameDeck().getMainDeck());\r\n            Collections.shuffle(this.rival.getGameDeck().getMainDeck());\r\n            if (isFirst) {\r\n                for (int i = 0; i < 5; i++) {\r\n                    this.player.getBoard().addCardToHand(playerMainCards.get(playerMainCards.size() - 1));\r\n                    this.player.getGameDeck().removeCardFromMainDeck(playerMainCards.get(playerMainCards.size() - 1));\r\n                    Collections.shuffle(this.player.getGameDeck().getMainDeck());\r\n                    this.rival.getBoard().addCardToHand(rivalMainCards.get(rivalMainCards.size() - 1));\r\n                    this.rival.getGameDeck().removeCardFromMainDeck(rivalMainCards.get(rivalMainCards.size() - 1));\r\n                    Collections.shuffle(this.rival.getGameDeck().getMainDeck());\r\n                }\r\n            }\r\n            if (this.player.getBoard().getCardsInHand().size() < 6) {\r\n                this.player.getBoard().addCardToHand(playerMainCards.get(playerMainCards.size() - 1));\r\n                this.player.getGameDeck().removeCardFromMainDeck(playerMainCards.get(playerMainCards.size() - 1));\r\n                DuelView.printText(\"new card added to the hand : \" + playerMainCards.get(playerMainCards.size() - 1).getNamePascalCase());\r\n            }\r\n            Collections.shuffle(this.player.getGameDeck().getMainDeck());\r\n        }\r\n        goNextPhase();\r\n    }\r\n\r\n    private void changeTurn() {\r\n        if (this.isStartTurn) this.isStartTurn = false;\r\n        clearLastTurn();\r\n        User temp = this.player;\r\n        this.player = rival;\r\n        this.rival = temp;\r\n        gameViewGraphic.changeTurn();\r\n        changePlayerAndRival();\r\n    }\r\n\r\n    public void changePlayerAndRival() {\r\n        Integer[] temp = this.playerAttackPoints;\r\n        this.playerAttackPoints = this.rivalAttackPoints;\r\n        this.rivalAttackPoints = temp;\r\n    }\r\n\r\n    private void clearLastTurn() {\r\n        this.selectedCard = null;\r\n        this.hasSummonedOrSetInThisTurn = false;\r\n        newThoseThatResetWithTurn();\r\n    }\r\n\r\n    private void newThoseThatResetWithTurn() {\r\n        newActionsOnThisCardPlayer();\r\n        newActionsOnThisCardRival();\r\n        for (int i = 0; i < 5; i++) {\r\n            actionsOnThisCardPlayer.get(i).clear();\r\n            actionsOnThisCardRival.get(i).clear();\r\n            if (this.player.getBoard().getMonsterByNumber(i) != null && this.playerAttackPoints[i] != null && this.playerAttackPoints[i] == 0 && this.player.getBoard().getMonsterByNumber(i).getAttack() != 0) {\r\n                this.playerAttackPoints[i] = this.player.getBoard().getMonsterByNumber(i).getAttack();\r\n            }\r\n        }\r\n    }\r\n\r\n    public ArrayList<Image> getBoard() {\r\n        ArrayList<Image> images = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.player.getBoard().getMonsterConditionByNumber(i) == null) images.add(null);\r\n            else if (!this.player.getBoard().getMonsterConditionByNumber(i).equals(\"DH\"))\r\n                images.add(this.player.getBoard().getMonsterByNumber(i).getImage());\r\n            else\r\n                images.add(GameViewGraphic.unknown);\r\n        }\r\n        for (int i = 4; i >= 0; i--) {\r\n            if (this.rival.getBoard().getMonsterConditionByNumber(i) == null) images.add(null);\r\n            else if (!this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DH\"))\r\n                images.add(this.rival.getBoard().getMonsterByNumber(i).getImage());\r\n            else\r\n                images.add(GameViewGraphic.unknown);\r\n        }\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.player.getBoard().getSpellAndTrapByNumber(i) == null) images.add(null);\r\n            else if (this.player.getBoard().getSpellAndTrapConditionByNumber(i).equals(\"O\"))\r\n                images.add(this.player.getBoard().getSpellAndTrapByNumber(i).getImage());\r\n            else\r\n                images.add(GameViewGraphic.unknown);\r\n        }\r\n        for (int i = 4; i >= 0; i--) {\r\n            if (this.rival.getBoard().getSpellAndTrapByNumber(i) == null) images.add(null);\r\n            else if (this.rival.getBoard().getSpellAndTrapConditionByNumber(i).equals(\"O\"))\r\n                images.add(this.rival.getBoard().getSpellAndTrapByNumber(i).getImage());\r\n            else\r\n                images.add(GameViewGraphic.unknown);\r\n        }\r\n        for (int i = 0; i < 6; i++) {\r\n            if (this.player.getBoard().getCardsInHand().size() <= i) images.add(null);\r\n            else images.add(this.player.getBoard().getCardsInHand().get(i).getImage());\r\n        }\r\n        for (int i = 5; i >= 0; i--) {\r\n            if (this.rival.getBoard().getCardsInHand().size() <= i) images.add(null);\r\n            else images.add(GameViewGraphic.unknown);\r\n        }\r\n        if (this.player.getBoard().getFieldZone() == null)\r\n            images.add(null);\r\n        else\r\n            images.add(this.player.getBoard().getFieldZone().getImage());\r\n        if (this.rival.getBoard().getFieldZone() == null)\r\n            images.add(null);\r\n        else\r\n            images.add(this.rival.getBoard().getFieldZone().getImage());\r\n        if (this.player.getBoard().getCardsInGraveyard().isEmpty())\r\n            images.add(null);\r\n        else\r\n            images.add(this.player.getBoard().getCardsInGraveyard().get(this.player.getBoard().getCardsInGraveyard().size() - 1).getImage());\r\n        if (this.rival.getBoard().getCardsInGraveyard().isEmpty())\r\n            images.add(null);\r\n        else\r\n            images.add(this.rival.getBoard().getCardsInGraveyard().get(this.rival.getBoard().getCardsInGraveyard().size() - 1).getImage());\r\n        return images;\r\n\r\n        /*StringBuilder toPrint = new StringBuilder(this.rival.getNickname() + \":\" + this.rival.getLifePoint() + \"\\n\");\r\n        for (Card ignored : this.rival.getBoard().getCardsInHand()) {\r\n            toPrint.append(\"\\tc\");\r\n        }\r\n        toPrint.append(\"\\n\");\r\n        toPrint.append(this.rival.getGameDeck().getMainSize()).append(\"\\n\");\r\n        for (int i = 4; i > -1; i--) {\r\n            toPrint.append(\"\\t\");\r\n            if (this.rival.getBoard().getSpellAndTrapConditionByNumber(i) == null) toPrint.append(\"E\");\r\n            else toPrint.append(this.rival.getBoard().getSpellAndTrapConditionByNumber(i));\r\n        }\r\n        toPrint.append(\"\\n\");\r\n        for (int i = 4; i > -1; i--) {\r\n            toPrint.append(\"\\t\");\r\n            if (this.rival.getBoard().getMonsterConditionByNumber(i) == null) toPrint.append(\"E\");\r\n            else toPrint.append(this.rival.getBoard().getMonsterConditionByNumber(i));\r\n        }\r\n        toPrint.append(\"\\n\").append(this.rival.getBoard().getCardsInGraveyard().size()).append(\"\\t\\t\\t\\t\\t\\t\");\r\n        if (this.rival.getBoard().getFieldZone() == null) toPrint.append(\"E\\n\");\r\n        else toPrint.append(\"O\\n\");\r\n        toPrint.append(\"\\n--------------------------\\n\\n\");\r\n        if (this.player.getBoard().getFieldZone() == null) toPrint.append(\"E\\t\\t\\t\\t\\t\\t\");\r\n        else toPrint.append(\"O\\t\\t\\t\\t\\t\\t\");\r\n        toPrint.append(this.player.getBoard().getCardsInGraveyard().size()).append(\"\\n\");\r\n        for (int i = 0; i < 5; i++) {\r\n            toPrint.append(\"\\t\");\r\n            if (this.player.getBoard().getMonsterConditionByNumber(i) == null) toPrint.append(\"E\");\r\n            else toPrint.append(this.player.getBoard().getMonsterConditionByNumber(i));\r\n        }\r\n        toPrint.append(\"\\n\");\r\n        for (int i = 0; i < 5; i++) {\r\n            toPrint.append(\"\\t\");\r\n            if (this.player.getBoard().getSpellAndTrapConditionByNumber(i) == null) toPrint.append(\"E\");\r\n            else toPrint.append(this.player.getBoard().getSpellAndTrapConditionByNumber(i));\r\n        }\r\n        toPrint.append(\"\\n\\t\\t\\t\\t\\t\\t\").append(this.player.getGameDeck().getMainSize()).append(\"\\n\");\r\n        for (Card ignored : this.player.getBoard().getCardsInHand()) {\r\n//            toPrint += ignored.getNamePascalCase() + \"\\t\";\r\n            toPrint.append(\"c\\t\");\r\n        }\r\n        toPrint.append(\"\\n\").append(this.player.getNickname()).append(\":\").append(this.player.getLifePoint());\r\n        DuelView.printText(toPrint.toString());*/\r\n    }\r\n\r\n/*\r\n    public ArrayList<Image> getGraveYard(User user){\r\n        ArrayList<Image> graveYard = new ArrayList<>();\r\n        for (Card card : user.getBoard().getCardsInGraveyard()) {\r\n            graveYard.add(card.getImage());\r\n        }\r\n        return graveYard;\r\n    }\r\n*/\r\n\r\n    public ArrayList<Card> getCards() {\r\n        ArrayList<Card> cards = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            cards.add(player.getBoard().getMonsterByNumber(i));\r\n        }\r\n        for (int i = 4; i >= 0; i--) {\r\n            cards.add(rival.getBoard().getMonsterByNumber(i));\r\n        }\r\n        for (int i = 0; i < 5; i++) {\r\n            cards.add(player.getBoard().getSpellAndTrapByNumber(i));\r\n        }\r\n        for (int i = 4; i >= 0; i--) {\r\n            cards.add(rival.getBoard().getSpellAndTrapByNumber(i));\r\n        }\r\n        for (int i = 0; i < 6; i++) {\r\n            if (this.player.getBoard().getCardsInHand().size() <= i) cards.add(null);\r\n            else cards.add(this.player.getBoard().getCardInHandByNumber(i));\r\n        }\r\n        for (int i = 5; i >= 0; i--) {\r\n            if (this.rival.getBoard().getCardsInHand().size() <= i) cards.add(null);\r\n            else cards.add(this.rival.getBoard().getCardInHandByNumber(i));\r\n        }\r\n        cards.add(this.player.getBoard().getFieldZone());\r\n        cards.add(this.rival.getBoard().getFieldZone());\r\n        if (this.player.getBoard().getCardsInGraveyard().isEmpty())\r\n            cards.add(null);\r\n        else\r\n            cards.add(this.player.getBoard().getCardsInGraveyard().get(this.player.getBoard().getCardsInGraveyard().size() - 1));\r\n        if (this.rival.getBoard().getCardsInGraveyard().isEmpty())\r\n            cards.add(null);\r\n        else\r\n            cards.add(this.rival.getBoard().getCardsInGraveyard().get(this.rival.getBoard().getCardsInGraveyard().size() - 1));\r\n        return cards;\r\n    }\r\n\r\n    public ArrayList<Boolean> getConditions() {\r\n        ArrayList<Boolean> conditions = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            if (player.getBoard().getMonsterConditionByNumber(i) == null) conditions.add(null);\r\n            else conditions.add(!player.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"));\r\n        }\r\n        for (int i = 4; i >= 0; i--) {\r\n            if (rival.getBoard().getMonsterConditionByNumber(i) == null) conditions.add(null);\r\n            else conditions.add(!rival.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"));\r\n        }\r\n        for (int i = 0; i < 5; i++) {\r\n            conditions.add(false);\r\n        }\r\n        for (int i = 4; i >= 0; i--) {\r\n            conditions.add(false);\r\n        }\r\n        for (int i = 0; i < 6; i++) {\r\n            conditions.add(false);\r\n        }\r\n        for (int i = 5; i >= 0; i--) {\r\n            conditions.add(false);\r\n        }\r\n        conditions.add(false);\r\n        conditions.add(false);\r\n        conditions.add(false);\r\n        conditions.add(false);\r\n        return conditions;\r\n    }\r\n\r\n    public void showCard() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else if (!this.selectedCard.getOwner().equals(this.player)) {\r\n            if (this.selectedCard.getBoardZone().equals(BoardZone.HAND))\r\n                throw new InvisibleCard();\r\n            if (this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) && this.rival.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\"))\r\n                throw new InvisibleCard();\r\n            if (this.selectedCard.getBoardZone().equals(BoardZone.SPELLANDTRAPZONE) && this.rival.getBoard().getSpellAndTrapConditionByNumber(this.selectedCard.getNumber()).equals(\"H\"))\r\n                throw new InvisibleCard();\r\n        }\r\n        DuelView.printText(this.selectedCard.getCard().toString());\r\n    }\r\n\r\n    public void showGraveyard() throws Exception {\r\n        List<Card> graveyard = this.player.getBoard().getCardsInGraveyard();\r\n        StringBuilder toPrint = new StringBuilder();\r\n        if (graveyard.isEmpty())\r\n            throw new GraveYardEmpty();\r\n        else {\r\n            for (Card cardInGraveyard : graveyard) {\r\n                if (graveyard.indexOf(cardInGraveyard) == graveyard.size() - 1) {\r\n                    toPrint.append(cardInGraveyard.getNamePascalCase()).append(\":\").append(cardInGraveyard.getDescription());\r\n                } else {\r\n                    toPrint.append(cardInGraveyard.getNamePascalCase()).append(\":\").append(cardInGraveyard.getDescription()).append(\"\\n\");\r\n                }\r\n            }\r\n        }\r\n        DuelView.printText(toPrint.toString());\r\n        String input = DuelView.scan();\r\n        while (!input.equals(\"back\")) {\r\n            DuelView.printText(\"invalid command\");\r\n            input = DuelView.scan();\r\n        }\r\n    }\r\n\r\n    public void showPlayerGraveyard() {\r\n        int[] i = {0};\r\n        AnchorPane anchorPane = new AnchorPane();\r\n        Button previousButton = new Button(\"Previous\");\r\n        Button nextButton = new Button(\"Next\");\r\n        Button backButton = new Button(\"Back\");\r\n        ArrayList<Image> images = getGraveYard(player);\r\n        System.out.println(\"1\");\r\n        gameViewGraphic.fillPopUp(i, anchorPane, previousButton, nextButton, backButton, images);\r\n    }\r\n\r\n    public void showRivalGraveyard() {\r\n        int[] i = {0};\r\n        AnchorPane anchorPane = new AnchorPane();\r\n        Button previousButton = new Button(\"Previous\");\r\n        Button nextButton = new Button(\"Next\");\r\n        Button backButton = new Button(\"Back\");\r\n        ArrayList<Image> images = getGraveYard(rival);\r\n        gameViewGraphic.fillPopUp(i, anchorPane, previousButton, nextButton, backButton, images);\r\n    }\r\n\r\n    public void removeMonsterPlayer(int address) {\r\n        actionsOnThisCardPlayer.get(address).clear();\r\n        setMonsterAttackPlayer(address, null);\r\n        player.getBoard().removeMonster(address, this, player);\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.REMOVE_FROM_MONSTERZONE, this.player, this.selectedCard.getNumber());\r\n    }\r\n\r\n    public void handleAITurn() {\r\n        goNextPhase();\r\n        setMonsterCardInAI();\r\n        setSpellOrTrapInAI();\r\n        goNextPhase();\r\n        attackInAI();\r\n        goNextPhase();\r\n        goNextPhase();\r\n        goNextPhase();\r\n    }\r\n\r\n    private void setMonsterCardInAI() {\r\n        int numberOfMonstersOnPlayerBoard = numberOfMonstersOnPlayerBoard();\r\n        if (numberOfMonstersOnPlayerBoard > 1 && monsterCardWithTwoTributesWithMaxAttackPointInHand() != null)\r\n            setATwoTributeMonster();\r\n        else if (numberOfMonstersOnPlayerBoard > 0 && monsterCardWithOneTributeWithMaxAttackPointInHand() != null)\r\n            setAOneTributeMonster();\r\n        else if (numberOfMonstersOnPlayerBoard != 5)\r\n            setANoTributeMonster();\r\n        getBoard();\r\n\r\n    }\r\n\r\n    private void setATwoTributeMonster() {\r\n        if (numberOfLevelSevenEightMonstersInHand() > 0) {\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard(), this, player);\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard(), this, player);\r\n            int place = this.player.getBoard().putMonster(monsterCardWithTwoTributesWithMaxAttackPointInHand(), \"OO\");\r\n            setMonsterAttackPlayer(place, (Objects.requireNonNull(monsterCardWithTwoTributesWithMaxAttackPointInHand()).getAttack()));\r\n            this.playerDefencePoints[place] = (Objects.requireNonNull(monsterCardWithTwoTributesWithMaxAttackPointInHand()).getAttack());\r\n            addToAttackDefenceOfPutCard(place, this.player);\r\n            this.player.getBoard().removeCardFromHand(monsterCardWithTwoTributesWithMaxAttackPointInHand());\r\n        }\r\n    }\r\n\r\n    private void setAOneTributeMonster() {\r\n        if (numberOfLevelFiveSixMonstersInPlayerHand() > 0) {\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard(), this, player);\r\n            int place = this.player.getBoard().putMonster(monsterCardWithOneTributeWithMaxAttackPointInHand(), \"OO\");\r\n            setMonsterAttackPlayer(place, (Objects.requireNonNull(monsterCardWithOneTributeWithMaxAttackPointInHand()).getAttack()));\r\n            this.playerDefencePoints[place] = (Objects.requireNonNull(monsterCardWithOneTributeWithMaxAttackPointInHand()).getAttack());\r\n            addToAttackDefenceOfPutCard(place, this.player);\r\n            this.player.getBoard().removeCardFromHand(monsterCardWithOneTributeWithMaxAttackPointInHand());\r\n        }\r\n    }\r\n\r\n    private void setANoTributeMonster() {\r\n        if (numberOfLevelOneTwoFourMonstersInPlayerHand() > 0) {\r\n            if (monsterCardWithLeastDefencePointOnRivalBoard() != 10) {\r\n                if (numberOfMonstersOnPlayerBoard() == 0 && Objects.requireNonNull(monsterCardWithoutTributeWithMaxAttackPointInHand()).getAttack() < monsterCardWithLeaseAttackPointOnPlayerBoard()) {\r\n                    int place = this.player.getBoard().putMonster(monsterCardWithMaxDefenseInHand(), \"DH\");\r\n                    setMonsterAttackPlayer(place, (Objects.requireNonNull(monsterCardWithMaxDefenseInHand()).getAttack()));\r\n                    this.playerDefencePoints[place] = (Objects.requireNonNull(monsterCardWithMaxDefenseInHand()).getAttack());\r\n                    addToAttackDefenceOfPutCard(place, this.player);\r\n                    this.player.getBoard().removeCardFromHand(monsterCardWithMaxDefenseInHand());\r\n                }\r\n            } else if (numberOfMonstersOnPlayerBoard() < 5) {\r\n                MonsterCard wantedMonster = monsterCardWithoutTributeWithMaxAttackPointInHand();\r\n                int place = this.player.getBoard().putMonster(wantedMonster, \"OO\");\r\n                setMonsterAttackPlayer(place, (Objects.requireNonNull(wantedMonster).getAttack()));\r\n                this.playerDefencePoints[place] = (wantedMonster.getAttack());\r\n                addToAttackDefenceOfPutCard(place, this.player);\r\n                this.player.getBoard().removeCardFromHand(wantedMonster);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setSpellOrTrapInAI() {\r\n        ArrayList<Integer> toBeRemoved = new ArrayList<>();\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if ((card instanceof SpellCard || card instanceof TrapCard) && (numberOfSpellsAndTrapsOnPlayerBoard() < 5)) {\r\n                this.player.getBoard().putSpellOrTrap(card, \"H\");\r\n                toBeRemoved.add(i);\r\n            }\r\n        }\r\n        if (toBeRemoved.size() > 0) {\r\n            for (int i = toBeRemoved.size() - 1; i >= 0; i--) {\r\n                this.player.getBoard().removeCardFromHand(this.player.getBoard().getCardInHandByNumber(toBeRemoved.get(i)));\r\n            }\r\n        }\r\n    }\r\n\r\n    private void attackInAI() {\r\n        if (numberOfMonstersOnPlayerBoard() > 0) {\r\n            if (numberOfMonstersOnRivalBoard() == 0)\r\n                directAttackInAI();\r\n            else if (allCardsOnRivalAreDH())\r\n                attackAllDHInAI(numberOfMonstersOnRivalBoard(), numberOfMonstersOnPlayerBoard());\r\n            else if (monsterCardWithMostAttackPointOnPlayerBoard() != 10 && monsterCardWithMostAttackPointOnRivalBoard() != 10) {\r\n                attackOOInAI();\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean allCardsOnRivalAreDH() {\r\n        int counterOfDH = 0;\r\n        int counterOfCards = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.rival.getBoard().getMonsterByNumber(i) != null) {\r\n                counterOfCards++;\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DH\"))\r\n                    counterOfDH++;\r\n            }\r\n        }\r\n        return counterOfDH == counterOfCards;\r\n    }\r\n\r\n    private void directAttackInAI() {\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null) {\r\n                try {\r\n                    this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(i), BoardZone.MONSTERZONE, i, this.player);\r\n                    directAttack(0);\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void attackAllDHInAI(int numberOfMonstersOnRivalBoard, int numberOfMonstersOnPlayerBoard) {\r\n        int indexOfAttacker = 10;\r\n        ArrayList<Integer> monstersOnBoardIndex = new ArrayList<>();\r\n        for (int i = 0; i < 5; i++) {\r\n            if (this.rival.getBoard().getMonsterByNumber(i) != null) {\r\n                monstersOnBoardIndex.add(i);\r\n            }\r\n        }\r\n        if (numberOfMonstersOnPlayerBoard > numberOfMonstersOnRivalBoard) {\r\n            for (int i = 0; i < numberOfMonstersOnRivalBoard; i++) {\r\n                if (i == 0)\r\n                    indexOfAttacker = monsterCardWithMostAttackPointOnPlayerBoard();\r\n                else if (i == 1)\r\n                    indexOfAttacker = monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard());\r\n                try {\r\n                    this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(indexOfAttacker), BoardZone.MONSTERZONE, indexOfAttacker, this.player);\r\n                    findWayAttack(monstersOnBoardIndex.get(i));\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        } else {\r\n            for (int i = 0; i < numberOfMonstersOnPlayerBoard; i++) {\r\n                if (i == 0)\r\n                    indexOfAttacker = monsterCardWithMostAttackPointOnPlayerBoard();\r\n                if (i == 1)\r\n                    indexOfAttacker = monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard());\r\n                try {\r\n                    this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(indexOfAttacker), BoardZone.MONSTERZONE, indexOfAttacker, this.player);\r\n                    findWayAttack(monstersOnBoardIndex.get(i));\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void attackOOInAI() {\r\n        if (monsterCardWithMostAttackPointOnPlayerBoard() != 10 && this.rival.getBoard().getMonsterConditionByNumber(monsterCardWithMostAttackPointOnRivalBoard()).equals(\"OO\")) {\r\n            MonsterCard strongestRivalAttacker = this.rival.getBoard().getMonsterByNumber(monsterCardWithLeaseAttackPointOnRivalBoard());\r\n            MonsterCard strongestPlayerAttacker = this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard());\r\n            if (strongestRivalAttacker != null && strongestPlayerAttacker != null) {\r\n                if (strongestPlayerAttacker.getAttack() > strongestRivalAttacker.getAttack()) {\r\n                    try {\r\n                        this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard()), BoardZone.MONSTERZONE, monsterCardWithMostAttackPointOnPlayerBoard(), this.player);\r\n                        findWayAttack(monsterCardWithMostAttackPointOnRivalBoard());\r\n                    } catch (Exception exception) {\r\n                        exception.printStackTrace();\r\n                    }\r\n                }\r\n            } else if (monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard()) != 10) {\r\n                MonsterCard secondStrongestRivalAttacker = this.rival.getBoard().getMonsterByNumber(monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnPlayerBoard()));\r\n                assert strongestPlayerAttacker != null;\r\n                if (strongestPlayerAttacker.getAttack() > secondStrongestRivalAttacker.getAttack()) {\r\n                    try {\r\n                        this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard()), BoardZone.MONSTERZONE, monsterCardWithMostAttackPointOnPlayerBoard(), this.player);\r\n                        findWayAttack(monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithLeaseAttackPointOnRivalBoard()));\r\n                    } catch (Exception exception) {\r\n                        exception.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private MonsterCard monsterCardWithoutTributeWithMaxAttackPointInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() < 5 && ((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                    maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                    indexOfMaxAttacker = i;\r\n                }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithOneTributeWithMaxAttackPointInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getLevel() == 5 || ((MonsterCard) card).getLevel() == 6)\r\n                        if (((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                            maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                            indexOfMaxAttacker = i;\r\n                        }\r\n            }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithTwoTributesWithMaxAttackPointInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getLevel() > 6)\r\n                        if (((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                            maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                            indexOfMaxAttacker = i;\r\n                        }\r\n            }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithMaxDefenseInHand() {\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxDefencePoint = 0;\r\n        int indexOfMaxDefender = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getDefence() > maxDefencePoint) {\r\n                        maxDefencePoint = ((MonsterCard) card).getDefence();\r\n                        indexOfMaxDefender = i;\r\n                    }\r\n            }\r\n        }\r\n        if (indexOfMaxDefender != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxDefender);\r\n        else return null;\r\n    }\r\n\r\n    private int monsterCardWithLeaseAttackPointOnRivalBoard() {\r\n        int leastAttackPoint = 100000;\r\n        int indexOfMinAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"))\r\n                    if (leastAttackPoint > card.getAttack()) {\r\n                        indexOfMinAttacker = i;\r\n                        leastAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMinAttacker;\r\n    }\r\n\r\n    private int monsterCardWithLeaseAttackPointOnPlayerBoard() {\r\n        int leastAttackPoint = 100000;\r\n        int indexOfMinAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.player.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.player.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"))\r\n                    if (leastAttackPoint > card.getAttack()) {\r\n                        indexOfMinAttacker = i;\r\n                        leastAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMinAttacker;\r\n    }\r\n\r\n    private int monsterCardWithSecondMostAttackPointOnRivalBoard(int indexOfStrongestAttacker) {\r\n        int indexOfSecondStrongestAttacker = 10;\r\n        int secondMostAttackPoint = 0;\r\n        if (numberOfMonstersOnPlayerBoard() > 1) {\r\n            for (int i = 0; i < 5; i++) {\r\n                MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n                if (card != null)\r\n                    if (i != indexOfStrongestAttacker && this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"OO\")) {\r\n                        if (secondMostAttackPoint < card.getAttack()) {\r\n                            indexOfSecondStrongestAttacker = i;\r\n                            secondMostAttackPoint = card.getAttack();\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n        return indexOfSecondStrongestAttacker;\r\n    }\r\n\r\n    private int monsterCardWithMostAttackPointOnPlayerBoard() {\r\n        int mostAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.player.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.player.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"))\r\n                    if (mostAttackPoint < card.getAttack()) {\r\n                        indexOfMaxAttacker = i;\r\n                        mostAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMaxAttacker;\r\n    }\r\n\r\n    private int monsterCardWithLeastDefencePointOnRivalBoard() {\r\n        int leastDefencePoint = 100000;\r\n        int indexOfMinDefender = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DO\"))\r\n                    if (leastDefencePoint > card.getDefence()) {\r\n                        leastDefencePoint = card.getDefence();\r\n                        indexOfMinDefender = i;\r\n                    }\r\n        }\r\n        return indexOfMinDefender;\r\n    }\r\n\r\n    private int monsterCardWithMostAttackPointOnRivalBoard() {\r\n        int mostAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"))\r\n                    if (mostAttackPoint < card.getAttack()) {\r\n                        mostAttackPoint = card.getAttack();\r\n                        indexOfMaxAttacker = i;\r\n                    }\r\n        }\r\n        return indexOfMaxAttacker;\r\n    }\r\n\r\n    private int numberOfMonstersOnPlayerBoard() {\r\n        int numberOfMonsters = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null)\r\n                numberOfMonsters++;\r\n        }\r\n        return numberOfMonsters;\r\n    }\r\n\r\n    private int numberOfMonstersOnRivalBoard() {\r\n        int numberOfMonsters = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            MonsterCard monsterCard = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null)\r\n                numberOfMonsters++;\r\n        }\r\n        return numberOfMonsters;\r\n    }\r\n\r\n    private int numberOfSpellsAndTrapsOnPlayerBoard() {\r\n        int numberOfSpellsAndTraps = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            Card card = this.player.getBoard().getSpellAndTrapByNumber(i);\r\n            if (card != null)\r\n                numberOfSpellsAndTraps++;\r\n        }\r\n        return numberOfSpellsAndTraps;\r\n    }\r\n\r\n    private int numberOfLevelOneTwoFourMonstersInPlayerHand() {\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() < 5)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n\r\n    private int numberOfLevelFiveSixMonstersInPlayerHand() {\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() == 5 || ((MonsterCard) card).getLevel() == 6)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n\r\n    private int numberOfLevelSevenEightMonstersInHand() {\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Card card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() > 6)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n\r\n    public int minFinder(int firstNumber, int secondNumber) {\r\n        return Math.min(firstNumber, secondNumber);\r\n    }\r\n\r\n    public void doNothing(int number) {\r\n\r\n    }\r\n\r\n    public void doNothing() {\r\n\r\n    }\r\n\r\n\r\n    public ArrayList<Image> getGraveYard(User user) {\r\n        ArrayList<Image> graveYard = new ArrayList<>();\r\n        for (Card card : user.getBoard().getCardsInGraveyard()) {\r\n            graveYard.add(card.getImage());\r\n        }\r\n        return graveYard;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/controller/DuelController.java	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ src/main/java/controller/DuelController.java	(date 1625825839595)
@@ -3,6 +3,7 @@
 import controller.exeption.*;
 import javafx.scene.control.Button;
 import javafx.scene.image.Image;
+import javafx.scene.image.ImageView;
 import javafx.scene.layout.AnchorPane;
 import model.*;
 import view.DuelView;
@@ -679,6 +680,20 @@
         } else throw new CanNotAttackThisCard();
     }
 
+    private ImageView getImageViewByNumberForExplode(int number){
+        if(number==0) return GameViewGraphic.imageView2Monster1;
+        if(number==1) return GameViewGraphic.imageView2Monster2;
+        if(number==2) return GameViewGraphic.imageView2Monster3;
+        if(number==3) return GameViewGraphic.imageView2Monster4;
+        if(number==4) return GameViewGraphic.imageView2Monster5;
+        if(number==5) return GameViewGraphic.imageView1Monster1;
+        if(number==6) return GameViewGraphic.imageView1Monster2;
+        if(number==7) return GameViewGraphic.imageView1Monster3;
+        if(number==8) return GameViewGraphic.imageView1Monster4;
+        if(number==9) return GameViewGraphic.imageView1Monster5;
+        else return null;
+    }
+
     private void attackMonsterOO(int monsterNumber) throws Exception {
         int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];
         int targetAttack = this.rivalAttackPoints[monsterNumber];
@@ -686,12 +701,18 @@
             int damage = attackerAttack - targetAttack;
             if (!this.rival.getBoard().getMonsterByNumber(monsterNumber).equals(MonsterCard.EXPLODER_DRAGON))
                 this.rival.decreaseLifePoint(damage);
+            gameViewGraphic.cardToExplode = getImageViewByNumberForExplode(monsterNumber);
+            gameViewGraphic.explode(gameViewGraphic.cardToExplode);
             this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));
             this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);
             this.rival.getBoard().removeMonster(monsterNumber, this, rival);
             actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);
             DuelView.printText("your opponent’s monster is destroyed and your opponent receives " + damage + " battle damage");
         } else if (attackerAttack == targetAttack) {
+            gameViewGraphic.cardToExplode = getImageViewByNumberForExplode(monsterNumber);
+            gameViewGraphic.explode(gameViewGraphic.cardToExplode);
+            gameViewGraphic.cardToExplode = getImageViewByNumberForExplode(this.selectedCard.getNumber()+5);
+            gameViewGraphic.explode(gameViewGraphic.cardToExplode);
             this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));
             this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);
             this.rival.getBoard().removeMonster(monsterNumber, this, rival);
@@ -705,6 +726,8 @@
         } else {
             int damage = targetAttack - attackerAttack;
             this.player.decreaseLifePoint(damage);
+            gameViewGraphic.cardToExplode = getImageViewByNumberForExplode(this.selectedCard.getNumber()+5);
+            gameViewGraphic.explode(gameViewGraphic.cardToExplode);
             ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.REMOVE_FROM_MONSTERZONE, this.player, this.selectedCard.getNumber());
             this.player.getBoard().putInGraveYard(this.selectedCard.getCard());
             this.player.getBoard().removeMonster(this.selectedCard.getNumber(), this, player);
@@ -724,6 +747,8 @@
         if (attackerAttack > target.getDefence()) {
             this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);
             this.rival.getBoard().removeMonster(monsterNumber, this, rival);
+            gameViewGraphic.cardToExplode = getImageViewByNumberForExplode(monsterNumber);
+            gameViewGraphic.explode(gameViewGraphic.cardToExplode);
             this.rival.getBoard().putInGraveYard(target);
             actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);
             DuelView.printText("the defense position monster is destroyed");
@@ -749,6 +774,8 @@
         this.rival.getBoard().changeMonsterPosition(monsterNumber, "DO");
         ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.FLIP_SUMMONED, this.rival, this.selectedCard.getNumber());
         if (attackerAttack > target.getDefence()) {
+            gameViewGraphic.cardToExplode = getImageViewByNumberForExplode(monsterNumber);
+            gameViewGraphic.explode(gameViewGraphic.cardToExplode);
             this.rival.getBoard().putInGraveYard(target);
             this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);
             this.rival.getBoard().removeMonster(monsterNumber, this, rival);
@@ -773,13 +800,15 @@
         if (this.selectedCard == null) throw new NoCardSelected();
         if (!this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE)) throw new CanNotAttack();
         if (!this.phase.equals(Phase.BATTLE_PHASE)) throw new ImproperPhase();
+        /*if(actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.ATTACK))
+            throw new AlreadyAttacked();*/
         int countOfMonsterCardsInGround = getCountOfMonsterCardsInGround(this.rival);
         if (countOfMonsterCardsInGround == 0) {
             rival.decreaseLifePoint(((MonsterCard) this.selectedCard.getCard()).getAttack());
             actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);
             unselectCard();
-            System.out.println("1");
             gameViewGraphic.setLifePoints();
+            manageEndGame();
         } else throw new CanNotAttackDirectly();
     }
 
Index: Users/hamraz.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>hamraz\r\n123\r\nhamraz\r\n0\r\n100000
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Users/hamraz.txt	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ Users/hamraz.txt	(date 1625828393546)
@@ -1,5 +1,5 @@
 hamraz
 123
 hamraz
-0
-100000
\ No newline at end of file
+9000
+181100
\ No newline at end of file
Index: Cards/parmida.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Yomi Ship\r\nAxe Raider\r\nAxe Raider\r\nAxe Raider\r\nBaby Dragon\r\nAxe Raider\r\nAxe Raider\r\nBaby Dragon\r\nBitron\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Cards/parmida.txt	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ Cards/parmida.txt	(date 1625824032640)
@@ -1,9 +1,11 @@
 Yomi Ship
 Axe Raider
-Axe Raider
-Axe Raider
 Baby Dragon
 Axe Raider
 Axe Raider
 Baby Dragon
 Bitron
+Alexandrite Dragon
+Axe Raider
+Advanced Ritual Art
+Baby Dragon
Index: target/classes/MainMenu.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.image.Image?>\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.text.Font?>\r\n<?import javafx.scene.text.Text?>\r\n\r\n<AnchorPane prefHeight=\"600.0\" prefWidth=\"900.0\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"view.MainViewGraphic\">\r\n    <ImageView fitHeight=\"600.0\" fitWidth=\"900.0\">\r\n        <Image url=\"@images/backgrounds/13.jpg\" />\r\n    </ImageView>\r\n    <Button layoutX=\"443.0\" layoutY=\"140.0\" mnemonicParsing=\"false\" onMouseClicked=\"#newDuel\" text=\"New Duel\" textFill=\"#c800ff\">\r\n        <font>\r\n            <Font name=\"Agency FB Bold\" size=\"18.0\" />\r\n        </font>\r\n    </Button>\r\n    <Button layoutX=\"429.0\" layoutY=\"196.0\" mnemonicParsing=\"false\" onAction=\"#goToDeckMenu\" text=\"Deck Settings\" textFill=\"#c800ff\">\r\n        <font>\r\n            <Font name=\"Agency FB Bold\" size=\"18.0\" />\r\n        </font>\r\n    </Button>\r\n    <Button layoutX=\"434.0\" layoutY=\"251.0\" onMouseClicked=\"#showScoreboard\" text=\"ScoreBoard\" textFill=\"#c800ff\">\r\n        <font>\r\n            <Font name=\"Agency FB Bold\" size=\"18.0\" />\r\n        </font>\r\n    </Button>\r\n    <Button layoutX=\"450.0\" layoutY=\"308.0\" mnemonicParsing=\"false\" onMouseClicked=\"#profileMenu\" text=\"Profile\" textFill=\"#c800ff\">\r\n        <font>\r\n            <Font name=\"Agency FB Bold\" size=\"18.0\" />\r\n        </font>\r\n    </Button>\r\n    <Button layoutX=\"456.0\" layoutY=\"364.0\" mnemonicParsing=\"false\" onMouseClicked=\"#shopMenu\" text=\"Shop\" textFill=\"#c800ff\">\r\n        <font>\r\n            <Font name=\"Agency FB Bold\" size=\"18.0\" />\r\n        </font>\r\n    </Button>\r\n    <Button layoutX=\"426.0\" layoutY=\"419.0\" mnemonicParsing=\"false\" onMouseClicked=\"#importExport\" text=\"Import/Export\" textFill=\"#c800ff\">\r\n        <font>\r\n            <Font name=\"Agency FB Bold\" size=\"18.0\" />\r\n        </font>\r\n    </Button>\r\n    <Button layoutX=\"451.0\" layoutY=\"526.0\" mnemonicParsing=\"false\" onMouseClicked=\"#logout\" text=\"Logout\" textFill=\"#c800ff\">\r\n        <font>\r\n            <Font name=\"Agency FB Bold\" size=\"18.0\" />\r\n        </font>\r\n    </Button>\r\n    <Text fill=\"#f6f6f6\" layoutX=\"415.0\" layoutY=\"73.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"MAIN MENU\">\r\n        <font>\r\n            <Font name=\"Agency FB Bold\" size=\"36.0\" />\r\n        </font>\r\n    </Text>\r\n   <Button layoutX=\"429.0\" layoutY=\"474.0\" mnemonicParsing=\"false\" onMouseClicked=\"#muteUnmute\" text=\"Mute/Unmute\" textFill=\"#c800ff\">\r\n      <font>\r\n         <Font name=\"Agency FB Bold\" size=\"18.0\" />\r\n      </font>\r\n   </Button>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/MainMenu.fxml	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ target/classes/MainMenu.fxml	(date 1625821053189)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
+<?import javafx.scene.control.Accordion?>
 <?import javafx.scene.control.Button?>
 <?import javafx.scene.image.Image?>
 <?import javafx.scene.image.ImageView?>
@@ -56,4 +57,5 @@
          <Font name="Agency FB Bold" size="18.0" />
       </font>
    </Button>
+   <Accordion />
 </AnchorPane>
Index: src/main/java/view/AddCardToDeckView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.DeckController;\r\nimport javafx.application.Application;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport model.Card;\r\nimport model.Deck;\r\nimport model.User;\r\n\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class AddCardToDeckView extends Application implements Initializable {\r\n\r\n    private static Deck deck;\r\n    private static Stage stage;\r\n    private static AddCardToDeckView instance = null;\r\n    private static User user;\r\n    private static ArrayList<Image> images = new ArrayList<>(4);\r\n    private static Card card1, card2, card3, card4;\r\n    public static ImageView image1, image2, image3, image4;\r\n    private static int totalCardsNumber;\r\n    private static int firstCardNumber = 0;\r\n    private static boolean hasComeFromSide;\r\n    public static Label label = new Label();\r\n    public static Button button1 = new Button();\r\n    public static Button button2 = new Button();\r\n    public static Button button3 = new Button();\r\n    public static Button button4 = new Button();\r\n    public static Button button5 = new Button();\r\n    public static Button button6 = new Button();\r\n    public static Button button7 = new Button();\r\n    public static Button button8 = new Button();\r\n    public boolean isCTRLPressed = false;\r\n    public boolean isSHIFTPressed = false;\r\n    public boolean isDPressed = false;\r\n    private static AnchorPane root;\r\n    @FXML\r\n    private AnchorPane anchorPane1, anchorPane2, anchorPane3, anchorPane4;\r\n\r\n\r\n    public static AddCardToDeckView getInstance() {\r\n        if (instance == null) instance = new AddCardToDeckView();\r\n        return instance;\r\n    }\r\n\r\n    public void setCurrentUser(User user) {\r\n        AddCardToDeckView.user = user;\r\n    }\r\n\r\n    public void setCurrentDeck(Deck deck) {\r\n        AddCardToDeckView.deck = deck;\r\n    }\r\n\r\n    public void setHasComeFromSide(boolean hasComeFromSide) {\r\n        AddCardToDeckView.hasComeFromSide = hasComeFromSide;\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        AddCardToDeckView.stage = stage;\r\n        URL url = getClass().getResource(\"/CreateNewDeck.fxml\");\r\n        root = FXMLLoader.load(url);\r\n        DeckController.getInstance(user).setUsersCards();\r\n        DeckController.initImages();\r\n        setImagesAndCards();\r\n        addImages();\r\n        removeBadAnchorPanes();\r\n        Scene scene = new Scene(root);\r\n        preCheat();\r\n        stage.setScene(scene);\r\n    }\r\n\r\n\r\n    public void addCardToDeck(Card card, boolean isSide) {\r\n        try {\r\n            DeckController.getInstance(user).addCardToDeck(card.getNamePascalCase(), deck.getDeckName(), isSide, false);\r\n            resetImagesAndCards();\r\n        } catch (Exception e) {\r\n            printTextError(e.getMessage());\r\n        }\r\n        /*if (deck.getCountOfCardInDeck(card) > 2) {\r\n            printTextError(\"you already have 3 cards of this type in this deck\");\r\n        } else {\r\n            if (isSide) {\r\n                user.removeCard(card);\r\n                //user.getAllCards().remove(card);\r\n                deck.addCardToSideDeck(card);\r\n                printTextInformation(\"Card added to side deck successfully\");\r\n            } else {\r\n                user.removeCard(card);\r\n                //user.getAllCards().remove(card);\r\n                deck.addCardToMainDeck(card);\r\n                printTextInformation(\"Card added to main deck successfully\");\r\n            }\r\n            resetImagesAndCards();\r\n        }*/\r\n    }\r\n\r\n    public void addCardToDeckByCheating(Card card, boolean isSide){\r\n        try {\r\n            DeckController.getInstance(user).addCardToDeck(card.getNamePascalCase(), deck.getDeckName(), isSide, true);\r\n            resetImagesAndCards();\r\n        } catch (Exception e) {\r\n            printTextError(e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    public void goNextPage() {\r\n        if (firstCardNumber + 4 >= user.getAllCards().size()) return;\r\n        firstCardNumber += 4;\r\n        resetImagesAndCards();\r\n    }\r\n\r\n    public void goPreviousPage() {\r\n        if (firstCardNumber - 4 < 0) return;\r\n        firstCardNumber -= 4;\r\n        resetImagesAndCards();\r\n    }\r\n\r\n    private void setImagesAndCards() {\r\n        images = DeckController.getInstance(user).getImages(firstCardNumber);\r\n        if (images.size() > 0) image1 = setImageView(images.get(0), 83);\r\n        if (images.size() > 1) image2 = setImageView(images.get(1), 283);\r\n        if (images.size() > 2) image3 = setImageView(images.get(2), 483);\r\n        if (images.size() > 3) image4 = setImageView(images.get(3), 683);\r\n        ArrayList<Card> cards = DeckController.getInstance(user).getCards(firstCardNumber);\r\n        if (cards.size() > 0) card1 = cards.get(0);\r\n        if (cards.size() > 1) card2 = cards.get(1);\r\n        if (cards.size() > 2) card3 = cards.get(2);\r\n        if (cards.size() > 3) card4 = cards.get(3);\r\n    }\r\n\r\n    private ImageView setImageView(Image image, int x) {\r\n        ImageView imageView = new ImageView(image);\r\n        imageView.setFitWidth(140);\r\n        imageView.setFitHeight(204);\r\n        imageView.setX(x);\r\n        imageView.setY(80);\r\n        return imageView;\r\n    }\r\n\r\n    private void resetImagesAndCards() {\r\n        DeckController.getInstance(user).setUsersCards();\r\n        DeckController.initImages();\r\n        images = DeckController.getInstance(user).getImages(firstCardNumber);\r\n        ArrayList<Card> cards = DeckController.getInstance(user).getCards(firstCardNumber);\r\n        removeImages();\r\n        if (images.size() > 0) image1 = setImageView(images.get(0), 83);\r\n        else if (image1 != null) image1.setImage(null);\r\n        if (images.size() > 1) image2 = setImageView(images.get(1), 283);\r\n        else if (image2 != null) image2.setImage(null);\r\n        if (images.size() > 2) image3 = setImageView(images.get(2), 483);\r\n        else if (image3 != null) image3.setImage(null);\r\n        if (images.size() > 3) image4 = setImageView(images.get(3), 683);\r\n        else if (image4 != null) image4.setImage(null);\r\n        addImages();\r\n        if (cards.size() > 0) card1 = cards.get(0);\r\n        else card1 = null;\r\n        if (cards.size() > 1) card2 = cards.get(1);\r\n        else card2 = null;\r\n        if (cards.size() > 2) card3 = cards.get(2);\r\n        else card3 = null;\r\n        if (cards.size() > 3) card4 = cards.get(3);\r\n        else card4 = null;\r\n        addGoodAnchorPanes();\r\n        removeBadAnchorPanes();\r\n    }\r\n\r\n    private void removeBadAnchorPanes() {\r\n        if (root != null) {\r\n            if (image1 == null || image1.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane1\")) {\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image2 == null || image2.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane2\")) {\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image3 == null || image3.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane3\")) {\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image4 == null || image4.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane4\")) {\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void addGoodAnchorPanes() {\r\n        if (root != null) {\r\n            if (image1 != null && image1.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane1\")) {\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image2 != null && image2.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane2\")) {\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image3 != null && image3.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane3\")) {\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image4 != null && image4.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane4\")) {\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void removeImages() {\r\n        if (root != null) {\r\n            if (image1 != null) root.getChildren().remove(image1);\r\n            if (image2 != null) root.getChildren().remove(image2);\r\n            if (image3 != null) root.getChildren().remove(image3);\r\n            if (image4 != null) root.getChildren().remove(image4);\r\n        }\r\n    }\r\n\r\n    private void addImages() {\r\n        if (root != null) {\r\n            if (image1 != null && !root.getChildren().contains(image1)) root.getChildren().add(image1);\r\n            if (image2 != null && !root.getChildren().contains(image2)) root.getChildren().add(image2);\r\n            if (image3 != null && !root.getChildren().contains(image3)) root.getChildren().add(image3);\r\n            if (image4 != null && !root.getChildren().contains(image4)) root.getChildren().add(image4);\r\n        }\r\n    }\r\n\r\n    public void printTextInformation(String output) {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION, output, ButtonType.OK);\r\n        alert.setHeaderText(\"\");\r\n        alert.setTitle(\"\");\r\n        alert.showAndWait();\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        DeckController.getInstance(user).setUsersCards();\r\n        DeckController.initImages();\r\n        setImagesAndCards();\r\n        addImages();\r\n        removeBadAnchorPanes();\r\n    }\r\n\r\n    public void addToMainDeck1() {\r\n        addCardToDeck(card1, false);\r\n    }\r\n\r\n    public void addToMainDeck2() {\r\n        addCardToDeck(card2, false);\r\n    }\r\n\r\n    public void addToMainDeck3() {\r\n        addCardToDeck(card3, false);\r\n    }\r\n\r\n    public void addToMainDeck4() {\r\n        addCardToDeck(card4, false);\r\n    }\r\n\r\n    public void addToSideDeck1() {\r\n        addCardToDeck(card1, true);\r\n    }\r\n\r\n    public void addToSideDeck2() {\r\n        addCardToDeck(card2, true);\r\n    }\r\n\r\n    public void addToSideDeck3() {\r\n        addCardToDeck(card3, true);\r\n    }\r\n\r\n    public void addToSideDeck4() {\r\n        addCardToDeck(card4, true);\r\n    }\r\n\r\n\r\n    public void addToMainDeckCheat1() {\r\n        addCardToDeckByCheating(card1, false);\r\n    }\r\n\r\n    public void addToMainDeckCheat2() {\r\n        addCardToDeckByCheating(card2, false);\r\n    }\r\n\r\n    public void addToMainDeckCheat3() {\r\n        addCardToDeckByCheating(card3, false);\r\n    }\r\n\r\n    public void addToMainDeckCheat4() {\r\n        addCardToDeckByCheating(card4, false);\r\n    }\r\n\r\n    public void addToSideDeckCheat1() {\r\n        addCardToDeckByCheating(card1, true);\r\n    }\r\n\r\n    public void addToSideDeckCheat2() {\r\n        addCardToDeckByCheating(card2, true);\r\n    }\r\n\r\n    public void addToSideDeckCheat3() {\r\n        addCardToDeckByCheating(card3, true);\r\n    }\r\n\r\n    public void addToSideDeckCheat4() {\r\n        addCardToDeckByCheating(card4, true);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    private void preCheat(){\r\n        //TODO chejuri ye kar konam be tedade card ha button bezare:(\r\n        adjustButtonsOnScene();\r\n\r\n        root.getScene().setOnKeyPressed(new EventHandler<KeyEvent>() {\r\n            @Override\r\n            public void handle(KeyEvent event) {\r\n                if (event.getCode().getName().equals(\"D\"))\r\n                    isDPressed = true;\r\n                if (event.getCode().getName().equals(\"Ctrl\"))\r\n                    isCTRLPressed = true;\r\n                if (event.getCode().getName().equals(\"Shift\"))\r\n                    isSHIFTPressed = true;\r\n\r\n                if (isSHIFTPressed && isCTRLPressed && isDPressed){\r\n                    setButtonsOnScene();\r\n\r\n                    button1.setOnAction(this::createCheatEnvironment1);\r\n                    button2.setOnAction(this::createCheatEnvironment2);\r\n                    button3.setOnAction(this::createCheatEnvironment3);\r\n                    button4.setOnAction(this::createCheatEnvironment4);\r\n                    button5.setOnAction(this::createCheatEnvironment5);\r\n                    button6.setOnAction(this::createCheatEnvironment6);\r\n                    button7.setOnAction(this::createCheatEnvironment7);\r\n                    button8.setOnAction(this::createCheatEnvironment8);\r\n\r\n                }\r\n            }\r\n\r\n            private void createCheatEnvironment1(ActionEvent actionEvent) {\r\n                addToMainDeckCheat1();\r\n                removeButtons();\r\n                alertForCheat();\r\n            }\r\n\r\n            private void createCheatEnvironment2(ActionEvent actionEvent) {\r\n                addToSideDeckCheat1();\r\n                removeButtons();\r\n                alertForCheat();\r\n            }\r\n\r\n            private void createCheatEnvironment3(ActionEvent actionEvent) {\r\n                addToMainDeckCheat2();\r\n                removeButtons();\r\n                alertForCheat();\r\n            }\r\n\r\n            private void createCheatEnvironment4(ActionEvent actionEvent) {\r\n                addToSideDeckCheat2();\r\n                removeButtons();\r\n                alertForCheat();\r\n            }\r\n\r\n            private void createCheatEnvironment5(ActionEvent actionEvent) {\r\n                addToMainDeckCheat3();\r\n                removeButtons();\r\n                alertForCheat();\r\n            }\r\n\r\n            private void createCheatEnvironment6(ActionEvent actionEvent) {\r\n                addToSideDeckCheat3();\r\n                removeButtons();\r\n                alertForCheat();\r\n            }\r\n\r\n            private void createCheatEnvironment7(ActionEvent actionEvent) {\r\n                addToMainDeckCheat4();\r\n                removeButtons();\r\n                alertForCheat();\r\n            }\r\n\r\n            private void createCheatEnvironment8(ActionEvent actionEvent) {\r\n                addToSideDeckCheat4();\r\n                removeButtons();\r\n                alertForCheat();\r\n            }\r\n        });\r\n        root.getScene().setOnKeyReleased(new EventHandler<KeyEvent>() {\r\n            @Override\r\n            public void handle(KeyEvent event) {\r\n                if (event.getCode().getName().equals(\"D\"))\r\n                    isDPressed = false;\r\n                if (event.getCode().getName().equals(\"Ctrl\"))\r\n                    isCTRLPressed = false;\r\n                if (event.getCode().getName().equals(\"Shift\"))\r\n                    isSHIFTPressed = false;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public void adjustButtonsOnScene(){\r\n        button1.setLayoutX(100);\r\n        button1.setLayoutY(438);\r\n        button1.setText(\"AMC!\");\r\n\r\n        button2.setLayoutX(170);\r\n        button2.setLayoutY(438);\r\n        button2.setText(\"ASC!\");\r\n\r\n        button3.setLayoutX(300);\r\n        button3.setLayoutY(438);\r\n        button3.setText(\"AMC\");\r\n\r\n        button4.setLayoutX(370);\r\n        button4.setLayoutY(438);\r\n        button4.setText(\"ASC!\");\r\n\r\n        button5.setLayoutX(500);\r\n        button5.setLayoutY(438);\r\n        button5.setText(\"AMC!\");\r\n\r\n        button6.setLayoutX(570);\r\n        button6.setLayoutY(438);\r\n        button6.setText(\"ASC!\");\r\n\r\n        button7.setLayoutX(705);\r\n        button7.setLayoutY(438);\r\n        button7.setText(\"AMC!\");\r\n\r\n        button8.setLayoutX(773);\r\n        button8.setLayoutY(438);\r\n        button8.setText(\"ASC!\");\r\n    }\r\n\r\n    public void setButtonsOnScene(){\r\n        root.getChildren().add(button1);\r\n        root.getChildren().add(button2);\r\n        root.getChildren().add(button3);\r\n        root.getChildren().add(button4);\r\n        root.getChildren().add(button5);\r\n        root.getChildren().add(button6);\r\n        root.getChildren().add(button7);\r\n        root.getChildren().add(button8);\r\n    }\r\n\r\n    private void removeButtons(){\r\n        root.getChildren().remove(button1);\r\n        root.getChildren().remove(button2);\r\n        root.getChildren().remove(button3);\r\n        root.getChildren().remove(button4);\r\n        root.getChildren().remove(button5);\r\n        root.getChildren().remove(button6);\r\n        root.getChildren().remove(button7);\r\n        root.getChildren().remove(button8);\r\n    }\r\n\r\n    public void alertForCheat(){\r\n        Alert error = new Alert(Alert.AlertType.INFORMATION);\r\n        error.setHeaderText(\"shame on you!\");\r\n        error.setContentText(\"you successfully cheated!\");\r\n        error.showAndWait();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public void printTextError(String output) {\r\n        Alert alert = new Alert(Alert.AlertType.ERROR, output, ButtonType.OK);\r\n        alert.setHeaderText(\"\");\r\n        alert.setTitle(\"\");\r\n        alert.showAndWait();\r\n    }\r\n\r\n    public void back() throws Exception {\r\n        if (hasComeFromSide) {\r\n            RemoveCardFromSideDeckView.getInstance().setCurrentUser(user);\r\n            RemoveCardFromSideDeckView.getInstance().setCurrentDeck(deck);\r\n            RemoveCardFromSideDeckView.getInstance().start(stage);\r\n        } else {\r\n            RemoveCardFromDeckView.getInstance().setCurrentUser(user);\r\n            RemoveCardFromDeckView.getInstance().setCurrentDeck(deck);\r\n            RemoveCardFromDeckView.getInstance().start(stage);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/view/AddCardToDeckView.java	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ src/main/java/view/AddCardToDeckView.java	(date 1625823974158)
@@ -1,6 +1,7 @@
 package view;
 
 import controller.DeckController;
+import controller.SoundController;
 import javafx.application.Application;
 import javafx.event.ActionEvent;
 import javafx.event.EventHandler;
@@ -89,6 +90,7 @@
         try {
             DeckController.getInstance(user).addCardToDeck(card.getNamePascalCase(), deck.getDeckName(), isSide, false);
             resetImagesAndCards();
+            SoundController.getInstance().playWhenMovesCard();
         } catch (Exception e) {
             printTextError(e.getMessage());
         }
@@ -113,6 +115,7 @@
     public void addCardToDeckByCheating(Card card, boolean isSide){
         try {
             DeckController.getInstance(user).addCardToDeck(card.getNamePascalCase(), deck.getDeckName(), isSide, true);
+            SoundController.getInstance().playWhenMovesCard();
             resetImagesAndCards();
         } catch (Exception e) {
             printTextError(e.getMessage());
Index: src/main/java/view/RemoveCardFromDeckView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.DeckController;\r\nimport javafx.application.Application;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport model.Card;\r\nimport model.Deck;\r\nimport model.User;\r\n\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class RemoveCardFromDeckView extends Application implements Initializable {\r\n    private static Stage stage;\r\n    private static Deck deck;\r\n    private static RemoveCardFromDeckView instance = null;\r\n    private static User user;\r\n    private static ArrayList<Image> images = new ArrayList<>(4);\r\n    private static Card card1, card2, card3, card4;\r\n    public static ImageView image1, image2, image3, image4;\r\n    private static int totalCardsNumber;\r\n    private static int firstCardNumber = 0;\r\n    private static AnchorPane root;\r\n    @FXML\r\n    private AnchorPane anchorPane1, anchorPane2, anchorPane3, anchorPane4;\r\n    @FXML\r\n    private Label label;\r\n\r\n\r\n    public static RemoveCardFromDeckView getInstance() {\r\n        if (instance == null) instance = new RemoveCardFromDeckView();\r\n        return instance;\r\n    }\r\n\r\n    public void setCurrentUser(User user) {\r\n        RemoveCardFromDeckView.user = user;\r\n    }\r\n\r\n    public void setCurrentDeck(Deck deck) {\r\n        RemoveCardFromDeckView.deck = deck;\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        RemoveCardFromDeckView.stage = stage;\r\n        URL url = getClass().getResource(\"/RemoveCardFromDeck.fxml\");\r\n        root = FXMLLoader.load(url);\r\n        DeckController.getInstance(user).setMainDeckCards(deck);\r\n        DeckController.initImages();\r\n        setImagesAndCards();\r\n        addImages();\r\n        removeBadAnchorPanes();\r\n        Scene scene = new Scene(root);\r\n        stage.setScene(scene);\r\n    }\r\n\r\n    private void setImagesAndCards() {\r\n        images = DeckController.getInstance(user).getImages(firstCardNumber);\r\n        if (images.size() > 0) image1 = setImageView(images.get(0), 83);\r\n        if (images.size() > 1) image2 = setImageView(images.get(1), 283);\r\n        if (images.size() > 2) image3 = setImageView(images.get(2), 483);\r\n        if (images.size() > 3) image4 = setImageView(images.get(3), 683);\r\n        ArrayList<Card> cards = DeckController.getInstance(user).getCards(firstCardNumber);\r\n        if (cards.size() > 0) card1 = cards.get(0);\r\n        if (cards.size() > 1) card2 = cards.get(1);\r\n        if (cards.size() > 2) card3 = cards.get(2);\r\n        if (cards.size() > 3) card4 = cards.get(3);\r\n    }\r\n\r\n    private ImageView setImageView(Image image, int x) {\r\n        ImageView imageView = new ImageView(image);\r\n        imageView.setFitWidth(140);\r\n        imageView.setFitHeight(204);\r\n        imageView.setX(x);\r\n        imageView.setY(80);\r\n        return imageView;\r\n    }\r\n\r\n    private void addImages() {\r\n        if (root != null) {\r\n            if (image1 != null && !root.getChildren().contains(image1)) root.getChildren().add(image1);\r\n            if (image2 != null && !root.getChildren().contains(image2)) root.getChildren().add(image2);\r\n            if (image3 != null && !root.getChildren().contains(image3)) root.getChildren().add(image3);\r\n            if (image4 != null && !root.getChildren().contains(image4)) root.getChildren().add(image4);\r\n        }\r\n    }\r\n\r\n    private void removeBadAnchorPanes() {\r\n        if (root != null) {\r\n            if (image1 == null || image1.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane1\")) {\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image2 == null || image2.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane2\")) {\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image3 == null || image3.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane3\")) {\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image4 == null || image4.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane4\")) {\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void removeCardFromDeck(Card card, boolean isSide) {\r\n        try {\r\n            DeckController.getInstance(user).removeCardFromDeck(card.getNamePascalCase(), deck.getDeckName(), isSide);\r\n            resetImagesAndCards();\r\n        } catch (Exception e) {\r\n            printTextError(e.getMessage());\r\n        }\r\n    }\r\n\r\n    private void resetImagesAndCards() {\r\n        DeckController.getInstance(user).setMainDeckCards(deck);\r\n        //DeckController.getInstance(user).setUsersCards();\r\n        DeckController.initImages();\r\n        images = DeckController.getInstance(user).getImages(firstCardNumber);\r\n        ArrayList<Card> cards = DeckController.getInstance(user).getCards(firstCardNumber);\r\n        removeImages();\r\n        if (images.size() > 0) image1 = setImageView(images.get(0), 83);\r\n        else if (image1 != null) image1.setImage(null);\r\n        if (images.size() > 1) image2 = setImageView(images.get(1), 283);\r\n        else if (image2 != null) image2.setImage(null);\r\n        if (images.size() > 2) image3 = setImageView(images.get(2), 483);\r\n        else if (image3 != null) image3.setImage(null);\r\n        if (images.size() > 3) image4 = setImageView(images.get(3), 683);\r\n        else if (image4 != null) image4.setImage(null);\r\n        addImages();\r\n        if (cards.size() > 0) card1 = cards.get(0);\r\n        else card1 = null;\r\n        if (cards.size() > 1) card2 = cards.get(1);\r\n        else card2 = null;\r\n        if (cards.size() > 2) card3 = cards.get(2);\r\n        else card3 = null;\r\n        if (cards.size() > 3) card4 = cards.get(3);\r\n        else card4 = null;\r\n        addGoodAnchorPanes();\r\n        removeBadAnchorPanes();\r\n    }\r\n\r\n    private void addGoodAnchorPanes() {\r\n        if (root != null) {\r\n            if (image1 != null && image1.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane1\")) {\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image2 != null && image2.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane2\")) {\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image3 != null && image3.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane3\")) {\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image4 != null && image4.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if (child instanceof AnchorPane && child.getId().equals(\"anchorPane4\")) {\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void printTextError(String output) {\r\n        Alert alert = new Alert(Alert.AlertType.ERROR, output, ButtonType.OK);\r\n        alert.setHeaderText(\"\");\r\n        alert.setTitle(\"\");\r\n        alert.showAndWait();\r\n    }\r\n\r\n    private void removeImages() {\r\n        if (root != null) {\r\n            if (image1 != null) root.getChildren().remove(image1);\r\n            if (image2 != null) root.getChildren().remove(image2);\r\n            if (image3 != null) root.getChildren().remove(image3);\r\n            if (image4 != null) root.getChildren().remove(image4);\r\n        }\r\n    }\r\n\r\n    public void printTextInformation(String output) {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION, output, ButtonType.OK);\r\n        alert.setHeaderText(\"\");\r\n        alert.setTitle(\"\");\r\n        alert.showAndWait();\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        DeckController.getInstance(user).setMainDeckCards(deck);\r\n        DeckController.initImages();\r\n        setImagesAndCards();\r\n        addImages();\r\n        removeBadAnchorPanes();\r\n        label.setText(deck.getDeckName());\r\n    }\r\n\r\n    public void back() throws Exception {\r\n        AllDecksViewGraphic.getInstance().setCurrentUser(user);\r\n        AllDecksViewGraphic.getInstance().start(stage);\r\n    }\r\n\r\n    public void goNextPage() {\r\n        if (firstCardNumber + 4 >= deck.getMainDeck().size()) return;\r\n        firstCardNumber += 4;\r\n        resetImagesAndCards();\r\n    }\r\n\r\n    public void goPreviousPage() {\r\n        if (firstCardNumber - 4 < 0) return;\r\n        firstCardNumber -= 4;\r\n        resetImagesAndCards();\r\n    }\r\n\r\n\r\n    public void removeCardFromDeck1() {\r\n        removeCardFromDeck(card1, false);\r\n    }\r\n\r\n    public void removeCardFromDeck2() {\r\n        removeCardFromDeck(card2, false);\r\n    }\r\n\r\n    public void removeCardFromDeck3() {\r\n        removeCardFromDeck(card3, false);\r\n    }\r\n\r\n    public void removeCardFromDeck4() {\r\n        removeCardFromDeck(card4, false);\r\n    }\r\n\r\n\r\n    public void addCardToDeck() throws Exception {\r\n        AddCardToDeckView.getInstance().setCurrentUser(user);\r\n        AddCardToDeckView.getInstance().setCurrentDeck(deck);\r\n        AddCardToDeckView.getInstance().setHasComeFromSide(false);\r\n        AddCardToDeckView.getInstance().start(stage);\r\n    }\r\n\r\n    public void openSideDeckMenu() throws Exception {\r\n        RemoveCardFromSideDeckView.getInstance().setCurrentUser(user);\r\n        RemoveCardFromSideDeckView.getInstance().setCurrentDeck(deck);\r\n        RemoveCardFromSideDeckView.getInstance().start(stage);\r\n    }\r\n\r\n    public void openMainDeckMenu() {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/view/RemoveCardFromDeckView.java	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ src/main/java/view/RemoveCardFromDeckView.java	(date 1625823974046)
@@ -1,6 +1,7 @@
 package view;
 
 import controller.DeckController;
+import controller.SoundController;
 import javafx.application.Application;
 import javafx.collections.ObservableList;
 import javafx.event.ActionEvent;
@@ -138,6 +139,7 @@
     public void removeCardFromDeck(Card card, boolean isSide) {
         try {
             DeckController.getInstance(user).removeCardFromDeck(card.getNamePascalCase(), deck.getDeckName(), isSide);
+            SoundController.getInstance().playWhenMovesCard();
             resetImagesAndCards();
         } catch (Exception e) {
             printTextError(e.getMessage());
Index: src/main/java/view/RemoveCardFromSideDeckView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.DeckController;\r\nimport javafx.application.Application;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.ButtonType;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport model.Card;\r\nimport model.Deck;\r\nimport model.User;\r\n\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class RemoveCardFromSideDeckView extends Application implements Initializable {\r\n    private static Stage stage;\r\n    private static Deck deck;\r\n    private static RemoveCardFromSideDeckView instance = null;\r\n    private static User user;\r\n    private static ArrayList<Image> images = new ArrayList<>(4);\r\n    private static Card card1, card2, card3, card4;\r\n    public static ImageView image1, image2, image3, image4;\r\n    private static int totalCardsNumber;\r\n    private static int firstCardNumber = 0;\r\n    private static AnchorPane root;\r\n    @FXML\r\n    private AnchorPane anchorPane1, anchorPane2, anchorPane3, anchorPane4;\r\n    @FXML\r\n    private Label label;\r\n\r\n    public static RemoveCardFromSideDeckView getInstance() {\r\n        if (instance == null) instance = new RemoveCardFromSideDeckView();\r\n        return instance;\r\n    }\r\n\r\n    public void setCurrentUser(User user) {\r\n        RemoveCardFromSideDeckView.user = user;\r\n    }\r\n\r\n    public void setCurrentDeck(Deck deck) {\r\n        RemoveCardFromSideDeckView.deck = deck;\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        RemoveCardFromSideDeckView.stage = stage;\r\n        URL url = getClass().getResource(\"/RemoveCardFromSideDeck.fxml\");\r\n        root = FXMLLoader.load(url);\r\n        DeckController.getInstance(user).setSideDeckCards(deck);\r\n        DeckController.initImages();\r\n        setImagesAndCards();\r\n        addImages();\r\n        removeBadAnchorPanes();\r\n        Scene scene = new Scene(root);\r\n        stage.setScene(scene);\r\n    }\r\n\r\n    private void setImagesAndCards() {\r\n        images = DeckController.getInstance(user).getImages(firstCardNumber);\r\n        if (images.size() > 0) image1 = setImageView(images.get(0), 83);\r\n        if (images.size() > 1) image2 = setImageView(images.get(1), 283);\r\n        if (images.size() > 2) image3 = setImageView(images.get(2), 483);\r\n        if (images.size() > 3) image4 = setImageView(images.get(3), 683);\r\n        ArrayList<Card> cards = DeckController.getInstance(user).getCards(firstCardNumber);\r\n        if (cards.size() > 0) card1 = cards.get(0);\r\n        if (cards.size() > 1) card2 = cards.get(1);\r\n        if (cards.size() > 2) card3 = cards.get(2);\r\n        if (cards.size() > 3) card4 = cards.get(3);\r\n    }\r\n\r\n    private ImageView setImageView(Image image, int x) {\r\n        ImageView imageView = new ImageView(image);\r\n        imageView.setFitWidth(140);\r\n        imageView.setFitHeight(204);\r\n        imageView.setX(x);\r\n        imageView.setY(80);\r\n        return imageView;\r\n    }\r\n\r\n    private void addImages() {\r\n        if (root != null) {\r\n            if (image1 != null && !root.getChildren().contains(image1)) root.getChildren().add(image1);\r\n            if (image2 != null && !root.getChildren().contains(image2)) root.getChildren().add(image2);\r\n            if (image3 != null && !root.getChildren().contains(image3)) root.getChildren().add(image3);\r\n            if (image4 != null && !root.getChildren().contains(image4)) root.getChildren().add(image4);\r\n        }\r\n    }\r\n\r\n    private void removeBadAnchorPanes() {\r\n        if (root != null) {\r\n            if (image1 ==null || image1.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if(child instanceof AnchorPane && child.getId().equals(\"anchorPane1\")){\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image2 ==null || image2.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if(child instanceof AnchorPane && child.getId().equals(\"anchorPane2\")){\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image3 ==null || image3.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if(child instanceof AnchorPane && child.getId().equals(\"anchorPane3\")){\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image4 ==null || image4.getImage() == null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if(child instanceof AnchorPane && child.getId().equals(\"anchorPane4\")){\r\n                        child.setVisible(false);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void removeCardFromDeck(Card card, boolean isSide) {\r\n        try{\r\n            DeckController.getInstance(user).removeCardFromDeck(card.getNamePascalCase(), deck.getDeckName(), isSide);\r\n            resetImagesAndCards();\r\n        }\r\n        catch (Exception e){\r\n            printTextError(e.getMessage());\r\n        }\r\n    }\r\n\r\n    private void resetImagesAndCards() {\r\n        DeckController.getInstance(user).setSideDeckCards(deck);\r\n        //DeckController.getInstance(user).setUsersCards();\r\n        DeckController.initImages();\r\n        images = DeckController.getInstance(user).getImages(firstCardNumber);\r\n        ArrayList<Card> cards = DeckController.getInstance(user).getCards(firstCardNumber);\r\n        removeImages();\r\n        if (images.size() > 0) image1 = setImageView(images.get(0), 83);\r\n        else if (image1 != null) image1.setImage(null);\r\n        if (images.size() > 1) image2 = setImageView(images.get(1), 283);\r\n        else if (image2 != null) image2.setImage(null);\r\n        if (images.size() > 2) image3 = setImageView(images.get(2), 483);\r\n        else if (image3 != null) image3.setImage(null);\r\n        if (images.size() > 3) image4 = setImageView(images.get(3), 683);\r\n        else if (image4 != null) image4.setImage(null);\r\n        addImages();\r\n        if (cards.size() > 0) card1 = cards.get(0);\r\n        else card1 = null;\r\n        if (cards.size() > 1) card2 = cards.get(1);\r\n        else card2 = null;\r\n        if (cards.size() > 2) card3 = cards.get(2);\r\n        else card3 = null;\r\n        if (cards.size() > 3) card4 = cards.get(3);\r\n        else card4 = null;\r\n        addGoodAnchorPanes();\r\n        removeBadAnchorPanes();\r\n    }\r\n\r\n    private void addGoodAnchorPanes() {\r\n        if (root != null) {\r\n            if (image1 !=null && image1.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if(child instanceof AnchorPane && child.getId().equals(\"anchorPane1\")){\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image2 !=null && image2.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if(child instanceof AnchorPane && child.getId().equals(\"anchorPane2\")){\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image3 !=null && image3.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if(child instanceof AnchorPane && child.getId().equals(\"anchorPane3\")){\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (image4 !=null && image4.getImage() != null) {\r\n                for (Node child : root.getChildren()) {\r\n                    if(child instanceof AnchorPane && child.getId().equals(\"anchorPane4\")){\r\n                        child.setVisible(true);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void printTextError(String output) {\r\n        Alert alert = new Alert(Alert.AlertType.ERROR, output, ButtonType.OK);\r\n        alert.setHeaderText(\"\");\r\n        alert.setTitle(\"\");\r\n        alert.showAndWait();\r\n    }\r\n\r\n    private void removeImages() {\r\n        if (root != null) {\r\n            if (image1 != null) root.getChildren().remove(image1);\r\n            if (image2 != null) root.getChildren().remove(image2);\r\n            if (image3 != null) root.getChildren().remove(image3);\r\n            if (image4 != null) root.getChildren().remove(image4);\r\n        }\r\n    }\r\n\r\n    public void printTextInformation(String output) {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION, output, ButtonType.OK);\r\n        alert.setHeaderText(\"\");\r\n        alert.setTitle(\"\");\r\n        alert.showAndWait();\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        DeckController.getInstance(user).setSideDeckCards(deck);\r\n        DeckController.initImages();\r\n        setImagesAndCards();\r\n        addImages();\r\n        removeBadAnchorPanes();\r\n        label.setText(deck.getDeckName());\r\n    }\r\n\r\n    public void back() throws Exception {\r\n        AllDecksViewGraphic.getInstance().setCurrentUser(user);\r\n        AllDecksViewGraphic.getInstance().start(stage);\r\n    }\r\n\r\n    public void goNextPage() {\r\n        if (firstCardNumber + 4 >= deck.getSideDeck().size()) return;\r\n        firstCardNumber += 4;\r\n        resetImagesAndCards();\r\n    }\r\n\r\n    public void goPreviousPage() {\r\n        if (firstCardNumber - 4 < 0) return;\r\n        firstCardNumber -= 4;\r\n        resetImagesAndCards();\r\n    }\r\n\r\n\r\n    public void removeCardFromDeck1() {\r\n        removeCardFromDeck(card1, true);\r\n    }\r\n\r\n    public void removeCardFromDeck2() {\r\n        removeCardFromDeck(card2, true);\r\n    }\r\n\r\n    public void removeCardFromDeck3() {\r\n        removeCardFromDeck(card3, true);\r\n    }\r\n\r\n    public void removeCardFromDeck4() {\r\n        removeCardFromDeck(card4, true);\r\n    }\r\n\r\n\r\n    public void addCardToDeck() throws Exception {\r\n        AddCardToDeckView.getInstance().setCurrentUser(user);\r\n        AddCardToDeckView.getInstance().setCurrentDeck(deck);\r\n        AddCardToDeckView.getInstance().setHasComeFromSide(true);\r\n        AddCardToDeckView.getInstance().start(stage);\r\n    }\r\n\r\n    public void openMainDeckMenu() throws Exception{\r\n        RemoveCardFromDeckView.getInstance().setCurrentUser(user);\r\n        RemoveCardFromDeckView.getInstance().setCurrentDeck(deck);\r\n        RemoveCardFromDeckView.getInstance().start(stage);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/view/RemoveCardFromSideDeckView.java	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ src/main/java/view/RemoveCardFromSideDeckView.java	(date 1625823974113)
@@ -1,6 +1,7 @@
 package view;
 
 import controller.DeckController;
+import controller.SoundController;
 import javafx.application.Application;
 import javafx.collections.ObservableList;
 import javafx.event.ActionEvent;
@@ -139,6 +140,7 @@
     public void removeCardFromDeck(Card card, boolean isSide) {
         try{
             DeckController.getInstance(user).removeCardFromDeck(card.getNamePascalCase(), deck.getDeckName(), isSide);
+            SoundController.getInstance().playWhenMovesCard();
             resetImagesAndCards();
         }
         catch (Exception e){
Index: src/main/java/view/ChooseDuelView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.ChooseDuelControllerGraphic;\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.stage.Stage;\r\nimport model.User;\r\n\r\nimport java.net.URL;\r\n\r\npublic class ChooseDuelView extends Application {\r\n    private static Stage stage;\r\n    static ChooseDuelView instance = null;\r\n    private static User playerOne;\r\n    private static String playerTwoName;\r\n\r\n    public static ChooseDuelView getInstance() {\r\n        if (instance == null) instance = new ChooseDuelView();\r\n        return instance;\r\n    }\r\n\r\n    public void setCurrentUser(User user) {\r\n\r\n        ChooseDuelView.playerOne = user;\r\n    }\r\n\r\n    public void setPlayerTwoName(String playerTwoName) {\r\n\r\n        ChooseDuelView.playerTwoName = playerTwoName;\r\n    }\r\n\r\n    public void start(Stage stage) throws Exception {\r\n        ChooseDuelView.stage = stage;\r\n        URL url = getClass().getResource(\"/NewDuelMenu.fxml\");\r\n        Parent root = FXMLLoader.load(url);\r\n        Scene scene = new Scene(root);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public void threeRoundsGame(MouseEvent event) throws Exception{\r\n        startNewGame(3);\r\n    }\r\n\r\n    public void oneRoundGame(MouseEvent event) throws Exception{\r\n        startNewGame(1);\r\n    }\r\n\r\n    public void goBack(MouseEvent event) throws Exception {\r\n        ChooseDuelControllerGraphic.goBack(stage);\r\n    }\r\n\r\n\r\n    public void startNewGame(int numberOfRounds) throws Exception{\r\n        if (playerTwoName.equals(\"@AI@\")){\r\n            RockPaperScissorAIView.getInstance().setCurrentUser(playerOne);\r\n            RockPaperScissorAIView.getInstance().setNumberOfRounds(numberOfRounds);\r\n            RockPaperScissorAIView.getInstance().start(stage);\r\n        }\r\n        else {\r\n            RockPaperScissorView.getInstance().setCurrentUser(playerOne);\r\n            RockPaperScissorAIView.getInstance().setNumberOfRounds(numberOfRounds);\r\n            RockPaperScissorView.getInstance().setPlayerTwoName(playerTwoName);\r\n            RockPaperScissorView.getInstance().start(stage);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/view/ChooseDuelView.java	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ src/main/java/view/ChooseDuelView.java	(date 1625823255490)
@@ -62,7 +62,7 @@
         }
         else {
             RockPaperScissorView.getInstance().setCurrentUser(playerOne);
-            RockPaperScissorAIView.getInstance().setNumberOfRounds(numberOfRounds);
+            RockPaperScissorView.getInstance().setNumberOfRounds(numberOfRounds);
             RockPaperScissorView.getInstance().setPlayerTwoName(playerTwoName);
             RockPaperScissorView.getInstance().start(stage);
         }
Index: Deck/parmidaparmida1MainDeck.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Baby Dragon\r\nBaby Dragon\r\nBaby Dragon\r\nAdvanced Ritual Art\r\nChange Of Heart\r\nBattle Warrior\r\nBattle Warrior\r\nCommand Knight\r\nCurtain Of Dark Ones\r\nCommand Knight\r\nCurtain Of Dark Ones\r\nCommand Knight\r\nFlame Manipulator\r\nFlame Manipulator\r\nCurtain Of Dark Ones\r\nExploder Dragon\r\nExploder Dragon\r\nExploder Dragon\r\nHaniwa\r\nHero Of The East\r\nHero Of The East\r\nHaniwa\r\nHero Of The East\r\nHaniwa\r\nFlame Manipulator\r\nBitron\r\nBitron\r\nBitron\r\nBattle Warrior\r\nMan Eater Bug\r\nMan Eater Bug\r\nMan Eater Bug\r\nMarshmallon\r\nMarshmallon\r\nMarshmallon\r\nMind Crush\r\nSilver Fang\r\nSilver Fang\r\nSilver Fang\r\nTerraforming\r\nTexchanger\r\nTexchanger\r\nTexchanger\r\nTrap Hole\r\nYomi Ship\r\nWattkid\r\nWattkid\r\nWattkid\r\nYomi Ship\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Deck/parmidaparmida1MainDeck.txt	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ Deck/parmidaparmida1MainDeck.txt	(date 1625824032639)
@@ -1,4 +1,3 @@
-Baby Dragon
 Baby Dragon
 Baby Dragon
 Advanced Ritual Art
@@ -47,3 +46,6 @@
 Wattkid
 Wattkid
 Yomi Ship
+Axe Raider
+Axe Raider
+Axe Raider
Index: UsersDecks/@AI@AllDecks.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>DeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\n@DeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\nDeckForAI\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- UsersDecks/@AI@AllDecks.txt	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ UsersDecks/@AI@AllDecks.txt	(date 1625828377839)
@@ -141,3 +141,25 @@
 DeckForAI
 DeckForAI
 DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
+DeckForAI
Index: Users/parmida.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>parmida\r\n123\r\nparmida\r\n4000\r\n136000
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Users/parmida.txt	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ Users/parmida.txt	(date 1625828393546)
@@ -1,5 +1,5 @@
 parmida
 123
 parmida
-4000
-136000
\ No newline at end of file
+5000
+137200
\ No newline at end of file
Index: src/main/java/view/ShopViewGraphic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\n\r\nimport controller.DeckController;\r\nimport controller.ImportExportUserController;\r\nimport controller.ShopController;\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ButtonType;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport model.*;\r\n\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class ShopViewGraphic extends Application implements Initializable {\r\n\r\n    private static Stage stage;\r\n    private static ShopViewGraphic instance = null;\r\n    private static User user;\r\n    private static ArrayList<Image> images = new ArrayList<>(4);\r\n    private static Card card1, card2, card3, card4;\r\n    public static ImageView image1, image2, image3, image4;\r\n    private static int totalCardsNumber;\r\n    private static int firstCardNumber = 0;\r\n    private static AnchorPane root;\r\n    @FXML\r\n    private Label money, youHave1, youHave2, youHave3, youHave4, price1, price2, price3, price4;\r\n    @FXML\r\n    private Button buyButton1, buyButton2, buyButton3, buyButton4;\r\n\r\n    public static ShopViewGraphic getInstance() {\r\n        if (instance == null) instance = new ShopViewGraphic();\r\n        return instance;\r\n    }\r\n\r\n    public ShopViewGraphic() {\r\n        totalCardsNumber = ShopController.getInstance(user).getTotalCardsNumber();\r\n    }\r\n\r\n    public void setCurrentUser(User user) {\r\n        ShopViewGraphic.user = user;\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        ShopViewGraphic.stage = stage;\r\n        URL url = getClass().getResource(\"/ShopMenu.fxml\");\r\n        root = FXMLLoader.load(url);\r\n        setImagesAndCards();\r\n        addImages();\r\n        Scene scene = new Scene(root);\r\n        stage.setScene(scene);\r\n    }\r\n\r\n    public void goBack() throws Exception {\r\n        MainViewGraphic.getInstance().start(stage);\r\n    }\r\n\r\n    public void buy1() {\r\n        user.decreaseMoney(card1.getPrice());\r\n        user.getAllCards().add(card1);\r\n        ImportExportUserController.getInstance().exportAllCards(ShopViewGraphic.user);\r\n        setAll();\r\n        printText(\"Card added successfully\");\r\n    }\r\n\r\n    public void buy2() {\r\n        user.decreaseMoney(card2.getPrice());\r\n        user.getAllCards().add(card2);\r\n        ImportExportUserController.getInstance().exportAllCards(ShopViewGraphic.user);\r\n        setAll();\r\n        printText(\"Card added successfully\");\r\n    }\r\n\r\n    public void buy3() {\r\n        user.decreaseMoney(card3.getPrice());\r\n        user.getAllCards().add(card3);\r\n        ImportExportUserController.getInstance().exportAllCards(ShopViewGraphic.user);\r\n        setAll();\r\n        printText(\"Card added successfully\");\r\n    }\r\n\r\n    public void buy4() {\r\n        user.decreaseMoney(card4.getPrice());\r\n        user.getAllCards().add(card4);\r\n        ImportExportUserController.getInstance().exportAllCards(ShopViewGraphic.user);\r\n        setAll();\r\n        printText(\"Card added successfully\");\r\n    }\r\n\r\n    public void goNextPage() {\r\n        if (firstCardNumber + 4 >= totalCardsNumber) return;\r\n        firstCardNumber += 4;\r\n        setOnlyImagesAndCards();\r\n        setInStocksAndPrices();\r\n        setAll();\r\n    }\r\n\r\n    public void goPreviousPage() {\r\n        if (firstCardNumber - 4 < 0) return;\r\n        firstCardNumber -= 4;\r\n        setOnlyImagesAndCards();\r\n        setInStocksAndPrices();\r\n        setAll();\r\n    }\r\n\r\n    private void setImagesAndCards() {\r\n        images = ShopController.getInstance(user).getImages(firstCardNumber);\r\n        image1 = setImageView(images.get(0), 83);\r\n        image2 = setImageView(images.get(1), 283);\r\n        image3 = setImageView(images.get(2), 483);\r\n        image4 = setImageView(images.get(3), 683);\r\n        card1 = ShopController.getInstance(user).getCards(firstCardNumber).get(0);\r\n        card2 = ShopController.getInstance(user).getCards(firstCardNumber).get(1);\r\n        card3 = ShopController.getInstance(user).getCards(firstCardNumber).get(2);\r\n        card4 = ShopController.getInstance(user).getCards(firstCardNumber).get(3);\r\n    }\r\n\r\n    private ImageView setImageView(Image image, int x) {\r\n        ImageView imageView = new ImageView(image);\r\n        imageView.setFitWidth(140);\r\n        imageView.setFitHeight(204);\r\n        imageView.setX(x);\r\n        imageView.setY(64);\r\n        return imageView;\r\n    }\r\n\r\n    private void setOnlyImagesAndCards() {\r\n        images = ShopController.getInstance(user).getImages(firstCardNumber);\r\n        removeImages();\r\n        image1.setImage(images.get(0));\r\n        image2.setImage(images.get(1));\r\n        image3.setImage(images.get(2));\r\n        image4.setImage(images.get(3));\r\n        addImages();\r\n        card1 = ShopController.getInstance(user).getCards(firstCardNumber).get(0);\r\n        card2 = ShopController.getInstance(user).getCards(firstCardNumber).get(1);\r\n        card3 = ShopController.getInstance(user).getCards(firstCardNumber).get(2);\r\n        card4 = ShopController.getInstance(user).getCards(firstCardNumber).get(3);\r\n    }\r\n\r\n    private void removeImages() {\r\n        root.getChildren().remove(image1);\r\n        root.getChildren().remove(image2);\r\n        root.getChildren().remove(image3);\r\n        root.getChildren().remove(image4);\r\n    }\r\n\r\n    private void addImages() {\r\n        root.getChildren().add(image1);\r\n        root.getChildren().add(image2);\r\n        root.getChildren().add(image3);\r\n        root.getChildren().add(image4);\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        setImagesAndCards();\r\n        setAll();\r\n    }\r\n\r\n    public void setAll() {\r\n        money.setText(String.valueOf(user.getMoney()));\r\n        buyButton1.setDisable(card1 != null && card1.getPrice() > user.getMoney());\r\n        buyButton2.setDisable(card2 != null && card2.getPrice() > user.getMoney());\r\n        buyButton3.setDisable(card3 != null && card3.getPrice() > user.getMoney());\r\n        buyButton4.setDisable(card4 != null && card4.getPrice() > user.getMoney());\r\n        setInStocksAndPrices();\r\n    }\r\n\r\n    private void setInStocksAndPrices() {\r\n        youHave1.setText(getTextForInStock(card1));\r\n        youHave2.setText(getTextForInStock(card2));\r\n        youHave3.setText(getTextForInStock(card3));\r\n        youHave4.setText(getTextForInStock(card4));\r\n        price1.setText(String.valueOf(card1.getPrice()));\r\n        price2.setText(String.valueOf(card2.getPrice()));\r\n        price3.setText(String.valueOf(card3.getPrice()));\r\n        price4.setText(String.valueOf(card4.getPrice()));\r\n    }\r\n\r\n    private String getTextForInStock(Card card) {\r\n        if (user.getCountOfCardInAllCards(card)>1)\r\n            return \"You have \" + user.getCountOfCardInAllCards(card) + \" cards of this type\";\r\n        else if(user.getCountOfCardInAllCards(card)==1)\r\n            return \"You have \" + user.getCountOfCardInAllCards(card) + \" card of this type\";\r\n        else\r\n            return \"\";\r\n    }\r\n\r\n    public void printText(String output) {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION, output, ButtonType.OK);\r\n        alert.setHeaderText(\"\");\r\n        alert.setTitle(\"\");\r\n        alert.showAndWait();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/view/ShopViewGraphic.java	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ src/main/java/view/ShopViewGraphic.java	(date 1625823973897)
@@ -4,6 +4,7 @@
 import controller.DeckController;
 import controller.ImportExportUserController;
 import controller.ShopController;
+import controller.SoundController;
 import javafx.application.Application;
 import javafx.fxml.FXML;
 import javafx.fxml.FXMLLoader;
@@ -72,6 +73,7 @@
         user.getAllCards().add(card1);
         ImportExportUserController.getInstance().exportAllCards(ShopViewGraphic.user);
         setAll();
+        SoundController.getInstance().playWhenBuys();
         printText("Card added successfully");
     }
 
@@ -80,6 +82,7 @@
         user.getAllCards().add(card2);
         ImportExportUserController.getInstance().exportAllCards(ShopViewGraphic.user);
         setAll();
+        SoundController.getInstance().playWhenBuys();
         printText("Card added successfully");
     }
 
@@ -88,6 +91,7 @@
         user.getAllCards().add(card3);
         ImportExportUserController.getInstance().exportAllCards(ShopViewGraphic.user);
         setAll();
+        SoundController.getInstance().playWhenBuys();
         printText("Card added successfully");
     }
 
@@ -96,6 +100,7 @@
         user.getAllCards().add(card4);
         ImportExportUserController.getInstance().exportAllCards(ShopViewGraphic.user);
         setAll();
+        SoundController.getInstance().playWhenBuys();
         printText("Card added successfully");
     }
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0b1707ad-3e75-4310-9619-956ec670ae1a\" name=\"Default Changelist\" comment=\"Duel View battlePhase4\">\r\n      <change afterPath=\"$PROJECT_DIR$/src (8).zip\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_1.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_1.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2021_11_13_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2021_11_13_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_3_2021_11_49_AM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_3_2021_11_49_AM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_3_2021_12_22_AM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_3_2021_12_22_AM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_10_08_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_10_08_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_11_20_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_11_20_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_6_32_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_6_32_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_8_56_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_8_56_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_12_59_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_12_59_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_2_58_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_2_58_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_4_14_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_4_14_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_4_48_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_4_48_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_15_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_15_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_35_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_35_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_59_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_59_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_59_PM__Default_Changelist_1.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_59_PM__Default_Changelist_1.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_9_32_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_9_32_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_10_58_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_10_58_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_11_28_AM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_11_28_AM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_11_29_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_11_29_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_12_14_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_12_14_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_1_03_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_1_03_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_1_18_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_1_18_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_11_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_11_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_29_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_29_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_31_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_31_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_45_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_45_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_47_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_47_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_07_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_07_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_19_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_19_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_27_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_27_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_48_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_48_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_51_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_51_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_52_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_52_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_6_59_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_6_59_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_8_46_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_8_46_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_9_05_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_9_05_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_12_19_AM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_12_19_AM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_09_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_09_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_09_PM__Default_Changelist_1.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_09_PM__Default_Changelist_1.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_13_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_13_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_2_59_PM__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_2_59_PM__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_10.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_10.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_11.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_11.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_12.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_12.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_13.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_13.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_14.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_14.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_2.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_2.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_3.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_3.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_4.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_4.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_5.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_5.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_6.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_6.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_7.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_7.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_8.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_8.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_9.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_9.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Users/@AI@.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Users/@AI@.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Users/parmida.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Users/parmida.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/UsersDecks/@AI@AllDecks.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/UsersDecks/@AI@AllDecks.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/UsersDecks/hamrazAllDecks.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/UsersDecks/hamrazAllDecks.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/UsersDecks/parmidaAllDecks.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/UsersDecks/parmidaAllDecks.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/controller/DuelController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/controller/DuelController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/view/DuelView.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/view/DuelView.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/view/GameViewGraphic.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/view/GameViewGraphic.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/controller/DuelController.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/controller/DuelController.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/view/DuelView.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/view/DuelView.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/view/GameViewGraphic.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/view/GameViewGraphic.class\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeStyleSettingsInfer\">\r\n    <option name=\"done\" value=\"true\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1tf7blqKJ2Y0dLvEX2lrUssvKzj\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n    <property name=\"extract.method.default.visibility\" value=\"private\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../../../../pacman3/src\" />\r\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Modules\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"reference.settings.project.statistic.project.settings\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\hamri\\Desktop\\AP\\project_team_17_9\\src\\main\\resources\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\hamri\\Desktop\\AP\\project_team_17_9\\src\\main\\resources\\images\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"controller.exeption\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.LogInViewGraphic\">\r\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\r\n      <option name=\"arquillianRunConfiguration\">\r\n        <value>\r\n          <option name=\"containerStateName\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"GameViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.GameViewGraphic\" />\r\n      <module name=\"project_team_17\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"LogInViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.LogInViewGraphic\" />\r\n      <module name=\"project_team_17\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"1.8\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"project_team_17\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"SignUpViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"1.8\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.SignUpViewGraphic\" />\r\n      <module name=\"project_team_17\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"test\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"project_team_17\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"test\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.LogInViewGraphic\" />\r\n        <item itemvalue=\"Application.GameViewGraphic\" />\r\n        <item itemvalue=\"Application.SignUpViewGraphic\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"JUnit.test\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"StructuralSearchPlugin\">\r\n    <searchConfiguration name=\"Unnamed\" created=\"1624744011824\" text=\"/* $CommentContent$ */\" recursive=\"false\" caseInsensitive=\"false\" type=\"JAVA\" pattern_context=\"default\" scope_type=\"PROJECT\" scope_descriptor=\"\" history=\"1\">\r\n      <constraint name=\"__context__\" within=\"\" contains=\"\" />\r\n      <constraint name=\"CommentContent\" within=\"\" contains=\"\" />\r\n    </searchConfiguration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0b1707ad-3e75-4310-9619-956ec670ae1a\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1623148364579</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1623148364579</updated>\r\n      <workItem from=\"1624545878199\" duration=\"3232000\" />\r\n      <workItem from=\"1625476998745\" duration=\"2760000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Yami SpellCard.java\">\r\n      <created>1624002906129</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624002906129</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Forest &amp; Closed Forest&#10;SpellCard.java\">\r\n      <created>1624012207305</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624012207305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"debug import user\">\r\n      <created>1624093680512</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624093680512</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"debug import user o baghie import ha\">\r\n      <created>1624099929742</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624099929742</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"kiana test error fix\">\r\n      <created>1624533248061</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624533248061</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"show all cards debug\">\r\n      <created>1624546002241</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624546002241</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"jabejayie cheat money\">\r\n      <created>1624547044985</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624547044985</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"draw phase automatic\">\r\n      <created>1624556390073</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624556390073</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"debug1\">\r\n      <created>1624625286861</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624625286861</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"debug2\">\r\n      <created>1624639165113</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624639165113</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"ai\">\r\n      <created>1624641323564</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624641323564</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"debug attack1\">\r\n      <created>1624643600247</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624643600247</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"debug attack2\">\r\n      <created>1624645817335</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624645817335</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"debug attack3\">\r\n      <created>1624646566864</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624646566864</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"debug attack4\">\r\n      <created>1624650239704</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624650239704</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"debug show card\">\r\n      <created>1624653667478</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624653667478</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"debug show card2\">\r\n      <created>1624654145122</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624654145122</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"debug takeAction1\">\r\n      <created>1624702088038</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624702088038</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"debug command knight2\">\r\n      <created>1624703733833</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624703733833</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"nothing\">\r\n      <created>1624704514853</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624704514853</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"GATE_GUARDIAN\">\r\n      <created>1624709705904</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624709705904</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"SPELL_ABSORPTION debug1\">\r\n      <created>1624710730390</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624710730390</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"tributeForSummon debug\">\r\n      <created>1624712073940</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624712073940</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Full spell and trap zone\">\r\n      <created>1624713959005</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624713959005</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"continuous spell card\">\r\n      <created>1624715726136</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624715726136</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"suijin debug 1\">\r\n      <created>1624717829951</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624717829951</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"suijin debug 2\">\r\n      <created>1624719651615</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624719651615</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"gate gaurdian debug\">\r\n      <created>1624721450582</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624721450582</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"activate spell debug 1\">\r\n      <created>1624725085666</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624725085666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"AIFullDebug + monster reborn\">\r\n      <created>1624729177752</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624729177752</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"twin twister + spell absorption\">\r\n      <created>1624737729186</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624737729186</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"mystical space typhoon&#10;twin twisters\">\r\n      <created>1624739906446</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624739906446</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۳۸\" summary=\":|\">\r\n      <created>1625245993391</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۳۸\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۳۸\" />\r\n      <updated>1625245993391</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۳۹\" summary=\"profile and scoreboard edited\">\r\n      <created>1625252163631</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۳۹\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۳۹\" />\r\n      <updated>1625252163631</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\"ShopGraphic3\">\r\n      <created>1625304651482</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1625304651482</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00041\" summary=\"ShopGraphic4\">\r\n      <created>1625313201854</created>\r\n      <option name=\"number\" value=\"00041\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1625313201854</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۲\" summary=\"create deck\">\r\n      <created>1625349222305</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۲\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۲\" />\r\n      <updated>1625349222305</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۳\" summary=\"profile photo\">\r\n      <created>1625407690499</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۳\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۳\" />\r\n      <updated>1625407690499</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۴\" summary=\"...\">\r\n      <created>1625420301025</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۴\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۴\" />\r\n      <updated>1625420301025</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۵\" summary=\"ScoreBoard\">\r\n      <created>1625435400560</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۵\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۵\" />\r\n      <updated>1625435400560</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00046\" summary=\"rock paper scissor\">\r\n      <created>1625502701825</created>\r\n      <option name=\"number\" value=\"00046\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00046\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1625502701825</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00047\" summary=\"rock paper scissor\">\r\n      <created>1625514903733</created>\r\n      <option name=\"number\" value=\"00047\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00047\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1625514903733</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۸\" summary=\"rock paper scissor names\">\r\n      <created>1625565325571</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۸\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۸\" />\r\n      <updated>1625565325571</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۴۹\" summary=\"board cards imageview\">\r\n      <created>1625571369460</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۴۹\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۴۹\" />\r\n      <updated>1625571369460</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00050\" summary=\"Duel View 5\">\r\n      <created>1625596091741</created>\r\n      <option name=\"number\" value=\"00050\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00050\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1625596091741</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00051\" summary=\"Duel View 6\">\r\n      <created>1625597954649</created>\r\n      <option name=\"number\" value=\"00051\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00051\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1625597954649</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۵۲\" summary=\"graveyard\">\r\n      <created>1625688162787</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۵۲\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۵۲\" />\r\n      <updated>1625688162787</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E۰۰۰۵۳\" summary=\"karaye parmida\">\r\n      <created>1625691283824</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E۰۰۰۵۳\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E۰۰۰۵۳\" />\r\n      <updated>1625691283824</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00054\" summary=\"Duel View battlePhase3\">\r\n      <created>1625766784427</created>\r\n      <option name=\"number\" value=\"00054\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00054\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1625766784427</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"55\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Full spell and trap zone\" />\r\n    <MESSAGE value=\"continuous spell card\" />\r\n    <MESSAGE value=\"suijin debug 1\" />\r\n    <MESSAGE value=\"suijin debug 2\" />\r\n    <MESSAGE value=\"gate gaurdian debug\" />\r\n    <MESSAGE value=\"activate spell debug 1\" />\r\n    <MESSAGE value=\"AIFullDebug + monster reborn\" />\r\n    <MESSAGE value=\"twin twister + spell absorption\" />\r\n    <MESSAGE value=\"mystical space typhoon&#10;twin twisters\" />\r\n    <MESSAGE value=\":|\" />\r\n    <MESSAGE value=\"profile and scoreboard edited\" />\r\n    <MESSAGE value=\"ShopGraphic3\" />\r\n    <MESSAGE value=\"ShopGraphic4\" />\r\n    <MESSAGE value=\"create deck\" />\r\n    <MESSAGE value=\"profile photo\" />\r\n    <MESSAGE value=\"...\" />\r\n    <MESSAGE value=\"ScoreBoard\" />\r\n    <MESSAGE value=\"rock paper scissor\" />\r\n    <MESSAGE value=\"rock paper scissor names\" />\r\n    <MESSAGE value=\"board cards imageview\" />\r\n    <MESSAGE value=\"Duel View 5\" />\r\n    <MESSAGE value=\"Duel View 6\" />\r\n    <MESSAGE value=\"graveyard\" />\r\n    <MESSAGE value=\"karaye parmida\" />\r\n    <MESSAGE value=\"Duel View battlePhase3\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Duel View battlePhase3\" />\r\n  </component>\r\n  <component name=\"WindowStateProjectService\">\r\n    <state width=\"1237\" height=\"231\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1625820051611\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"231\" key=\"GridCell.Tab.0.bottom/0.0.1280.680@0.0.1280.680\" timestamp=\"1625820051611\" />\r\n    <state width=\"1237\" height=\"231\" key=\"GridCell.Tab.0.center\" timestamp=\"1625820051611\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"231\" key=\"GridCell.Tab.0.center/0.0.1280.680@0.0.1280.680\" timestamp=\"1625820051611\" />\r\n    <state width=\"1237\" height=\"231\" key=\"GridCell.Tab.0.left\" timestamp=\"1625820051611\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"231\" key=\"GridCell.Tab.0.left/0.0.1280.680@0.0.1280.680\" timestamp=\"1625820051611\" />\r\n    <state width=\"1237\" height=\"231\" key=\"GridCell.Tab.0.right\" timestamp=\"1625820051611\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state width=\"1237\" height=\"231\" key=\"GridCell.Tab.0.right/0.0.1280.680@0.0.1280.680\" timestamp=\"1625820051611\" />\r\n    <state x=\"233\" y=\"74\" key=\"Vcs.Push.Dialog.v2\" timestamp=\"1625766818248\">\r\n      <screen x=\"0\" y=\"0\" width=\"1280\" height=\"680\" />\r\n    </state>\r\n    <state x=\"233\" y=\"74\" key=\"Vcs.Push.Dialog.v2/0.0.1280.680@0.0.1280.680\" timestamp=\"1625766818248\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/view/RockPaperScissorView.java</url>\r\n          <line>36</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision ded14bb9b1a139174bb7bdbd49488ff06ef83895)
+++ .idea/workspace.xml	(date 1625828440882)
@@ -22,77 +22,29 @@
     <select />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="0b1707ad-3e75-4310-9619-956ec670ae1a" name="Default Changelist" comment="Duel View battlePhase4">
-      <change afterPath="$PROJECT_DIR$/src (8).zip" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_24_2021_9_01_PM__Default_Changelist_1.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2021_11_13_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_2_2021_11_13_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_3_2021_11_49_AM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_3_2021_11_49_AM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_3_2021_12_22_AM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_3_2021_12_22_AM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_10_08_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_10_08_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_11_20_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_11_20_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_6_32_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_6_32_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_8_56_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_4_2021_8_56_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_12_59_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_12_59_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_2_58_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_2_58_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_4_14_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_4_14_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_4_48_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_4_48_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_15_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_15_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_35_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_35_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_59_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_59_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_59_PM__Default_Changelist_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_8_59_PM__Default_Changelist_1.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_9_32_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_5_2021_9_32_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_10_58_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_10_58_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_11_28_AM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_11_28_AM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_11_29_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_11_29_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_12_14_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_12_14_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_1_03_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_1_03_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_1_18_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_1_18_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_11_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_11_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_29_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_29_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_31_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_31_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_45_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_45_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_47_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_2_47_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_07_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_07_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_19_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_19_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_27_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_4_27_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_48_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_48_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_51_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_51_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_52_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_5_52_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_6_59_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_6_59_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_8_46_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_8_46_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_9_05_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_6_2021_9_05_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_12_19_AM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_12_19_AM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_09_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_09_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_09_PM__Default_Changelist_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_09_PM__Default_Changelist_1.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_13_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_1_13_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_2_59_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_7_2021_2_59_PM__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_10.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_10.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_11.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_11.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_12.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_12.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_13.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_13.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_14.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_14.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_2.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_2.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_3.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_3.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_4.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_4.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_5.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_5.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_6.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_6.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_7.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_7.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_8.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_8.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_9.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_______Default_Changelist_9.xml" afterDir="false" />
+    <list default="true" id="0b1707ad-3e75-4310-9619-956ec670ae1a" name="Default Changelist" comment="Duel View battlePhase5">
+      <change afterPath="$PROJECT_DIR$/src (9).zip" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Users/@AI@.txt" beforeDir="false" afterPath="$PROJECT_DIR$/Users/@AI@.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Cards/parmida.txt" beforeDir="false" afterPath="$PROJECT_DIR$/Cards/parmida.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Deck/parmidaparmida1MainDeck.txt" beforeDir="false" afterPath="$PROJECT_DIR$/Deck/parmidaparmida1MainDeck.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Users/hamraz.txt" beforeDir="false" afterPath="$PROJECT_DIR$/Users/hamraz.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Users/parmida.txt" beforeDir="false" afterPath="$PROJECT_DIR$/Users/parmida.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/UsersDecks/@AI@AllDecks.txt" beforeDir="false" afterPath="$PROJECT_DIR$/UsersDecks/@AI@AllDecks.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/UsersDecks/hamrazAllDecks.txt" beforeDir="false" afterPath="$PROJECT_DIR$/UsersDecks/hamrazAllDecks.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/UsersDecks/parmidaAllDecks.txt" beforeDir="false" afterPath="$PROJECT_DIR$/UsersDecks/parmidaAllDecks.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/controller/DuelController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controller/DuelController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/view/DuelView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/DuelView.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/view/AddCardToDeckView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/AddCardToDeckView.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/view/ChooseDuelView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/ChooseDuelView.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/view/GameViewGraphic.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/GameViewGraphic.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/view/RemoveCardFromDeckView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/RemoveCardFromDeckView.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/view/RemoveCardFromSideDeckView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/RemoveCardFromSideDeckView.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/view/ShopViewGraphic.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/ShopViewGraphic.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/MainMenu.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/MainMenu.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/controller/DeckController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/controller/DeckController.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/controller/DuelController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/controller/DuelController.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/view/DuelView.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/view/DuelView.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/view/AddCardToDeckView.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/view/AddCardToDeckView.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/view/GameViewGraphic.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/view/GameViewGraphic.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/view/MainViewGraphic.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/view/MainViewGraphic.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -256,13 +208,6 @@
       <updated>1623148364579</updated>
       <workItem from="1624545878199" duration="3232000" />
       <workItem from="1625476998745" duration="2760000" />
-    </task>
-    <task id="LOCAL-00006" summary="Yami SpellCard.java">
-      <created>1624002906129</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1624002906129</updated>
     </task>
     <task id="LOCAL-00007" summary="Forest &amp; Closed Forest&#10;SpellCard.java">
       <created>1624012207305</created>
@@ -590,7 +535,14 @@
       <option name="project" value="LOCAL" />
       <updated>1625766784427</updated>
     </task>
-    <option name="localTasksCounter" value="55" />
+    <task id="LOCAL-00055" summary="Duel View battlePhase5">
+      <created>1625820380816</created>
+      <option name="number" value="00055" />
+      <option name="presentableId" value="LOCAL-00055" />
+      <option name="project" value="LOCAL" />
+      <updated>1625820380816</updated>
+    </task>
+    <option name="localTasksCounter" value="56" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -610,7 +562,6 @@
   </component>
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
-    <MESSAGE value="Full spell and trap zone" />
     <MESSAGE value="continuous spell card" />
     <MESSAGE value="suijin debug 1" />
     <MESSAGE value="suijin debug 2" />
@@ -635,29 +586,30 @@
     <MESSAGE value="graveyard" />
     <MESSAGE value="karaye parmida" />
     <MESSAGE value="Duel View battlePhase3" />
-    <option name="LAST_COMMIT_MESSAGE" value="Duel View battlePhase3" />
+    <MESSAGE value="Duel View battlePhase5" />
+    <option name="LAST_COMMIT_MESSAGE" value="Duel View battlePhase5" />
   </component>
   <component name="WindowStateProjectService">
-    <state width="1237" height="231" key="GridCell.Tab.0.bottom" timestamp="1625820051611">
+    <state width="1237" height="137" key="GridCell.Tab.0.bottom" timestamp="1625828374151">
       <screen x="0" y="0" width="1280" height="680" />
     </state>
-    <state width="1237" height="231" key="GridCell.Tab.0.bottom/0.0.1280.680@0.0.1280.680" timestamp="1625820051611" />
-    <state width="1237" height="231" key="GridCell.Tab.0.center" timestamp="1625820051611">
+    <state width="1237" height="137" key="GridCell.Tab.0.bottom/0.0.1280.680@0.0.1280.680" timestamp="1625828374151" />
+    <state width="1237" height="137" key="GridCell.Tab.0.center" timestamp="1625828374151">
       <screen x="0" y="0" width="1280" height="680" />
     </state>
-    <state width="1237" height="231" key="GridCell.Tab.0.center/0.0.1280.680@0.0.1280.680" timestamp="1625820051611" />
-    <state width="1237" height="231" key="GridCell.Tab.0.left" timestamp="1625820051611">
+    <state width="1237" height="137" key="GridCell.Tab.0.center/0.0.1280.680@0.0.1280.680" timestamp="1625828374151" />
+    <state width="1237" height="137" key="GridCell.Tab.0.left" timestamp="1625828374151">
       <screen x="0" y="0" width="1280" height="680" />
     </state>
-    <state width="1237" height="231" key="GridCell.Tab.0.left/0.0.1280.680@0.0.1280.680" timestamp="1625820051611" />
-    <state width="1237" height="231" key="GridCell.Tab.0.right" timestamp="1625820051611">
+    <state width="1237" height="137" key="GridCell.Tab.0.left/0.0.1280.680@0.0.1280.680" timestamp="1625828374151" />
+    <state width="1237" height="137" key="GridCell.Tab.0.right" timestamp="1625828374151">
       <screen x="0" y="0" width="1280" height="680" />
     </state>
-    <state width="1237" height="231" key="GridCell.Tab.0.right/0.0.1280.680@0.0.1280.680" timestamp="1625820051611" />
-    <state x="233" y="74" key="Vcs.Push.Dialog.v2" timestamp="1625766818248">
+    <state width="1237" height="137" key="GridCell.Tab.0.right/0.0.1280.680@0.0.1280.680" timestamp="1625828374151" />
+    <state x="233" y="74" key="Vcs.Push.Dialog.v2" timestamp="1625821040279">
       <screen x="0" y="0" width="1280" height="680" />
     </state>
-    <state x="233" y="74" key="Vcs.Push.Dialog.v2/0.0.1280.680@0.0.1280.680" timestamp="1625766818248" />
+    <state x="233" y="74" key="Vcs.Push.Dialog.v2/0.0.1280.680@0.0.1280.680" timestamp="1625821040279" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
diff --git UsersDecks/hamrazAllDecks.txt UsersDecks/hamrazAllDecks.txt
diff --git UsersDecks/parmidaAllDecks.txt UsersDecks/parmidaAllDecks.txt
