Index: src/main/java/controller/DuelController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport controller.exeption.*;\r\nimport model.*;\r\nimport view.DuelView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class DuelController {\r\n\r\n    public static final int[] playerGroundNumbers = {3, 4, 2, 5, 1};\r\n    public static final int[] opponentGroundNumbers = {3, 2, 4, 1, 5};\r\n    private User player;\r\n    private User rival;\r\n    private Round[] rounds;\r\n    private final int roundNumber;\r\n    private SelectedCard selectedCard;\r\n    private int roundCounter;\r\n    private Phase phase;\r\n    private boolean hasSummonedOrSetInThisTurn;\r\n    private ArrayList<ArrayList<ActionsDoneInTurn>> actionsOnThisCardPlayer=new ArrayList<>(5);\r\n//    private ArrayList<ArrayList<ActionsDoneInTurn>> actionsOnThisCardRival=new ArrayList<>(5);\r\n    private Integer[] playerAttackPoints;\r\n    private Integer[] rivalAttackPoints;\r\n    private Integer[] playerDefencePoints;\r\n    private Integer[] rivalDefencePoints;\r\n    /*private boolean hasUsedHeraldInThisTurn;\r\n    private boolean hasUsedTexChangerInThisTurn;*/\r\n    /*boolean[] hasChangedPositionInThisTurn;\r\n    boolean[] hasSetInThisTurn;\r\n    boolean[] hasAttackedInThisTurn;*/\r\n//    MonsterZone monsterZone;\r\n    boolean isStartTurn;\r\n    private boolean shouldEndGameForView;\r\n    //TODO check frequently: cancel, unselect, printBoard\r\n\r\n    public DuelController(User player, User rival, int roundNumber) {\r\n        this.player = player;\r\n        this.rival = rival;\r\n        setGameDeck(this.player);\r\n        setGameDeck(this.rival);\r\n        this.rounds = new Round[roundNumber];\r\n        this.roundNumber = roundNumber;\r\n        this.roundCounter = 0;\r\n//        this.monsterZone = new MonsterZone(this);\r\n        startNewGame(null);\r\n    }\r\n\r\n    private void setGameDeck(User user) {\r\n        Deck deck;\r\n        if (user.getDeckByName(\"@\" + user.getActiveDeck().getDeckName()) == null) {\r\n            deck = new Deck(\"@\" + user.getActiveDeck().getDeckName());\r\n        } else {\r\n            deck = user.getDeckByName(\"@\" + user.getActiveDeck().getDeckName());\r\n            user.removeDeck(deck);\r\n        }\r\n        ArrayList<Cardable> mainCards = new ArrayList<>(user.getActiveDeck().getMainDeck());\r\n        ArrayList<Cardable> sideCards = new ArrayList<>(user.getActiveDeck().getSideDeck());\r\n        deck.setDeck(mainCards, sideCards);\r\n        user.addDeck(deck);\r\n        user.setGameDeck(deck);\r\n    }\r\n\r\n    public User getPlayer() {\r\n        return this.player;\r\n    }\r\n\r\n    public User getRival() {\r\n        return this.rival;\r\n    }\r\n\r\n    public void setPlayer(User player) {\r\n        this.player = player;\r\n    }\r\n\r\n    public void setRival(User rival) {\r\n        this.rival = rival;\r\n    }\r\n\r\n    public boolean getHasEnabledSuijin(int i){\r\n        return actionsOnThisCardPlayer.get(i).contains(ActionsDoneInTurn.ENABLE_SUIJIN);\r\n    }\r\n\r\n    public void setHasEnabledSuijinTrue(int i){\r\n        actionsOnThisCardPlayer.get(i).add(ActionsDoneInTurn.ENABLE_SUIJIN);\r\n    }\r\n\r\n    public void setMonsterAttackPlayer(int i,Integer number){\r\n        this.playerAttackPoints[i] = number;\r\n    }\r\n\r\n    public void setMonsterAttackRival(int i,Integer number){\r\n        this.rivalAttackPoints[i] = number;\r\n    }\r\n\r\n    /*public MonsterZone getMonsterZone() {\r\n        return this.monsterZone;\r\n    }*/\r\n\r\n    public SelectedCard getSelectedCard() {\r\n        return this.selectedCard;\r\n    }\r\n\r\n    public boolean getShouldEndGameForView() {\r\n        return this.shouldEndGameForView;\r\n    }\r\n\r\n    public static int[] getOpponentGroundNumbers() {\r\n        return opponentGroundNumbers;\r\n    }\r\n\r\n    public static int[] getPlayerGroundNumbers() {\r\n        return playerGroundNumbers;\r\n    }\r\n\r\n\r\n    /*public boolean getHasUsedHeraldInThisTurn() {\r\n        return this.hasUsedHeraldInThisTurn;\r\n    }\r\n\r\n    public void setHasHasUsedHeraldInThisTurnTrue() {\r\n        this.hasUsedHeraldInThisTurn = true;\r\n    }\r\n\r\n    public boolean getHasUsedTexChangerInThisTurn() {\r\n        return this.hasUsedTexChangerInThisTurn;\r\n    }\r\n\r\n    public void setHasUsedTexChangerInThisTurn() {\r\n        this.hasUsedTexChangerInThisTurn = true;\r\n    }*/\r\n\r\n    //TODO age vaght shod choose first player random\r\n    private void startNewGame(User winner) {\r\n        if (winner != null) {\r\n            User loser;\r\n            if (winner.equals(this.player)) {\r\n                loser = this.rival;\r\n            } else {\r\n                loser = this.player;\r\n            }\r\n            this.player = loser;\r\n            this.rival = winner;\r\n        } else this.isStartTurn = true;\r\n        this.player.setNewBoard();\r\n        this.rival.setNewBoard();\r\n        clearLastTurn();\r\n        startDrawPhase(true);\r\n    }\r\n\r\n    public void selectCardPlayerMonsterZone(int address) throws Exception {\r\n        MonsterCard[] monsters = this.player.getBoard().getMonsters();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (monsters[address] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getMonsterByNumber(address), BoardZone.MONSTERZONE, address, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentMonsterZone(int address) throws Exception {\r\n        MonsterCard[] monsters = this.rival.getBoard().getMonsters();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = opponentGroundNumbers[address - 1] - 1;\r\n        if (monsters[address - 1] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getMonsterByNumber(address), BoardZone.MONSTERZONE, address, this.rival);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerTrapAndSpellZone(int address) throws Exception {\r\n        Cardable[] spellAndTrap = this.player.getBoard().getSpellsAndTraps();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (spellAndTrap[address - 1] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getSpellAndTrapByNumber(address), BoardZone.SPELLANDTRAPZONE, address, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentTrapAndSpellZone(int address) throws Exception {\r\n        Cardable[] spellAndTrap = this.rival.getBoard().getSpellsAndTraps();\r\n        if ((address > 5) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        }\r\n        address = opponentGroundNumbers[address - 1] - 1;\r\n        if (spellAndTrap[address - 1] == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getSpellAndTrapByNumber(address), BoardZone.SPELLANDTRAPZONE, address, this.rival);\r\n\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerFieldZone() throws Exception {\r\n        Cardable fieldZone = this.player.getBoard().getFieldZone();\r\n        if (fieldZone == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.player.getBoard().getFieldZone(), BoardZone.FIELDZONE, 1, this.player);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardOpponentFieldZone() throws Exception {\r\n        Cardable fieldZone = this.player.getBoard().getFieldZone();\r\n        if (fieldZone == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        } else {\r\n            this.selectedCard = new SelectedCard(this.rival.getBoard().getFieldZone(), BoardZone.FIELDZONE, 1, this.rival);\r\n            DuelView.printText(\"card selected\");\r\n        }\r\n    }\r\n\r\n    public void selectCardPlayerHand(int address) throws Exception {\r\n        List<Cardable> cardsInHand = this.player.getBoard().getCardsInHand();\r\n        if ((address > cardsInHand.size()) || (address < 1)) {\r\n            throw new InvalidSelection();\r\n        } else if (cardsInHand.get(address - 1) == null) {\r\n            throw new NoCardFoundInThisPosition();\r\n        }\r\n        this.selectedCard = new SelectedCard(this.player.getBoard().getCardInHandByNumber(address - 1), BoardZone.HAND, address - 1, this.player);\r\n        DuelView.printText(\"card selected\");\r\n    }\r\n\r\n    private void unselectCard() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else {\r\n            this.selectedCard = null;\r\n        }\r\n    }\r\n\r\n    public void setSelectedCard(SelectedCard selectedCard) {\r\n        this.selectedCard = selectedCard;\r\n    }\r\n\r\n    public void unselectCardFromCommand() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else {\r\n            this.selectedCard = null;\r\n            DuelView.printText(\"card deselected\");\r\n        }\r\n    }\r\n\r\n    public int getCountOfMonsterCardsInGround(User user) {\r\n        MonsterCard[] monsterCards = user.getBoard().getMonsters();\r\n        int countOfMonsterCardsInGround = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            if (monsterCards[i] != null) {\r\n                countOfMonsterCardsInGround++;\r\n            }\r\n        }\r\n        return countOfMonsterCardsInGround;\r\n    }\r\n\r\n    public void summonMonster() throws Exception {\r\n        //TODO special va ritual summon\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        }\r\n        //TODO in exception payinie halate \"مد نظر قابلیت احضار عادی را نداشته باشد monster\" ro nadare hanooz(fekr konam dare alan)\r\n        if (!(this.selectedCard.getCard() instanceof MonsterCard && this.selectedCard.getBoardZone().equals(BoardZone.HAND) && !((MonsterCard) this.selectedCard.getCard()).getCardType().equals(CardType.RITUAL))) {\r\n            throw new CanNotSummon();\r\n        }\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2)))) {\r\n            throw new ActionNotAllowedInThisPhase();\r\n        }\r\n        if (this.player.getBoard().isFullMonsterZone()) {\r\n            throw new FullMonsterZone();\r\n        }\r\n        if (((MonsterCard) this.selectedCard.getCard()).getCanBeNormalSummoned()) {\r\n            if (hasSummonedOrSetInThisTurn) {\r\n                throw new AlreadySummoned();\r\n            }\r\n            MonsterCard monsterCard = (MonsterCard) selectedCard.getCard();\r\n            if (monsterCard.getLevel() <= 4) {\r\n                this.player.getBoard().putMonster(monsterCard, \"OO\");\r\n                monsterCard.takeAction(this, TakeActionCase.SUMMONED, this.player, this.selectedCard.getNumber());\r\n                this.player.getBoard().getCardsInHand().remove(this.selectedCard.getNumber() - 1);\r\n                unselectCard();\r\n                DuelView.printText(\"summoned successfully\");\r\n                hasSummonedOrSetInThisTurn = true;\r\n                return;\r\n            }\r\n            if (monsterCard.getLevel() < 7) {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 1) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeOneMonsterForSummon();\r\n                }\r\n            } else {\r\n                if (getCountOfMonsterCardsInGround(this.player) < 2) {\r\n                    throw new InsufficientForTribute();\r\n                } else {\r\n                    tributeTwoMonstersForSummon();\r\n                }\r\n            }\r\n        } else if (!((MonsterCard) this.selectedCard.getCard()).getCardType().equals(CardType.RITUAL)) {\r\n            specialSummonNormal();\r\n        }\r\n    }\r\n\r\n    private void tributeOneMonsterForSummon() throws Exception {\r\n        String input = DuelView.scan();\r\n        if (input.equals(\"cancel\")) return;\r\n        int address = Integer.parseInt(input);\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address) == null) throw new NoMonsterHere1();\r\n        this.player.getBoard().removeMonster(address);\r\n        removeMonsterPlayer(address);\r\n        this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"OO\");\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.SUMMONED, this.player, this.selectedCard.getNumber());\r\n        this.player.getBoard().getCardsInHand().remove(this.selectedCard.getNumber() - 1);\r\n        unselectCard();\r\n        DuelView.printText(\"summoned successfully\");\r\n        hasSummonedOrSetInThisTurn = true;\r\n    }\r\n\r\n    private void tributeTwoMonstersForSummon() throws Exception {\r\n        String input1 = DuelView.scan();\r\n        if (input1.equals(\"cancel\")) return;\r\n        int address1 = Integer.parseInt(input1) - 1;\r\n        address1 = playerGroundNumbers[address1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address1) == null) throw new NoMonsterHere1();\r\n        String input2 = DuelView.scan();\r\n        if (input2.equals(\"cancel\")) return;\r\n        int address2 = Integer.parseInt(input2) - 1;\r\n        address2 = playerGroundNumbers[address2] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address2) == null) throw new NoMonsterHere1();\r\n        if (address1 == address2) throw new sameAddresses();\r\n        this.player.getBoard().removeMonster(address1);\r\n        this.player.getBoard().removeMonster(address2);\r\n        removeMonsterPlayer(address1);\r\n        removeMonsterPlayer(address2);\r\n        this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"OO\");\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.SUMMONED, this.player, this.selectedCard.getNumber());\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"summoned successfully\");\r\n        hasSummonedOrSetInThisTurn = true;\r\n    }\r\n\r\n    public void specialSummonNormal() throws Exception {\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.SPECIAL_SUMMONED, this.player, this.selectedCard.getNumber());\r\n\r\n    }\r\n\r\n    private void specialSummonWithSpell() throws Exception {\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.HAND)) {\r\n            throw new CanNotSpecialSummon();\r\n        }\r\n        /*if (*//*hayula special summon nashod*//*) {\r\n        DuelView.printText(\"you should special summon right now\");\r\n        special summon kone\r\n        }*/\r\n    }\r\n\r\n    public void preSet() throws Exception {\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!(this.selectedCard.getBoardZone().equals(BoardZone.HAND))) throw new CanNotSet();\r\n        if (this.selectedCard.getCard() instanceof MonsterCard) setMonster();\r\n        else if (this.selectedCard.getCard() instanceof SpellCard) setSpell();\r\n        else if (this.selectedCard.getCard() instanceof TrapCard) setTrap();\r\n    }\r\n\r\n    private void setMonster() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2)))) {\r\n            throw new ImproperPhase();\r\n        }\r\n        if (this.player.getBoard().isFullMonsterZone()) {\r\n            throw new FullMonsterZone();\r\n        }\r\n        if (hasSummonedOrSetInThisTurn) {\r\n            throw new AlreadySummoned();\r\n        }\r\n        MonsterCard monsterCard = (MonsterCard) this.selectedCard.getCard();\r\n        if (monsterCard.getLevel() <= 4) {\r\n            this.actionsOnThisCardPlayer.get(this.player.getBoard().putMonster(monsterCard, \"DH\")).add(ActionsDoneInTurn.SET);\r\n//            monsterZone.setHasSetInThisTurn(this.player.getBoard().putMonster(monsterCard, \"DH\"), true);\r\n            this.player.getBoard().getCardsInHand().remove(this.selectedCard.getNumber() - 1);\r\n            unselectCard();\r\n            DuelView.printText(\"set successfully\");\r\n            hasSummonedOrSetInThisTurn = true;\r\n            printBoard();\r\n            return;\r\n        }\r\n        if (monsterCard.getLevel() < 7) {\r\n            if (getCountOfMonsterCardsInGround(this.player) < 1) {\r\n                throw new InsufficientForTribute();\r\n            } else {\r\n                tributeOneMonsterForSet();\r\n            }\r\n        } else {\r\n            if (getCountOfMonsterCardsInGround(this.player) < 2) {\r\n                throw new InsufficientForTribute();\r\n            } else {\r\n                tributeTwoMonstersForSet();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void tributeOneMonsterForSet() throws Exception {\r\n        String input = DuelView.scan();\r\n        if (input.equals(\"cancel\")) return;\r\n        int address = Integer.parseInt(input);\r\n        address = playerGroundNumbers[address - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address) == null) throw new NoMonsterHere1();\r\n        this.player.getBoard().removeMonster(address);\r\n        removeMonsterPlayer(address);\r\n        this.actionsOnThisCardPlayer.get(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\")).add(ActionsDoneInTurn.SET);\r\n//        monsterZone.setHasSetInThisTurn(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\"), true);\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        hasSummonedOrSetInThisTurn = true;\r\n        printBoard();\r\n    }\r\n\r\n    private void tributeTwoMonstersForSet() throws Exception {\r\n        String input1 = DuelView.scan();\r\n        if (input1.equals(\"cancel\")) return;\r\n        int address1 = Integer.parseInt(input1);\r\n        address1 = playerGroundNumbers[address1 - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address1) == null) throw new NoMonsterHere1();\r\n        String input2 = DuelView.scan();\r\n        if (input2.equals(\"cancel\")) return;\r\n        int address2 = Integer.parseInt(input2);\r\n        address2 = playerGroundNumbers[address2 - 1] - 1;\r\n        if (this.player.getBoard().getMonsterByNumber(address2) == null) throw new NoMonsterHere1();\r\n        if (address1 == address2) throw new sameAddresses();\r\n        this.player.getBoard().getCardsInHand().remove((int) this.selectedCard.getNumber());\r\n        this.player.getBoard().removeMonster(address1);\r\n        this.player.getBoard().removeMonster(address2);\r\n        removeMonsterPlayer(address1);\r\n        removeMonsterPlayer(address2);\r\n        this.actionsOnThisCardPlayer.get(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\")).add(ActionsDoneInTurn.SET);\r\n//        monsterZone.setHasSetInThisTurn(this.player.getBoard().putMonster((MonsterCard) selectedCard.getCard(), \"DH\"), true);\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        hasSummonedOrSetInThisTurn = true;\r\n        printBoard();\r\n    }\r\n\r\n    private void setSpell() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new ImproperPhase();\r\n        SpellCard spellCard = (SpellCard) this.selectedCard.getCard();\r\n        if (!spellCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().isFullSpellAndTrapZone())\r\n                throw new FullSpellZone();\r\n            this.player.getBoard().putSpellOrTrap(spellCard, \"H\");\r\n        } else {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            this.player.getBoard().putInFieldZone(spellCard);\r\n        }\r\n        this.player.getBoard().getCardsInHand().remove(this.selectedCard.getNumber() - 1);\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        printBoard();\r\n    }\r\n\r\n    private void setTrap() throws Exception {\r\n        if (!(phase.equals(Phase.MAIN_PHASE1) || (phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new ImproperPhase();\r\n        TrapCard trapCard = (TrapCard) this.selectedCard.getCard();\r\n        if (!trapCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().isFullSpellAndTrapZone()) {\r\n                throw new FullSpellZone();\r\n            }\r\n            this.player.getBoard().putSpellOrTrap(trapCard, \"H\");\r\n        } else {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            this.player.getBoard().putInFieldZone(trapCard);\r\n        }\r\n        this.player.getBoard().getCardsInHand().remove(this.selectedCard.getNumber() - 1);\r\n        unselectCard();\r\n        DuelView.printText(\"set successfully\");\r\n        printBoard();\r\n    }\r\n\r\n    public void changePosition(String targetPosition) throws Exception {\r\n        String targetPositionInShort = \"\";\r\n        switch (targetPosition) {\r\n            case \"attack\":\r\n                targetPositionInShort = \"OO\";\r\n                break;\r\n            case \"defence\":\r\n                targetPositionInShort = \"DO\";\r\n                break;\r\n        }\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) || this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\"))\r\n            throw new CanNotChangePosition();\r\n        if (!(this.phase.equals(Phase.MAIN_PHASE1) || (this.phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new CantDoActionInThisPhase();\r\n        if (this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(targetPositionInShort) || this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\"))\r\n            throw new AlreadyInWantedPosition();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.CHANGE_POSITION))\r\n            throw new AlreadyChangedPosition();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.ATTACK) && this.phase.equals(Phase.MAIN_PHASE2))\r\n            throw new HasAttackedInBattle();\r\n        this.player.getBoard().changeMonsterPosition(this.selectedCard.getNumber(), targetPositionInShort);\r\n        actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.CHANGE_POSITION);\r\n//        monsterZone.setHasChangedPositionInThisTurn(this.selectedCard.getNumber(), true);\r\n        DuelView.printText(\"monster card position changed successfully\");\r\n        printBoard();\r\n    }\r\n\r\n    public void flipSummon() throws Exception {\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE))\r\n            throw new CanNotChangePosition();\r\n        if (!(this.phase.equals(Phase.MAIN_PHASE1) || this.phase.equals(Phase.MAIN_PHASE2)))\r\n            throw new CantDoActionInThisPhase();\r\n        if (!this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"DH\") || actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.SET))\r\n            throw new CanNotFlipSummon();\r\n        this.player.getBoard().changeMonsterPosition(this.selectedCard.getNumber(), \"OO\");\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.FLIP_SUMMONED, this.player, this.selectedCard.getNumber());\r\n        unselectCard();\r\n        DuelView.printText(\"flip summoned successfully\");\r\n        printBoard();\r\n    }\r\n\r\n    public void attackMonster(int monsterNumber) throws Exception {\r\n        monsterNumber = opponentGroundNumbers[monsterNumber - 1] - 1;\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!(this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE) && (this.selectedCard.getCard() instanceof MonsterCard) && (this.player.getBoard().getMonsterConditionByNumber(this.selectedCard.getNumber()).equals(\"OO\"))))\r\n            throw new CanNotAttack();\r\n        if (!(this.phase.equals(Phase.BATTLE_PHASE)))\r\n            throw new CantDoActionInThisPhase();\r\n        if (actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).contains(ActionsDoneInTurn.ATTACK))\r\n            throw new AlreadyAttacked();\r\n        if (getCountOfMonsterCardsInGround(this.rival) == 0)\r\n            throw new NoCardToAttack();\r\n        String targetPosition = this.rival.getBoard().getMonsterConditionByNumber(monsterNumber);\r\n        if (this.rival.getBoard().getMonsterByNumber(monsterNumber).canBeAttacked(this, monsterNumber)) {\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.ATTACKED, this.rival, monsterNumber);\r\n            switch (targetPosition) {\r\n                case \"OO\":\r\n                    attackMonsterOO(monsterNumber);\r\n                    break;\r\n                case \"DO\":\r\n                    attackMonsterDO(monsterNumber);\r\n                    break;\r\n                case \"DH\":\r\n                    attackMonsterDH(monsterNumber);\r\n                    break;\r\n            }\r\n        } else throw new CanNotAttackThisCard();\r\n    }\r\n\r\n    private void attackMonsterOO(int monsterNumber) throws Exception {\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        int targetAttack = this.rivalAttackPoints[monsterNumber];\r\n        if (attackerAttack > targetAttack) {\r\n            int damage = attackerAttack - targetAttack;\r\n            if (!this.rival.getBoard().getMonsterByNumber(monsterNumber).equals(MonsterCard.EXPLODER_DRAGON))\r\n                this.rival.decreaseLifePoint(damage);\r\n            this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"your opponent’s monster is destroyed and your opponent receives \" + damage + \" battle damage\");\r\n        } else if (attackerAttack == targetAttack) {\r\n            this.rival.getBoard().putInGraveYard(this.rival.getBoard().getMonsterByNumber(monsterNumber));\r\n            this.rival.getBoard().removeMonster(monsterNumber);\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            if (this.player.getBoard().getMonsterByNumber(this.selectedCard.getNumber()) != null) {\r\n                this.player.getBoard().putInGraveYard(this.selectedCard.getCard());\r\n                this.player.getBoard().removeMonster(this.selectedCard.getNumber());\r\n                removeMonsterPlayer(this.selectedCard.getNumber());\r\n            }\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"both you and your opponent monster cards are destroyed and no one receives damage\");\r\n        } else {\r\n            int damage = targetAttack - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.REMOVE_FROM_MONSTERZONE, this.player, this.selectedCard.getNumber());\r\n            this.player.getBoard().putInGraveYard(this.selectedCard.getCard());\r\n            this.player.getBoard().removeMonster(this.selectedCard.getNumber());\r\n            removeMonsterPlayer(this.selectedCard.getNumber());\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"Your monster card is destroyed and you received\" + damage + \"battle damage\");\r\n        }\r\n        unselectCard();\r\n        printBoard();\r\n    }\r\n\r\n    private void attackMonsterDO(int monsterNumber) throws Exception {\r\n        MonsterCard target = this.rival.getBoard().getMonsterByNumber(monsterNumber);\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        if (attackerAttack > target.getDefence()) {\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber);\r\n            this.rival.getBoard().putInGraveYard(target);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"the defense position monster is destroyed\");\r\n        } else if (attackerAttack == target.getDefence()) {\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"no card is destroyed\");\r\n        } else {\r\n            int damage = target.getDefence() - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"no card is destroyed and you received\" + damage + \" battle damage\");\r\n        }\r\n        unselectCard();\r\n        printBoard();\r\n    }\r\n\r\n    private void attackMonsterDH(int monsterNumber) throws Exception {\r\n        MonsterCard target = this.rival.getBoard().getMonsterByNumber(monsterNumber);\r\n        int attackerAttack = this.playerAttackPoints[this.selectedCard.getNumber()];\r\n        String targetName = this.rival.getBoard().getMonsterByNumber(monsterNumber).getName();\r\n        this.rival.getBoard().changeMonsterPosition(monsterNumber, \"DO\");\r\n        ((MonsterCard) this.selectedCard.getCard()).takeAction(this, TakeActionCase.FLIP_SUMMONED, this.rival, this.selectedCard.getNumber());\r\n        if (attackerAttack > target.getDefence()) {\r\n            this.rival.getBoard().putInGraveYard(target);\r\n            this.rival.getBoard().getMonsterByNumber(monsterNumber).takeAction(this, TakeActionCase.DIED_BY_BEING_ATTACKED, this.rival, monsterNumber);\r\n            this.rival.getBoard().removeMonster(monsterNumber);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and the defense position monster is destroyed\");\r\n        } else if (attackerAttack == target.getDefence()) {\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and no card is destroyed\");\r\n        } else {\r\n            int damage = target.getDefence() - attackerAttack;\r\n            this.player.decreaseLifePoint(damage);\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            DuelView.printText(\"opponent’s monster card was \" + targetName + \" and no card is destroyed and you received\" + damage + \" battle damage\");\r\n        }\r\n        unselectCard();\r\n        printBoard();\r\n    }\r\n\r\n    public void directAttack() throws Exception {\r\n        if (this.selectedCard == null) throw new NoCardSelected();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.MONSTERZONE)) throw new CanNotAttack();\r\n        if (!this.phase.equals(Phase.BATTLE_PHASE)) throw new ImproperPhase();\r\n        int countOfMonsterCardsInGround = getCountOfMonsterCardsInGround(this.rival);\r\n        if (countOfMonsterCardsInGround == 0) {\r\n            rival.decreaseLifePoint(((MonsterCard) this.selectedCard.getCard()).getAttack());\r\n            actionsOnThisCardPlayer.get(this.selectedCard.getNumber()).add(ActionsDoneInTurn.ATTACK);\r\n            unselectCard();\r\n            printBoard();\r\n        } else throw new CanNotAttackDirectly();\r\n        printBoard();\r\n    }\r\n\r\n    public void activateSpell() throws Exception {\r\n        if (this.selectedCard == null)\r\n            throw new NoCardSelected();\r\n        if (!(this.selectedCard.getCard() instanceof SpellCard))\r\n            throw new IsNotSpell();\r\n        if (!((this.phase.equals(Phase.MAIN_PHASE1)) || (this.phase.equals(Phase.MAIN_PHASE2))))\r\n            throw new CanNotActivateEffectOnThisTurn();\r\n        if (!this.selectedCard.getBoardZone().equals(BoardZone.HAND))\r\n            throw new AlreadyActivated();\r\n        SpellCard spellCard = (SpellCard) this.selectedCard.getCard();\r\n        if (this.player.getBoard().isFullSpellAndTrapZone() && !spellCard.getIcon().equals(Icon.FIELD))\r\n            throw new FullSpellZone();\r\n//        if (/*sahrti dasht ke nemishod faal kard */) throw new UndonePreparationOfSpell();\r\n        if (spellCard.getIcon().equals(Icon.FIELD)) {\r\n            if (this.player.getBoard().getFieldZone() != null) {\r\n                this.player.getBoard().putInGraveYard(this.player.getBoard().getFieldZone());\r\n                this.player.getBoard().removeFromFieldZone();\r\n            }\r\n            //TODO age lazeme condition ham pas bede\r\n            this.player.getBoard().putInFieldZone(spellCard);\r\n        } else {\r\n            this.player.getBoard().putSpellOrTrap(spellCard, \"O\");\r\n        }\r\n        this.player.getBoard().getCardsInHand().remove(this.selectedCard.getNumber() - 1);\r\n        unselectCard();\r\n        DuelView.printText(\"spell activated\");\r\n        printBoard();\r\n    }\r\n    //     if (/*ritual spell ya ritual summon she bad dasture dgei vared she*/)\r\n    //      DuelView.printText(\"you should ritual summon right now\");\r\n /*\r\n    private void ritualSummon() throws Exception{\r\n        if (this.selectedCard.getCard() == null) throw new NoCardSelected();\r\n        if(/*agar ritual tu dastemun nabud ya majmue sutuh .. barabar nabud */ //)\r\n\r\n            /*throw new CanNotRitualSummon();\r\n        if (this.selectedCard.getCard() instanceof SpellCard) ritualSpell();\r\n        if (this.selectedCard.getCard() instanceof MonsterCard) ritualMonster();\r\n    }\r\n\r\n    private void ritualSpell() throws Exception{\r\n\r\n    }\r\n    private void ritualMonster() throws Exception{\r\n\r\n    }\r\n*/\r\n\r\n    private void ritualSummon() throws Exception {\r\n\r\n\r\n    }\r\n\r\n    private void activateSpellOrTrapInRivalsTurn() throws Exception {\r\n        /*sharayet bar ghara bud*/\r\n        if (true) {\r\n            DuelView.printText(\"do you want to activate your trap and spell?\");\r\n            String input = DuelView.scan();\r\n            if (input.equals(\"yes\")) {\r\n//                if (/*kare digei anjam shod*/) throw new NotYourTurnForThisAction();\r\n                //faal sazie YEK card ke sharayetesh hast va ru zamine\r\n                DuelView.printText(\"spell/trap activated\");\r\n            } else if (input.equals(\"no\")) {\r\n                DuelView.printText(\"now it will be \" + this.player + \"'s turn\");\r\n                printBoard();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void cheatLifePoint(String target, int lifePoint) {\r\n        if (lifePoint < 2000) {\r\n            if (target.equals(\"player\"))\r\n                this.player.increaseLifePoint(lifePoint);\r\n            if (target.equals(\"opponent\"))\r\n                this.rival.decreaseLifePoint(lifePoint);\r\n            DuelView.printText(\"shame on you for cheating!!!!\");\r\n        }\r\n    }\r\n\r\n    public void cheatMoney(int amount) {\r\n        if (amount <= 5000)\r\n            this.player.increaseMoney(amount);\r\n        DuelView.printText(\"shame on you for cheating!!!!\");\r\n    }\r\n\r\n    //TODO lotfan ino check konin ok bashe\r\n    // be nazare man ke okeye(parmida)\r\n    public void cheatToWinGame() {\r\n        DuelView.printText(\"this is not a good way to win the game, but ok. Shame on you!\");\r\n        endGame(this.rival);\r\n    }\r\n\r\n    /*private void checkForChangesWhenAttackedMonster(int monsterNumber) {\r\n        switch (this.rival.getBoard().getMonsterByNumber(monsterNumber)) {\r\n            case COMMAND_KNIGHT:\r\n                changeAllAttackPointsBy400(-1);\r\n                break;\r\n        }\r\n    }*/\r\n\r\n    public void changeAllAttackPoints(int increaseOrDecrease,int amount){\r\n        Board playerBoard = this.player.getBoard();\r\n        Board rivalBoard= this.rival.getBoard();\r\n        for (int i = 0; i < 5; i++) {\r\n            if(playerBoard.getMonsterByNumber(i)!=null) this.playerAttackPoints[i]=this.playerAttackPoints[i]+increaseOrDecrease*amount;\r\n            if(rivalBoard.getMonsterByNumber(i)!=null) this.rivalAttackPoints[i]=this.rivalAttackPoints[i]+increaseOrDecrease*amount;\r\n        }\r\n    }\r\n\r\n    public void changePlayerAttackPoint(int address,int amount){\r\n        this.playerAttackPoints[address]+=amount;\r\n    }\r\n\r\n    public void changeRivalAttackPoint(int address,int amount){\r\n        this.rivalAttackPoints[address]+=amount;\r\n    }\r\n\r\n    public void changePlayerDefencePoint(int address,int amount){\r\n        this.playerDefencePoints[address]+=amount;\r\n    }\r\n\r\n    public void changeRivalDefencePoint(int address,int amount){\r\n        this.rivalDefencePoints[address]+=amount;\r\n    }\r\n\r\n    public void surrender() {\r\n        //todo shayad lazem bashe darbare in bishter tafakor konim\r\n        endGame(this.player);\r\n    }\r\n\r\n    public void manageEndGame() {\r\n        List<Cardable> playersCardInHand = player.getBoard().getCardsInHand();\r\n        List<Cardable> rivalsCardInHand = rival.getBoard().getCardsInHand();\r\n        if (player.getLifePoint() <= 0) {\r\n            endGame(player);\r\n        } else if (rival.getLifePoint() <= 0) {\r\n            endGame(rival);\r\n        } else if (playersCardInHand.isEmpty()) {\r\n            endGame(player);\r\n        } else if (rivalsCardInHand.isEmpty()) {\r\n            endGame(rival);\r\n        }\r\n    }\r\n\r\n    private void endGame(User loser) {\r\n        User winner;\r\n        if (loser.equals(rival)) {\r\n            winner = player;\r\n        } else {\r\n            winner = rival;\r\n        }\r\n        roundCounter++;\r\n        if (roundNumber == 1) {\r\n            winner.increaseScore(1000);\r\n            winner.increaseMoney(1000 + winner.getLifePoint());\r\n            loser.increaseMoney(100);\r\n            shouldEndGameForView = true;\r\n            DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n        }\r\n        if (roundNumber == 3) {\r\n            this.rounds[this.roundCounter - 1] = new Round(winner, loser, winner.getLifePoint(), loser.getLifePoint());\r\n            if (this.roundCounter == 2 && this.rounds[0].getWinner().equals(this.rounds[1].getWinner())) {\r\n                int winnerLP1 = this.rounds[0].getLifePointByUser(winner);\r\n                int winnerLP2 = this.rounds[1].getLifePointByUser(winner);\r\n                int maxLP = Math.max(winnerLP1, winnerLP2);\r\n                winner.increaseScore(3000);\r\n                winner.increaseMoney(3000 + (3 * maxLP));\r\n                loser.increaseMoney(300);\r\n                shouldEndGameForView = true;\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                DuelView.printText(winner.getUsername() + \" won the whole match with score: \" + winner.getScore() + \"-\" + loser.getScore());\r\n            } else if (roundCounter == 3) {\r\n                int winnerLP1 = this.rounds[0].getLifePointByUser(winner);\r\n                int winnerLP2 = this.rounds[1].getLifePointByUser(winner);\r\n                int winnerLP3 = this.rounds[2].getLifePointByUser(winner);\r\n                int maxLP = Math.max(winnerLP1, winnerLP2);\r\n                maxLP = Math.max(maxLP, winnerLP3);\r\n                winner.increaseScore(3000);\r\n                winner.increaseMoney(3000 + (3 * maxLP));\r\n                loser.increaseMoney(300);\r\n                shouldEndGameForView = true;\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                DuelView.printText(winner.getUsername() + \" won the whole match with score: \" + winner.getScore() + \"-\" + loser.getScore());\r\n            } else {\r\n                DuelView.printText(winner.getUsername() + \" won the game and the score is: \" + winner.getScore() + \"-\" + loser.getScore());\r\n                exchangeCardBetweenMainAndSide(this.player);\r\n                exchangeCardBetweenMainAndSide(this.rival);\r\n                startNewGame(winner);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void exchangeCardBetweenMainAndSide(User user) {\r\n        DuelView.printText(\"Do you want to exchange a card between main and side deck \" + user.getNickname() + \"?\");\r\n        String answer = DuelView.scan().toLowerCase(Locale.ROOT);\r\n        if (answer.equals(\"yes\")) { //todo balayi ro tolowercase kardam va ino bardashtam :  || answer.equals(\"Yes\")\r\n            DuelView.printText(\"enter card name from main and side\");\r\n            String main = DuelView.scan();\r\n            Cardable mainCard = user.getCardByName(main);\r\n            while (mainCard == null || !user.getGameDeck().getMainDeck().contains(mainCard)) {\r\n                DuelView.printText(\"Please enter a card you have in your main deck!\");\r\n                main = DuelView.scan();\r\n                mainCard = user.getCardByName(main);\r\n            }\r\n            String side = DuelView.scan();\r\n            Cardable sideCard = user.getCardByName(side);\r\n            while (sideCard == null || !user.getGameDeck().getSideDeck().contains(sideCard)) {\r\n                DuelView.printText(\"Please enter a card you have in your side deck!\");\r\n                side = DuelView.scan();\r\n                sideCard = user.getCardByName(side);\r\n            }\r\n            user.getGameDeck().getSideDeck().remove(sideCard);\r\n            user.getGameDeck().getMainDeck().remove(mainCard);\r\n            user.getGameDeck().getSideDeck().add(mainCard);\r\n            user.getGameDeck().getMainDeck().add(sideCard);\r\n        }\r\n    }\r\n\r\n    public void goNextPhase() {\r\n        //TODO in kar dare hala\r\n        if (this.phase.equals(Phase.DRAW_PHASE)) {\r\n            this.phase = Phase.STANDBY_PHASE;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (phase.equals(Phase.STANDBY_PHASE)) {\r\n            this.phase = Phase.MAIN_PHASE1;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n            printBoard();\r\n        } else if (phase.equals(Phase.MAIN_PHASE1)) {\r\n            if (!isStartTurn)\r\n                this.phase = Phase.BATTLE_PHASE;\r\n            else\r\n                this.phase = Phase.MAIN_PHASE2;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (this.phase.equals(Phase.BATTLE_PHASE)) {\r\n            this.phase = Phase.MAIN_PHASE2;\r\n            DuelView.printText(\"phase: \" + this.phase.getNamePascalCase());\r\n        } else if (this.phase.equals(Phase.MAIN_PHASE2)) {\r\n            this.phase = Phase.END_PHASE;\r\n        } else if (this.phase.equals(Phase.END_PHASE)) {\r\n            DuelView.printText(\"phase: \" + phase.getNamePascalCase());\r\n            DuelView.printText(\"its \" + rival.getNickname() + \"’s turn\");\r\n            changeTurn();\r\n            startDrawPhase(false);\r\n        }\r\n    }\r\n\r\n    private void startDrawPhase(boolean isFirstTime) {\r\n        this.phase = Phase.DRAW_PHASE;\r\n        ArrayList<Cardable> playerMainCards = (ArrayList<Cardable>) this.player.getGameDeck().getMainDeck();\r\n        ArrayList<Cardable> rivalMainCards = (ArrayList<Cardable>) this.rival.getGameDeck().getMainDeck();\r\n        if (playerMainCards.size() == 0) endGame(this.player);\r\n        else {\r\n            if (!isFirstTime) {\r\n                this.player.getBoard().addCardToHand(playerMainCards.get(playerMainCards.size() - 1));\r\n                this.player.getGameDeck().removeCardFromMainDeck(playerMainCards.get(playerMainCards.size() - 1));\r\n                Collections.shuffle(this.player.getGameDeck().getMainDeck());\r\n                DuelView.printText(\"new card added to the hand : \" + playerMainCards.get(playerMainCards.size() - 1).getNamePascalCase());\r\n            } else {\r\n                for (int i = 0; i < 5; i++) {\r\n                    this.player.getBoard().addCardToHand(playerMainCards.get(playerMainCards.size() - 1));\r\n                    this.player.getGameDeck().removeCardFromMainDeck(playerMainCards.get(playerMainCards.size() - 1));\r\n                    this.rival.getBoard().addCardToHand(rivalMainCards.get(rivalMainCards.size() - 1));\r\n                    this.rival.getGameDeck().removeCardFromMainDeck(rivalMainCards.get(rivalMainCards.size() - 1));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void changeTurn() {\r\n        if (this.isStartTurn) this.isStartTurn = false;\r\n        clearLastTurn();\r\n        //TODO inam hanooz kar dare\r\n        User temp = this.player;\r\n        this.player = rival;\r\n        this.rival = temp;\r\n        changePlayerAndRival();\r\n        if (this.player.getUsername().equals(\"@AI@\"))\r\n            handleAITurn();\r\n\r\n    }\r\n\r\n    public void changePlayerAndRival(){\r\n        Integer[] temp = this.playerAttackPoints;\r\n        this.playerAttackPoints = this.rivalAttackPoints;\r\n        this.rivalAttackPoints = temp;\r\n    }\r\n\r\n    private void clearLastTurn() {\r\n        this.selectedCard = null;\r\n        this.hasSummonedOrSetInThisTurn = false;\r\n        /*this.hasUsedHeraldInThisTurn = false;\r\n        this.hasUsedTexChangerInThisTurn = false;*/\r\n        newThoseThatResetWithTurn();\r\n    }\r\n\r\n    private void newThoseThatResetWithTurn(){\r\n        for (int i = 0; i < 5; i++) {\r\n            actionsOnThisCardPlayer.get(i).clear();\r\n            if(this.playerAttackPoints[i]!=null && this.playerAttackPoints[i]==0 && this.player.getBoard().getMonsterByNumber(i).getAttack()!=0){\r\n                this.playerAttackPoints[i] = this.player.getBoard().getMonsterByNumber(i).getAttack();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void printBoard() {\r\n        String toPrint = this.rival.getNickname() + \":\" + this.rival.getLifePoint() + \"\\n\";\r\n        for (Cardable ignored : this.rival.getBoard().getCardsInHand()) {\r\n            toPrint += \"\\tc\";\r\n        }\r\n        toPrint += \"\\n\";\r\n        toPrint += this.rival.getGameDeck().getMainSize() + \"\\n\";\r\n        for (int i = 4; i > -1; i--) {\r\n            toPrint += \"\\t\";\r\n            if (this.rival.getBoard().getSpellAndTrapConditionByNumber(i) == null) toPrint += \"E\";\r\n            else toPrint += this.rival.getBoard().getSpellAndTrapConditionByNumber(i);\r\n        }\r\n        toPrint += \"\\n\";\r\n        for (int i = 4; i > -1; i--) {\r\n            toPrint += \"\\t\";\r\n            if (this.rival.getBoard().getMonsterConditionByNumber(i) == null) toPrint += \"E\";\r\n            else toPrint += this.rival.getBoard().getMonsterConditionByNumber(i);\r\n        }\r\n        toPrint += \"\\n\" + this.rival.getBoard().getCardsInGraveyard().size() + \"\\t\\t\\t\\t\\t\\t\";\r\n        if (this.rival.getBoard().getFieldZone() == null) toPrint += \"E\\n\";\r\n        else toPrint += \"O\\n\";\r\n        toPrint += \"\\n--------------------------\\n\\n\";\r\n        if (this.player.getBoard().getFieldZone() == null) toPrint += \"E\\t\\t\\t\\t\\t\\t\";\r\n        else toPrint += \"O\\t\\t\\t\\t\\t\\t\";\r\n        toPrint += this.player.getBoard().getCardsInGraveyard().size() + \"\\n\";\r\n        for (int i = 0; i < 5; i++) {\r\n            toPrint += \"\\t\";\r\n            if (this.player.getBoard().getMonsterConditionByNumber(i) == null) toPrint += \"E\";\r\n            else toPrint += this.player.getBoard().getMonsterConditionByNumber(i);\r\n        }\r\n        toPrint += \"\\n\";\r\n        for (int i = 0; i < 5; i++) {\r\n            toPrint += \"\\t\";\r\n            if (this.player.getBoard().getSpellAndTrapConditionByNumber(i) == null) toPrint += \"E\";\r\n            else toPrint += this.player.getBoard().getSpellAndTrapConditionByNumber(i);\r\n        }\r\n        toPrint += \"\\t\\t\\t\\t\\t\\t\" + this.player.getGameDeck().getMainSize() + \"\\n\";\r\n        for (Cardable ignored : this.player.getBoard().getCardsInHand()) {\r\n            toPrint += \"c\\t\";\r\n        }\r\n        toPrint += \"\\n\" + this.player.getNickname() + \":\" + this.player.getLifePoint();\r\n        DuelView.printText(toPrint);\r\n    }\r\n\r\n    public void showCard() throws Exception {\r\n        if (this.selectedCard == null) {\r\n            throw new NoCardSelected();\r\n        } else if (!this.selectedCard.getOwner().equals(this.player)) {\r\n            throw new InvisibleCard();\r\n        } else\r\n            DuelView.printText(this.selectedCard.getCard().toString());\r\n    }\r\n\r\n    public void showGraveyard() throws Exception {\r\n        List<Cardable> graveyard = this.player.getBoard().getCardsInGraveyard();\r\n        String toPrint = \"\";\r\n        if (graveyard.isEmpty())\r\n            throw new GraveYardEmpty();\r\n        else {\r\n            for (Cardable cardInGraveyard : graveyard) {\r\n                if (graveyard.indexOf(cardInGraveyard) == graveyard.size() - 1) {\r\n                    toPrint += cardInGraveyard.getName() + \":\" + cardInGraveyard.getDescription();\r\n                } else {\r\n                    toPrint += cardInGraveyard.getName() + \":\" + cardInGraveyard.getDescription() + \"\\n\";\r\n                }\r\n            }\r\n        }\r\n        DuelView.printText(toPrint);\r\n        String input = DuelView.scan();\r\n        while (!input.equals(\"back\")) {\r\n            DuelView.printText(\"invalid command\");\r\n            input = DuelView.scan();\r\n        }\r\n    }\r\n\r\n    public void removeMonsterPlayer(int address) {\r\n        actionsOnThisCardPlayer.get(address).clear();\r\n        /*monsterZone.setHasChangedPositionInThisTurn(address, false);\r\n        monsterZone.setHasSetInThisTurn(address, false);\r\n        monsterZone.setMonsterAttackPlayer(address, null);*/\r\n        setMonsterAttackPlayer(address, null);\r\n        player.getBoard().removeMonster(address);\r\n        ((MonsterCard) selectedCard.getCard()).takeAction(this, TakeActionCase.REMOVE_FROM_MONSTERZONE, this.player, this.selectedCard.getNumber());\r\n    }\r\n\r\n    public void handleAITurn() {\r\n        setMonsterCardInAI();\r\n        changePositionInAI();\r\n        setSpellOrTrapInAI();\r\n        goNextPhase();\r\n        attackInAI();\r\n        //TODO faal sazie spell o trap\r\n        goNextPhase();\r\n        setSpellOrTrapInAI();\r\n        changeTurn();\r\n    }\r\n\r\n    //fixme un exception haye duc ro bara set monster biam inja check konam\r\n    //TODO in mokhalefe 10 haro check konam. (age na vazehe baratun ye jur null pointer e. tabe haye most oleast AI ro bebinin migiri dastano)\r\n\r\n    private void setMonsterCardInAI(){\r\n        int numberOfMonstersOnPlayerBoard =numberOfMonstersOnPlayerBoard();\r\n        if (numberOfMonstersOnPlayerBoard > 1 && monsterCardWithTwoTributesWithMaxAttackPointInHand() != null)\r\n            setATwoTributeMonster();\r\n        else if (numberOfMonstersOnPlayerBoard > 0 && monsterCardWithOneTributeWithMaxAttackPointInHand() != null)\r\n            setAOneTributeMonster();\r\n        else if (numberOfMonstersOnPlayerBoard != 5 && monsterCardWithoutTributeWithMaxAttackPointInHand() != null)\r\n            setANoTributeMonster();\r\n    }\r\n\r\n    private void setATwoTributeMonster(){\r\n        if (numberOfLevelSevenEightMonstersInHand() > 0) {\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard());\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard());\r\n            this.player.getBoard().putMonster(monsterCardWithTwoTributesWithMaxAttackPointInHand(), \"OO\");\r\n        }\r\n\r\n    }\r\n\r\n    private void setAOneTributeMonster() {\r\n        if (numberOfLevelFiveSixMonstersInPlayerHand() > 0) {\r\n            this.player.getBoard().removeMonster(monsterCardWithLeaseAttackPointOnPlayerBoard());\r\n            this.player.getBoard().putMonster(monsterCardWithOneTributeWithMaxAttackPointInHand(), \"OO\");\r\n        }\r\n    }\r\n\r\n    private void setANoTributeMonster() {\r\n        if (numberOfLevelOneTwoFourMonstersInPlayerHand() > 0) {\r\n            if (monsterCardWithoutTributeWithMaxAttackPointInHand() != null && monsterCardWithLeastDefencePointOnRivalBoard() != 10)\r\n                if (numberOfMonstersOnPlayerBoard() == 0 && monsterCardWithoutTributeWithMaxAttackPointInHand().getAttack() < monsterCardWithLeaseAttackPointOnPlayerBoard())\r\n                    this.player.getBoard().putMonster(monsterCardWithMaxDefenseInHand(), \"DH\");\r\n                else if (numberOfMonstersOnPlayerBoard() < 5)\r\n                    this.player.getBoard().putMonster(monsterCardWithoutTributeWithMaxAttackPointInHand(), \"OO\");\r\n        }\r\n    }\r\n\r\n    private void setSpellOrTrapInAI(){\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i <numberOfCardsInHand ; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof SpellCard || card instanceof TrapCard)\r\n                if (numberOfSpellsAndTrapsOnPlayerBoard() < 5)\r\n                    this.player.getBoard().putSpellOrTrap(card,\"H\");\r\n        }\r\n    }\r\n\r\n    //TODO monster ha ke set mishan unayi ke monstercard return mikonan shayad null bede!\r\n    //TODO biad bad az har bar attack alamat bezanatesh ke ta hala bahash atack zade\r\n    private void attackInAI(){\r\n        if (numberOfMonstersOnPlayerBoard() > 0) {\r\n            ArrayList<Integer> hasAttacked = new ArrayList<>();\r\n            if (numberOfMonstersOnRivalBoard() == 0)\r\n                directAttackInAI();\r\n            if (allCardsOnRivalAreDH()) {\r\n                int numberOfAttacks = minFinder(numberOfMonstersOnRivalBoard(),numberOfMonstersOnPlayerBoard());\r\n                for (int i = 0; i < numberOfAttacks; i++) {\r\n                    //TODO if already bahash attack nazade\r\n                    attackAllDHInAI();\r\n                }\r\n            }\r\n            if (monsterCardWithMostAttackPointOnPlayerBoard() != 10 && monsterCardWithMostAttackPointOnRivalBoard() != 10) {\r\n                attackOOInAI();\r\n                if (numberOfMonstersOnRivalBoard() == 0)\r\n                    directAttackInAI();\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean allCardsOnRivalAreDH(){\r\n        int counterOfDH = 0;\r\n        int counterOfCards = 0;\r\n        for (int i = 1; i < 6; i++) {\r\n            if (this.rival.getBoard().getMonsterByNumber(i) != null) {\r\n                counterOfCards++;\r\n                if (!this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DH\"))\r\n                    counterOfDH++;\r\n            }\r\n        }\r\n        if (counterOfDH == counterOfCards)\r\n            return true;\r\n        else return false;\r\n    }\r\n\r\n    private void directAttackInAI(){\r\n        for (int i = 1; i < 6 ; i++) {\r\n            MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null) {\r\n                try {\r\n                    selectCardPlayerMonsterZone(i);\r\n                    directAttack();\r\n                    unselectCard();\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void attackAllDHInAI(){\r\n        try {\r\n            selectCardPlayerMonsterZone(monsterCardWithMostAttackPointOnPlayerBoard());\r\n            int wantedMonster = 0;\r\n            for (int i = 1; i < 6; i++) {\r\n                MonsterCard monsterCard = this.rival.getBoard().getMonsterByNumber(i);\r\n                if (monsterCard != null){\r\n                    wantedMonster = i;\r\n                    break;\r\n                }\r\n            }\r\n            attackMonsterDH(wantedMonster);\r\n        } catch (Exception exception) {\r\n            exception.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void attackOOInAI(){\r\n        if (this.rival.getBoard().getMonsterConditionByNumber(monsterCardWithMostAttackPointOnRivalBoard()).equals(\"OO\")) {\r\n            MonsterCard strongestRivalAttacker = this.rival.getBoard().getMonsterByNumber(monsterCardWithLeaseAttackPointOnRivalBoard());\r\n            MonsterCard strongestPlayerAttacker = this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard());\r\n            if (strongestPlayerAttacker.getAttack() > strongestRivalAttacker.getAttack()){\r\n                //TODO exception already attacked\r\n                try {\r\n                    attackMonsterOO(monsterCardWithMostAttackPointOnRivalBoard());\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n            int indexOfSecondStrongestAttackerOnRival = monsterCardWithSecondMostAttackPointOnRivalBoard(monsterCardWithMostAttackPointOnRivalBoard());\r\n            MonsterCard secondStrongestRivalAttacker = this.rival.getBoard().getMonsterByNumber(indexOfSecondStrongestAttackerOnRival);\r\n            if (secondStrongestRivalAttacker.getAttack() < strongestPlayerAttacker.getAttack())\r\n            //fixme selectCard o in chiza ke alan vaghan halesho nadaram\r\n            {\r\n                try {\r\n                    attackMonsterOO(indexOfSecondStrongestAttackerOnRival);\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void changePositionInAI(){\r\n        MonsterCard leastAttackerOnRival = this.rival.getBoard().getMonsterByNumber(monsterCardWithLeaseAttackPointOnRivalBoard());\r\n        MonsterCard strongestAttackerOnPlayer = this.player.getBoard().getMonsterByNumber(monsterCardWithMostAttackPointOnPlayerBoard());\r\n        if (leastAttackerOnRival.getAttack() > strongestAttackerOnPlayer.getAttack());\r\n        for (int i = 1; i < 6; i++) {\r\n            MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null)\r\n                this.player.getBoard().changeMonsterPosition(i,\"DO\");\r\n        }\r\n    }\r\n\r\n    //varede nahie debug shodeye shaki mishavid\r\n    private MonsterCard monsterCardWithoutTributeWithMaxAttackPointInHand(){\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getLevel() < 5)\r\n                        if (((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                            maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                            indexOfMaxAttacker = i;\r\n                        }\r\n            }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return this.player.getBoard().getMonsterByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithOneTributeWithMaxAttackPointInHand(){\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getLevel() == 5 || ((MonsterCard) card).getLevel() == 6)\r\n                        if (((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                            maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                            indexOfMaxAttacker = i;\r\n                        }\r\n            }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return this.player.getBoard().getMonsterByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithTwoTributesWithMaxAttackPointInHand(){\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getLevel() > 6)\r\n                        if (((MonsterCard) card).getAttack() > maxAttackPoint) {\r\n                            maxAttackPoint = ((MonsterCard) card).getAttack();\r\n                            indexOfMaxAttacker = i;\r\n                        }\r\n            }\r\n        }\r\n        if (indexOfMaxAttacker != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxAttacker);\r\n        else return null;\r\n    }\r\n\r\n    private MonsterCard monsterCardWithMaxDefenseInHand(){\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        int maxDefencePoint = 0;\r\n        int indexOfMaxDefender = 10;\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card != null) {\r\n                if (card instanceof MonsterCard)\r\n                    if (((MonsterCard) card).getDefence() > maxDefencePoint) {\r\n                        maxDefencePoint = ((MonsterCard) card).getDefence();\r\n                        indexOfMaxDefender = i;\r\n                    }\r\n            }\r\n        }\r\n        if (indexOfMaxDefender != 10)\r\n            return (MonsterCard) this.player.getBoard().getCardInHandByNumber(indexOfMaxDefender);\r\n        else return null;\r\n    }\r\n\r\n    private int monsterCardWithLeaseAttackPointOnRivalBoard(){\r\n        int leastAttackPoint = 100000;\r\n        int indexOfMinAttacker = 10;\r\n        for (int i = 1; i <= 5; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getSpellAndTrapConditionByNumber(i).equals(\"OO\"))\r\n                    if (leastAttackPoint > card.getAttack()) {\r\n                        indexOfMinAttacker = i;\r\n                        leastAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMinAttacker;\r\n    }\r\n\r\n    private int monsterCardWithLeaseAttackPointOnPlayerBoard(){\r\n        int leastAttackPoint = 100000;\r\n        int indexOfMinAttacker = 10;\r\n        for (int i = 1; i <= 5; i++) {\r\n            MonsterCard card = this.player.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.player.getBoard().getSpellAndTrapConditionByNumber(i).equals(\"OO\"))\r\n                    if (leastAttackPoint > card.getAttack()) {\r\n                        indexOfMinAttacker = i;\r\n                        leastAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMinAttacker;\r\n    }\r\n\r\n    private int monsterCardWithSecondMostAttackPointOnRivalBoard(int indexOfStrongestAttacker){\r\n        int indexOfSecondStrongestAttacker = 10;\r\n        int secondMostAttackPoint = 0;\r\n        if (numberOfMonstersOnPlayerBoard() > 1) {\r\n            indexOfStrongestAttacker = monsterCardWithMostAttackPointOnRivalBoard();\r\n            for (int i = 1; i <= 5; i++) {\r\n                MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n                if (card != null)\r\n                    if (i != indexOfStrongestAttacker && this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"OO\")){\r\n                        if (secondMostAttackPoint < card.getAttack()) {\r\n                            indexOfSecondStrongestAttacker = i;\r\n                            secondMostAttackPoint = card.getAttack();\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n        return indexOfSecondStrongestAttacker;\r\n    }\r\n\r\n    private int monsterCardWithMostAttackPointOnPlayerBoard(){\r\n        int mostAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 1; i <= 5; i++) {\r\n            MonsterCard card = this.player.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.player.getBoard().getSpellAndTrapConditionByNumber(i).equals(\"OO\"))\r\n                    if (mostAttackPoint < card.getAttack()) {\r\n                        indexOfMaxAttacker = i;\r\n                        mostAttackPoint = card.getAttack();\r\n                    }\r\n        }\r\n        return indexOfMaxAttacker;\r\n    }\r\n\r\n    private int monsterCardWithLeastDefencePointOnRivalBoard(){\r\n        int leastDefencePoint = 100000;\r\n        int indexOfMinDefender = 10;\r\n        for (int i = 1; i <= 5 ; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DO\"))\r\n                    if (leastDefencePoint > card.getDefence()) {\r\n                        leastDefencePoint = card.getDefence();\r\n                        indexOfMinDefender = i;\r\n                    }\r\n        }\r\n        return indexOfMinDefender;\r\n    }\r\n\r\n    private int monsterCardWithMostAttackPointOnRivalBoard(){\r\n        int mostAttackPoint = 0;\r\n        int indexOfMaxAttacker = 10;\r\n        for (int i = 1; i <= 5  ; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if (this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"OO\"))\r\n                    if (mostAttackPoint < card.getAttack()) {\r\n                        mostAttackPoint = card.getAttack();\r\n                        indexOfMaxAttacker = i;\r\n                    }\r\n        }\r\n        return indexOfMaxAttacker;\r\n    }\r\n\r\n    private int monsterCardWithMostDefencePointOnRivalBoard(){\r\n        int mostDefencePoint = 0;\r\n        int indexOfMaxDefender = 10;\r\n        for (int i = 1; i <= 5 ; i++) {\r\n            MonsterCard card = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (card != null)\r\n                if(this.rival.getBoard().getMonsterConditionByNumber(i).equals(\"DO\"))\r\n                    if (mostDefencePoint < card.getDefence()) {\r\n                        indexOfMaxDefender = i;\r\n                        mostDefencePoint = card.getDefence();\r\n                    }\r\n        }\r\n        return indexOfMaxDefender;\r\n    }\r\n    //payane nahie debug shode shaki\r\n\r\n    //varede nahie debug shode (be omide khoda) tazmin shode mishavid\r\n    private int numberOfMonstersOnPlayerBoard(){\r\n        int numberOfMonsters = 0;\r\n        for (int i = 1; i <= 5; i++) {\r\n            MonsterCard monsterCard = this.player.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null)\r\n                numberOfMonsters ++;\r\n        }\r\n        return numberOfMonsters;\r\n    }\r\n\r\n    private int numberOfMonstersOnRivalBoard(){\r\n        int numberOfMonsters = 0;\r\n        for (int i = 1; i <= 5; i++) {\r\n            MonsterCard monsterCard = this.rival.getBoard().getMonsterByNumber(i);\r\n            if (monsterCard != null)\r\n                numberOfMonsters ++;\r\n        }\r\n        return numberOfMonsters;\r\n    }\r\n\r\n    private int numberOfSpellsAndTrapsOnPlayerBoard(){\r\n        int numberOfSpellsAndTraps = 0;\r\n        for (int i = 1; i <= 5 ; i++) {\r\n            Cardable card = this.player.getBoard().getSpellAndTrapByNumber(i);\r\n            if(card != null)\r\n                numberOfSpellsAndTraps++;\r\n        }\r\n        return numberOfSpellsAndTraps;\r\n    }\r\n\r\n    private int numberOfLevelOneTwoFourMonstersInPlayerHand(){\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() < 5)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n\r\n    private int numberOfLevelFiveSixMonstersInPlayerHand(){\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() == 5 || ((MonsterCard) card).getLevel() == 6)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n\r\n    private int numberOfLevelSevenEightMonstersInHand(){\r\n        int numberOfWantedMonsters = 0;\r\n        int numberOfCardsInHand = this.player.getBoard().getCardsInHand().size();\r\n        for (int i = 0; i < numberOfCardsInHand; i++) {\r\n            Cardable card = this.player.getBoard().getCardInHandByNumber(i);\r\n            if (card instanceof MonsterCard)\r\n                if (((MonsterCard) card).getLevel() > 6)\r\n                    numberOfWantedMonsters++;\r\n        }\r\n        return numberOfWantedMonsters;\r\n    }\r\n    //payane nahie debug shode\r\n\r\n    public int minFinder(int firstNumber, int secondNumber){\r\n        if (firstNumber >= secondNumber)\r\n            return secondNumber;\r\n        else return firstNumber;\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/controller/DuelController.java	(revision 6b628bcd6e9e02262965177405ed042aa1e699d7)
+++ src/main/java/controller/DuelController.java	(date 1624531296410)
@@ -693,6 +693,8 @@
                 this.player.getBoard().removeFromFieldZone();
             }
             //TODO age lazeme condition ham pas bede
+            ((SpellCard) this.selectedCard.getCard()).takeAction(this,TakeActionCase.PUT_IN_SPELLTRAPZONE,this.player,)
+
             this.player.getBoard().putInFieldZone(spellCard);
         } else {
             this.player.getBoard().putSpellOrTrap(spellCard, "O");
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0b1707ad-3e75-4310-9619-956ec670ae1a\" name=\"Default Changelist\" comment=\"debug import user o baghie import ha\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2020.2\\plugins\\maven\\lib\\maven3\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1tf7blqKJ2Y0dLvEX2lrUssvKzj\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"project.structure.last.edited\" value=\"SDKs\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"reference.projectsettings.compiler.javacompiler\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"controller.exeption\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Main\">\r\n    <configuration name=\"LogInViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.LogInViewGraphic\" />\r\n      <module name=\"project_team_17_2\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"1.8\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"project_team_17\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.MainViewGraphic\" />\r\n      <module name=\"project_team_17\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ScoreBoardViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.ScoreBoardViewGraphic\" />\r\n      <module name=\"project_team_17_2\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"SignUpViewGraphic\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"view.SignUpViewGraphic\" />\r\n      <module name=\"project_team_17_2\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"view.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"ArquillianJUnit\" factoryName=\"\" nameIsGenerated=\"true\">\r\n      <option name=\"arquillianRunConfiguration\">\r\n        <value>\r\n          <option name=\"containerStateName\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"Application.MainViewGraphic\" />\r\n        <item itemvalue=\"Application.SignUpViewGraphic\" />\r\n        <item itemvalue=\"Application.ScoreBoardViewGraphic\" />\r\n        <item itemvalue=\"Application.LogInViewGraphic\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0b1707ad-3e75-4310-9619-956ec670ae1a\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1623148364579</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1623148364579</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"ScoreBoardViewGraphic.java\">\r\n      <created>1623149665559</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623149665559</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"ScoreBoardViewGraphic.java\">\r\n      <created>1623149688409</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623149688409</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Error sign up\">\r\n      <created>1623151044078</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623151044078</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"model.SpellCard.java&#10;Monster Reborn + Terraforming\">\r\n      <created>1623868346229</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623868346229</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"model.SpellCard.java&#10;RAIGEKI + POT_OF_GREED\">\r\n      <created>1623946393997</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1623946393997</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Yami SpellCard.java\">\r\n      <created>1624002906129</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624002906129</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Forest &amp; Closed Forest&#10;SpellCard.java\">\r\n      <created>1624012207305</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624012207305</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"debug import user\">\r\n      <created>1624093680512</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624093680512</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"debug import user o baghie import ha\">\r\n      <created>1624099929742</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1624099929742</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"10\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"ScoreBoardViewGraphic.java\" />\r\n    <MESSAGE value=\"Error sign up\" />\r\n    <MESSAGE value=\"model.SpellCard.java&#10;Monster Reborn + Terraforming\" />\r\n    <MESSAGE value=\"model.SpellCard.java&#10;RAIGEKI + POT_OF_GREED\" />\r\n    <MESSAGE value=\"Yami SpellCard.java\" />\r\n    <MESSAGE value=\"Forest &amp; Closed Forest&#10;SpellCard.java\" />\r\n    <MESSAGE value=\"debug import user\" />\r\n    <MESSAGE value=\"debug import user o baghie import ha\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"debug import user o baghie import ha\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision 6b628bcd6e9e02262965177405ed042aa1e699d7)
+++ .idea/workspace.xml	(date 1624531296660)
@@ -22,8 +22,10 @@
     <select />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="0b1707ad-3e75-4310-9619-956ec670ae1a" name="Default Changelist" comment="debug import user o baghie import ha">
+    <list default="true" id="0b1707ad-3e75-4310-9619-956ec670ae1a" name="Default Changelist" comment="Forest &amp; Closed Forest&#10;SpellCard.java">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_18_2021_12_08_PM__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_18_2021_12_08_PM__Default_Changelist_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/controller/DuelController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controller/DuelController.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -55,10 +57,8 @@
   </component>
   <component name="PropertiesComponent">
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
-    <property name="node.js.path.for.package.tslint" value="project" />
-    <property name="node.js.selected.package.tslint" value="(autodetect)" />
     <property name="project.structure.last.edited" value="SDKs" />
-    <property name="project.structure.proportion" value="0.15" />
+    <property name="project.structure.proportion" value="0.0" />
     <property name="project.structure.side.proportion" value="0.2" />
     <property name="restartRequiresConfirmation" value="false" />
     <property name="settings.editor.selected.configurable" value="reference.projectsettings.compiler.javacompiler" />
@@ -83,23 +83,8 @@
       </method>
     </configuration>
     <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="ALTERNATIVE_JRE_PATH" value="1.8" />
-      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
       <option name="MAIN_CLASS_NAME" value="Main" />
-      <module name="project_team_17" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="MainViewGraphic" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="view.MainViewGraphic" />
-      <module name="project_team_17" />
-      <extension name="coverage">
-        <pattern>
-          <option name="PATTERN" value="view.*" />
-          <option name="ENABLED" value="true" />
-        </pattern>
-      </extension>
+      <module name="project_team_17_2" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
@@ -130,21 +115,9 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
-      <option name="arquillianRunConfiguration">
-        <value>
-          <option name="containerStateName" value="" />
-        </value>
-      </option>
-      <option name="TEST_OBJECT" value="class" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
     <recent_temporary>
       <list>
         <item itemvalue="Application.Main" />
-        <item itemvalue="Application.MainViewGraphic" />
         <item itemvalue="Application.SignUpViewGraphic" />
         <item itemvalue="Application.ScoreBoardViewGraphic" />
         <item itemvalue="Application.LogInViewGraphic" />
@@ -209,21 +182,7 @@
       <option name="project" value="LOCAL" />
       <updated>1624012207305</updated>
     </task>
-    <task id="LOCAL-00008" summary="debug import user">
-      <created>1624093680512</created>
-      <option name="number" value="00008" />
-      <option name="presentableId" value="LOCAL-00008" />
-      <option name="project" value="LOCAL" />
-      <updated>1624093680512</updated>
-    </task>
-    <task id="LOCAL-00009" summary="debug import user o baghie import ha">
-      <created>1624099929742</created>
-      <option name="number" value="00009" />
-      <option name="presentableId" value="LOCAL-00009" />
-      <option name="project" value="LOCAL" />
-      <updated>1624099929742</updated>
-    </task>
-    <option name="localTasksCounter" value="10" />
+    <option name="localTasksCounter" value="8" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -245,8 +204,60 @@
     <MESSAGE value="model.SpellCard.java&#10;RAIGEKI + POT_OF_GREED" />
     <MESSAGE value="Yami SpellCard.java" />
     <MESSAGE value="Forest &amp; Closed Forest&#10;SpellCard.java" />
-    <MESSAGE value="debug import user" />
-    <MESSAGE value="debug import user o baghie import ha" />
-    <option name="LAST_COMMIT_MESSAGE" value="debug import user o baghie import ha" />
+    <option name="LAST_COMMIT_MESSAGE" value="Forest &amp; Closed Forest&#10;SpellCard.java" />
+  </component>
+  <component name="WindowStateProjectService">
+    <state x="421" y="58" key="FileChooserDialogImpl" timestamp="1624285098018">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state x="421" y="58" key="FileChooserDialogImpl/0.0.1280.680@0.0.1280.680" timestamp="1624285098018" />
+    <state width="1237" height="170" key="GridCell.Tab.0.bottom" timestamp="1623766526113">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state width="1237" height="170" key="GridCell.Tab.0.bottom/0.0.1280.680@0.0.1280.680" timestamp="1623766526113" />
+    <state width="1237" height="170" key="GridCell.Tab.0.center" timestamp="1623766526113">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state width="1237" height="170" key="GridCell.Tab.0.center/0.0.1280.680@0.0.1280.680" timestamp="1623766526113" />
+    <state width="1237" height="170" key="GridCell.Tab.0.left" timestamp="1623766526113">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state width="1237" height="170" key="GridCell.Tab.0.left/0.0.1280.680@0.0.1280.680" timestamp="1623766526113" />
+    <state width="1237" height="170" key="GridCell.Tab.0.right" timestamp="1623766526113">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state width="1237" height="170" key="GridCell.Tab.0.right/0.0.1280.680@0.0.1280.680" timestamp="1623766526113" />
+    <state x="221" y="84" key="IDE.errors.dialog" timestamp="1623946267253">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state x="221" y="84" key="IDE.errors.dialog/0.0.1280.680@0.0.1280.680" timestamp="1623946267253" />
+    <state x="121" y="51" key="MergeDialog" timestamp="1623868524101">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state x="121" y="51" key="MergeDialog/0.0.1280.680@0.0.1280.680" timestamp="1623868524101" />
+    <state x="280" y="102" key="MultipleFileMergeDialog" timestamp="1623868524121">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state x="280" y="102" key="MultipleFileMergeDialog/0.0.1280.680@0.0.1280.680" timestamp="1623868524121" />
+    <state x="121" y="0" key="SettingsEditor" timestamp="1623148484919">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state x="121" y="0" key="SettingsEditor/0.0.1280.680@0.0.1280.680" timestamp="1623148484919" />
+    <state x="233" y="74" key="Vcs.Push.Dialog.v2" timestamp="1624012210240">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state x="233" y="74" key="Vcs.Push.Dialog.v2/0.0.1280.680@0.0.1280.680" timestamp="1624012210240" />
+    <state x="247" y="0" key="com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser" timestamp="1623936514260">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state x="247" y="0" key="com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser/0.0.1280.680@0.0.1280.680" timestamp="1623936514260" />
+    <state x="458" y="255" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1623766509277">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state x="458" y="255" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1280.680@0.0.1280.680" timestamp="1623766509277" />
+    <state x="297" y="151" key="run.anything.popup" timestamp="1623931675250">
+      <screen x="0" y="0" width="1280" height="680" />
+    </state>
+    <state x="297" y="151" key="run.anything.popup/0.0.1280.680@0.0.1280.680" timestamp="1623931675250" />
   </component>
 </project>
\ No newline at end of file
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_6_18_2021_12_08_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_6_18_2021_12_08_PM__Default_Changelist_.xml
